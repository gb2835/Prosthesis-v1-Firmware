
prosthesis_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba0  08006ba0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006ba0  08006ba0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ba0  08006ba0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000010  08006bb8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006bb8  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3e3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a41  00000000  00000000  0002f423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00031e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00032d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002558b  00000000  00000000  00033ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd8d  00000000  00000000  0005904b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9875  00000000  00000000  00066dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013064d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e1c  00000000  00000000  001306a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b34 	.word	0x08006b34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006b34 	.word	0x08006b34

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b087      	sub	sp, #28
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3330      	adds	r3, #48	; 0x30
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	4413      	add	r3, r2
 8000b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	f003 031f 	and.w	r3, r3, #31
 8000b64:	211f      	movs	r1, #31
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	0e9b      	lsrs	r3, r3, #26
 8000b72:	f003 011f 	and.w	r1, r3, #31
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	f003 031f 	and.w	r3, r3, #31
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	431a      	orrs	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b86:	bf00      	nop
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b087      	sub	sp, #28
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3314      	adds	r3, #20
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	0e5b      	lsrs	r3, r3, #25
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	4413      	add	r3, r2
 8000bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	0d1b      	lsrs	r3, r3, #20
 8000bba:	f003 031f 	and.w	r3, r3, #31
 8000bbe:	2107      	movs	r1, #7
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	0d1b      	lsrs	r3, r3, #20
 8000bcc:	f003 031f 	and.w	r3, r3, #31
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bdc:	bf00      	nop
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0318 	and.w	r3, r3, #24
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c0c:	40d9      	lsrs	r1, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	400b      	ands	r3, r1
 8000c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c16:	431a      	orrs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	0007ffff 	.word	0x0007ffff

08000c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6093      	str	r3, [r2, #8]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <LL_RCC_SetADCClockSource+0x28>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000c8e:	4905      	ldr	r1, [pc, #20]	; (8000ca4 <LL_RCC_SetADCClockSource+0x28>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	; 0x50
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d3e:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d42:	f7ff ff9b 	bl	8000c7c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d46:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d4a:	f7ff ffad 	bl	8000ca8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f7ff ffaa 	bl	8000ca8 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000d54:	2304      	movs	r3, #4
 8000d56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	4831      	ldr	r0, [pc, #196]	; (8000e2c <MX_ADC1_Init+0x130>)
 8000d66:	f004 ffd0 	bl	8005d0a <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	482f      	ldr	r0, [pc, #188]	; (8000e2c <MX_ADC1_Init+0x130>)
 8000d6e:	f7ff ffb3 	bl	8000cd8 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d72:	2300      	movs	r3, #0
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000d7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d82:	4619      	mov	r1, r3
 8000d84:	482a      	ldr	r0, [pc, #168]	; (8000e30 <MX_ADC1_Init+0x134>)
 8000d86:	f004 fe05 	bl	8005994 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4821      	ldr	r0, [pc, #132]	; (8000e30 <MX_ADC1_Init+0x134>)
 8000daa:	f004 fe19 	bl	80059e0 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481d      	ldr	r0, [pc, #116]	; (8000e34 <MX_ADC1_Init+0x138>)
 8000dbe:	f004 fda1 	bl	8005904 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	481b      	ldr	r0, [pc, #108]	; (8000e34 <MX_ADC1_Init+0x138>)
 8000dc6:	f7ff fea5 	bl	8000b14 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <MX_ADC1_Init+0x134>)
 8000dcc:	f7ff ff30 	bl	8000c30 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dd0:	4817      	ldr	r0, [pc, #92]	; (8000e30 <MX_ADC1_Init+0x134>)
 8000dd2:	f7ff ff3f 	bl	8000c54 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_ADC1_Init+0x13c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	099b      	lsrs	r3, r3, #6
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <MX_ADC1_Init+0x140>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	099a      	lsrs	r2, r3, #6
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_ADC1_Init+0x144>)
 8000df0:	fba3 2302 	umull	r2, r3, r3, r2
 8000df4:	08db      	lsrs	r3, r3, #3
 8000df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000df8:	e002      	b.n	8000e00 <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f9      	bne.n	8000dfa <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <MX_ADC1_Init+0x148>)
 8000e08:	2106      	movs	r1, #6
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <MX_ADC1_Init+0x134>)
 8000e0c:	f7ff fe95 	bl	8000b3a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e10:	2200      	movs	r2, #0
 8000e12:	490c      	ldr	r1, [pc, #48]	; (8000e44 <MX_ADC1_Init+0x148>)
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <MX_ADC1_Init+0x134>)
 8000e16:	f7ff febc 	bl	8000b92 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000e1a:	227f      	movs	r2, #127	; 0x7f
 8000e1c:	4909      	ldr	r1, [pc, #36]	; (8000e44 <MX_ADC1_Init+0x148>)
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_ADC1_Init+0x134>)
 8000e20:	f7ff fee2 	bl	8000be8 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	; 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	50040000 	.word	0x50040000
 8000e34:	50040300 	.word	0x50040300
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	053e2d63 	.word	0x053e2d63
 8000e40:	cccccccd 	.word	0xcccccccd
 8000e44:	0c900008 	.word	0x0c900008

08000e48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000e8a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000e8e:	f7ff fef5 	bl	8000c7c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000e92:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e96:	f7ff ff07 	bl	8000ca8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e9a:	2004      	movs	r0, #4
 8000e9c:	f7ff ff04 	bl	8000ca8 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4830      	ldr	r0, [pc, #192]	; (8000f74 <MX_ADC2_Init+0x12c>)
 8000eb2:	f004 ff2a 	bl	8005d0a <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	482e      	ldr	r0, [pc, #184]	; (8000f74 <MX_ADC2_Init+0x12c>)
 8000eba:	f7ff ff0d 	bl	8000cd8 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000eca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4829      	ldr	r0, [pc, #164]	; (8000f78 <MX_ADC2_Init+0x130>)
 8000ed2:	f004 fd5f 	bl	8005994 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4820      	ldr	r0, [pc, #128]	; (8000f78 <MX_ADC2_Init+0x130>)
 8000ef6:	f004 fd73 	bl	80059e0 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	4619      	mov	r1, r3
 8000f04:	481d      	ldr	r0, [pc, #116]	; (8000f7c <MX_ADC2_Init+0x134>)
 8000f06:	f004 fcfd 	bl	8005904 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	481b      	ldr	r0, [pc, #108]	; (8000f7c <MX_ADC2_Init+0x134>)
 8000f0e:	f7ff fe01 	bl	8000b14 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000f12:	4819      	ldr	r0, [pc, #100]	; (8000f78 <MX_ADC2_Init+0x130>)
 8000f14:	f7ff fe8c 	bl	8000c30 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000f18:	4817      	ldr	r0, [pc, #92]	; (8000f78 <MX_ADC2_Init+0x130>)
 8000f1a:	f7ff fe9b 	bl	8000c54 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_ADC2_Init+0x138>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	099b      	lsrs	r3, r3, #6
 8000f24:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <MX_ADC2_Init+0x13c>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	099a      	lsrs	r2, r3, #6
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_ADC2_Init+0x140>)
 8000f38:	fba3 2302 	umull	r2, r3, r3, r2
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f40:	e002      	b.n	8000f48 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f44:	3b01      	subs	r3, #1
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <MX_ADC2_Init+0x144>)
 8000f50:	2106      	movs	r1, #6
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_ADC2_Init+0x130>)
 8000f54:	f7ff fdf1 	bl	8000b3a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	490c      	ldr	r1, [pc, #48]	; (8000f8c <MX_ADC2_Init+0x144>)
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_ADC2_Init+0x130>)
 8000f5e:	f7ff fe18 	bl	8000b92 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000f62:	227f      	movs	r2, #127	; 0x7f
 8000f64:	4909      	ldr	r1, [pc, #36]	; (8000f8c <MX_ADC2_Init+0x144>)
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_ADC2_Init+0x130>)
 8000f68:	f7ff fe3e 	bl	8000be8 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3750      	adds	r7, #80	; 0x50
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48000800 	.word	0x48000800
 8000f78:	50040100 	.word	0x50040100
 8000f7c:	50040300 	.word	0x50040300
 8000f80:	20000004 	.word	0x20000004
 8000f84:	053e2d63 	.word	0x053e2d63
 8000f88:	cccccccd 	.word	0xcccccccd
 8000f8c:	10c00010 	.word	0x10c00010

08000f90 <ErrorHandler_AS5145B>:
} LED_Code_e;

static LED_Code_e CM_ledCode = NoError;

void ErrorHandler_AS5145B(EncoderIndex_e deviceIndex, AS5145B_Error_e error)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
	if(deviceIndex == AnkleEncoderIndex)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <ErrorHandler_AS5145B+0x1e>
		CM_ledCode = AnkleEncoderInitError;
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <ErrorHandler_AS5145B+0x28>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e002      	b.n	8000fb4 <ErrorHandler_AS5145B+0x24>
	else
		CM_ledCode = KneeEncoderInitError;
 8000fae:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <ErrorHandler_AS5145B+0x28>)
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	701a      	strb	r2, [r3, #0]

	while(1);
 8000fb4:	e7fe      	b.n	8000fb4 <ErrorHandler_AS5145B+0x24>
 8000fb6:	bf00      	nop
 8000fb8:	2000002c 	.word	0x2000002c

08000fbc <ErrorHandler_EPOS4>:
}

void ErrorHandler_EPOS4(MotorControllerIndex_e deviceIndex, EPOS4_Error_e error)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
	if(deviceIndex == AnkleMotorControllerIndex)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d111      	bne.n	8000ff6 <ErrorHandler_EPOS4+0x3a>
	{
		if(error == EPOS4_FaultError)
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d103      	bne.n	8000fe0 <ErrorHandler_EPOS4+0x24>
			CM_ledCode = AnkleMotorControllerFaultError;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <ErrorHandler_EPOS4+0x8c>)
 8000fda:	2203      	movs	r2, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e01b      	b.n	8001018 <ErrorHandler_EPOS4+0x5c>
		else if(error == EPOS4_AbortError)
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	2b09      	cmp	r3, #9
 8000fe4:	d103      	bne.n	8000fee <ErrorHandler_EPOS4+0x32>
			CM_ledCode = AnkleMotorControllerAbortError;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <ErrorHandler_EPOS4+0x8c>)
 8000fe8:	2204      	movs	r2, #4
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e014      	b.n	8001018 <ErrorHandler_EPOS4+0x5c>
		else
			CM_ledCode = AnkleMotorControllerInitError;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <ErrorHandler_EPOS4+0x8c>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e010      	b.n	8001018 <ErrorHandler_EPOS4+0x5c>
	}
	else
	{
		if(error == EPOS4_FaultError)
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d103      	bne.n	8001004 <ErrorHandler_EPOS4+0x48>
			CM_ledCode = KneeMotorControllerFaultError;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <ErrorHandler_EPOS4+0x8c>)
 8000ffe:	2208      	movs	r2, #8
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e009      	b.n	8001018 <ErrorHandler_EPOS4+0x5c>
		else if(error == EPOS4_AbortError)
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	2b09      	cmp	r3, #9
 8001008:	d103      	bne.n	8001012 <ErrorHandler_EPOS4+0x56>
			CM_ledCode = KneeMotorControllerAbortError;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <ErrorHandler_EPOS4+0x8c>)
 800100c:	2209      	movs	r2, #9
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e002      	b.n	8001018 <ErrorHandler_EPOS4+0x5c>
		else
			CM_ledCode = KneeMotorControllerInitError;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <ErrorHandler_EPOS4+0x8c>)
 8001014:	2207      	movs	r2, #7
 8001016:	701a      	strb	r2, [r3, #0]
	}

	if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <ErrorHandler_EPOS4+0x90>)
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <ErrorHandler_EPOS4+0x6c>
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <ErrorHandler_EPOS4+0x90>)
 8001022:	785b      	ldrb	r3, [r3, #1]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <ErrorHandler_EPOS4+0x72>
		EPOS4_DisableVoltage(AnkleMotorControllerIndex);
 8001028:	2000      	movs	r0, #0
 800102a:	f002 fe87 	bl	8003d3c <EPOS4_DisableVoltage>

	if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <ErrorHandler_EPOS4+0x90>)
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d003      	beq.n	800103e <ErrorHandler_EPOS4+0x82>
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <ErrorHandler_EPOS4+0x90>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d102      	bne.n	8001044 <ErrorHandler_EPOS4+0x88>
		EPOS4_DisableVoltage(KneeMotorControllerIndex);
 800103e:	2001      	movs	r0, #1
 8001040:	f002 fe7c 	bl	8003d3c <EPOS4_DisableVoltage>

	while(1);
 8001044:	e7fe      	b.n	8001044 <ErrorHandler_EPOS4+0x88>
 8001046:	bf00      	nop
 8001048:	2000002c 	.word	0x2000002c
 800104c:	20000030 	.word	0x20000030

08001050 <ErrorHandler_MCP25625>:
}

void ErrorHandler_MCP25625(uint8_t deviceIndex, MCP25625_Error_e error)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	71bb      	strb	r3, [r7, #6]
	if(deviceIndex == AnkleCAN_ControllerIndex)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <ErrorHandler_MCP25625+0x1e>
		CM_ledCode = AnkleCAN_ControllerInitError;
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <ErrorHandler_MCP25625+0x28>)
 8001068:	2205      	movs	r2, #5
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e002      	b.n	8001074 <ErrorHandler_MCP25625+0x24>
	else
		CM_ledCode = KneeCAN_ControllerInitError;
 800106e:	4b02      	ldr	r3, [pc, #8]	; (8001078 <ErrorHandler_MCP25625+0x28>)
 8001070:	220a      	movs	r2, #10
 8001072:	701a      	strb	r2, [r3, #0]

	while(1);
 8001074:	e7fe      	b.n	8001074 <ErrorHandler_MCP25625+0x24>
 8001076:	bf00      	nop
 8001078:	2000002c 	.word	0x2000002c

0800107c <ErrorHandler_MPU925x>:
}

void ErrorHandler_MPU925x(MPU925x_Error_e error)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	CM_ledCode = IMU_InitError;
 8001086:	4b02      	ldr	r3, [pc, #8]	; (8001090 <ErrorHandler_MPU925x+0x14>)
 8001088:	220b      	movs	r2, #11
 800108a:	701a      	strb	r2, [r3, #0]
	while(1);
 800108c:	e7fe      	b.n	800108c <ErrorHandler_MPU925x+0x10>
 800108e:	bf00      	nop
 8001090:	2000002c 	.word	0x2000002c

08001094 <LL_AHB2_GRP1_EnableClock>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800109e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4013      	ands	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000

080010c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80010f6:	2004      	movs	r0, #4
 80010f8:	f7ff ffcc 	bl	8001094 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ffc9 	bl	8001094 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001102:	2002      	movs	r0, #2
 8001104:	f7ff ffc6 	bl	8001094 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, ANKLE_ENCODER_CSn_Pin|ANKLE_CAN_CONTROLLER_CS_Pin|KNEE_ENCODER_CSn_Pin);
 8001108:	f242 0150 	movw	r1, #8272	; 0x2050
 800110c:	4826      	ldr	r0, [pc, #152]	; (80011a8 <MX_GPIO_Init+0xc8>)
 800110e:	f7ff ffd9 	bl	80010c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ANKLE_ENCODER_CLK_Pin|IMU_CS_Pin);
 8001112:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f7ff ffd3 	bl	80010c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|KNEE_CAN_CONTROLLER_CS_Pin|KNEE_ENCODER_CLK_Pin);
 800111e:	f241 0184 	movw	r1, #4228	; 0x1084
 8001122:	4822      	ldr	r0, [pc, #136]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001124:	f7ff ffce 	bl	80010c4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ANKLE_ENCODER_CSn_Pin|ANKLE_CAN_CONTROLLER_CS_Pin|KNEE_ENCODER_CSn_Pin;
 8001128:	f242 0350 	movw	r3, #8272	; 0x2050
 800112c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800112e:	2301      	movs	r3, #1
 8001130:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4819      	ldr	r0, [pc, #100]	; (80011a8 <MX_GPIO_Init+0xc8>)
 8001144:	f004 fde1 	bl	8005d0a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ANKLE_ENCODER_CLK_Pin|IMU_CS_Pin;
 8001148:	f44f 7388 	mov.w	r3, #272	; 0x110
 800114c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114e:	2301      	movs	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f004 fdd0 	bl	8005d0a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ANKLE_ENCODER_DO_Pin|KNEE_ENCODER_DO_Pin;
 800116a:	23a0      	movs	r3, #160	; 0xa0
 800116c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <MX_GPIO_Init+0xc8>)
 800117c:	f004 fdc5 	bl	8005d0a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|KNEE_CAN_CONTROLLER_CS_Pin|KNEE_ENCODER_CLK_Pin;
 8001180:	f241 0384 	movw	r3, #4228	; 0x1084
 8001184:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001186:	2301      	movs	r3, #1
 8001188:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_GPIO_Init+0xcc>)
 800119c:	f004 fdb5 	bl	8005d0a <LL_GPIO_Init>

}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	48000800 	.word	0x48000800
 80011ac:	48000400 	.word	0x48000400

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	60da      	str	r2, [r3, #12]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60da      	str	r2, [r3, #12]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60da      	str	r2, [r3, #12]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f023 0203 	bic.w	r2, r3, #3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	621a      	str	r2, [r3, #32]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f023 0201 	bic.w	r2, r3, #1
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60da      	str	r2, [r3, #12]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <LL_RCC_SetLPTIMClockSource>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80013d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0c1b      	lsrs	r3, r3, #16
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	4904      	ldr	r1, [pc, #16]	; (80013f8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000

080013fc <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001406:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <LL_APB1_GRP2_EnableClock+0x2c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4313      	orrs	r3, r2
 800140e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4013      	ands	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40021000 	.word	0x40021000

0800142c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8001430:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001434:	f7ff ffc8 	bl	80013c8 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001438:	2020      	movs	r0, #32
 800143a:	f7ff ffdf 	bl	80013fc <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800143e:	f7ff feb7 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001442:	4603      	mov	r3, r0
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff07 	bl	800125c <NVIC_EncodePriority>
 800144e:	4603      	mov	r3, r0
 8001450:	4619      	mov	r1, r3
 8001452:	2042      	movs	r0, #66	; 0x42
 8001454:	f7ff fed8 	bl	8001208 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8001458:	2042      	movs	r0, #66	; 0x42
 800145a:	f7ff feb7 	bl	80011cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 800145e:	2100      	movs	r1, #0
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_LPTIM2_Init+0x6c>)
 8001462:	f7ff ff9d 	bl	80013a0 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001466:	2100      	movs	r1, #0
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <MX_LPTIM2_Init+0x6c>)
 800146a:	f7ff ff63 	bl	8001334 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 800146e:	2100      	movs	r1, #0
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <MX_LPTIM2_Init+0x6c>)
 8001472:	f7ff ff4c 	bl	800130e <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001476:	2100      	movs	r1, #0
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_LPTIM2_Init+0x6c>)
 800147a:	f7ff ff22 	bl	80012c2 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 800147e:	2100      	movs	r1, #0
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_LPTIM2_Init+0x6c>)
 8001482:	f7ff ff31 	bl	80012e8 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_LPTIM2_Init+0x6c>)
 8001488:	f7ff ff7a 	bl	8001380 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800148c:	2100      	movs	r1, #0
 800148e:	4802      	ldr	r0, [pc, #8]	; (8001498 <MX_LPTIM2_Init+0x6c>)
 8001490:	f7ff ff63 	bl	800135a <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40009400 	.word	0x40009400

0800149c <__NVIC_SetPriorityGrouping>:
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_LPTIM_Enable>:
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	611a      	str	r2, [r3, #16]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_LPTIM_StartCounter>:
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	f023 0206 	bic.w	r2, r3, #6
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_LPTIM_SetAutoReload>:
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	0c1b      	lsrs	r3, r3, #16
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f043 0202 	orr.w	r2, r3, #2
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_RCC_LSE_Enable>:
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <LL_RCC_LSE_Enable+0x20>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <LL_RCC_LSE_Enable+0x20>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_RCC_LSE_SetDriveCapability>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80015c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ca:	f023 0218 	bic.w	r2, r3, #24
 80015ce:	4905      	ldr	r1, [pc, #20]	; (80015e4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000

080015e8 <LL_RCC_LSE_IsReady>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <LL_RCC_LSE_IsReady+0x24>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d101      	bne.n	80015fe <LL_RCC_LSE_IsReady+0x16>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <LL_RCC_LSE_IsReady+0x18>
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <LL_RCC_MSI_Enable>:
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <LL_RCC_MSI_Enable+0x1c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <LL_RCC_MSI_Enable+0x1c>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <LL_RCC_MSI_IsReady>:
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <LL_RCC_MSI_IsReady+0x20>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b02      	cmp	r3, #2
 800163e:	d101      	bne.n	8001644 <LL_RCC_MSI_IsReady+0x14>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_RCC_MSI_IsReady+0x16>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000

08001654 <LL_RCC_MSI_EnablePLLMode>:
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <LL_RCC_MSI_EnableRangeSelection>:
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <LL_RCC_MSI_SetRange>:
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <LL_RCC_MSI_SetRange+0x24>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	4904      	ldr	r1, [pc, #16]	; (80016b8 <LL_RCC_MSI_SetRange+0x24>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40021000 	.word	0x40021000

080016bc <LL_RCC_MSI_SetCalibTrimming>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	4904      	ldr	r1, [pc, #16]	; (80016e4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_RCC_SetSysClkSource>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <LL_RCC_SetSysClkSource+0x24>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 0203 	bic.w	r2, r3, #3
 80016f8:	4904      	ldr	r1, [pc, #16]	; (800170c <LL_RCC_SetSysClkSource+0x24>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <LL_RCC_GetSysClkSource>:
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <LL_RCC_GetSysClkSource+0x18>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <LL_RCC_SetAHBPrescaler>:
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <LL_RCC_SetAHBPrescaler+0x24>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173c:	4904      	ldr	r1, [pc, #16]	; (8001750 <LL_RCC_SetAHBPrescaler+0x24>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40021000 	.word	0x40021000

08001754 <LL_RCC_SetAPB1Prescaler>:
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <LL_RCC_SetAPB1Prescaler+0x24>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000

0800177c <LL_RCC_SetAPB2Prescaler>:
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000

080017a4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <LL_RCC_PLL_Enable+0x1c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <LL_RCC_PLL_Enable+0x1c>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <LL_RCC_PLL_IsReady+0x24>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017d4:	d101      	bne.n	80017da <LL_RCC_PLL_IsReady+0x16>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_RCC_PLL_IsReady+0x18>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000

080017ec <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001800:	4013      	ands	r3, r2
 8001802:	68f9      	ldr	r1, [r7, #12]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	0212      	lsls	r2, r2, #8
 800180c:	4311      	orrs	r1, r2
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	4904      	ldr	r1, [pc, #16]	; (8001824 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001814:	4313      	orrs	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000
 8001828:	f9ff808c 	.word	0xf9ff808c

0800182c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <LL_APB1_GRP1_EnableClock>:
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001856:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <LL_APB1_GRP1_EnableClock+0x2c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001862:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4013      	ands	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000

0800187c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001886:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001892:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4013      	ands	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000

080018ac <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <LL_FLASH_SetLatency+0x24>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 0207 	bic.w	r2, r3, #7
 80018bc:	4904      	ldr	r1, [pc, #16]	; (80018d0 <LL_FLASH_SetLatency+0x24>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40022000 	.word	0x40022000

080018d4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <LL_FLASH_GetLatency+0x18>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000

080018f0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <LL_SYSTICK_EnableIT+0x1c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <LL_SYSTICK_EnableIT+0x1c>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001920:	4904      	ldr	r1, [pc, #16]	; (8001934 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40007000 	.word	0x40007000

08001938 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <LL_PWR_EnableBkUpAccess+0x1c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40007000 	.word	0x40007000

08001958 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b0ba      	sub	sp, #232	; 0xe8
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff ff6c 	bl	800187c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019a8:	f7ff ff50 	bl	800184c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f7ff fd75 	bl	800149c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f9e9 	bl	8001d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f7ff fb93 	bl	80010e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019ba:	f001 fdef 	bl	800359c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019be:	f001 fb8f 	bl	80030e0 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 80019c2:	f7ff fd33 	bl	800142c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 80019c6:	f001 fbe1 	bl	800318c <MX_SPI2_Init>
  MX_ADC2_Init();
 80019ca:	f7ff fa3d 	bl	8000e48 <MX_ADC2_Init>
  MX_ADC1_Init();
 80019ce:	f7ff f995 	bl	8000cfc <MX_ADC1_Init>
  MX_TIM6_Init();
 80019d2:	f001 fd49 	bl	8003468 <MX_TIM6_Init>
  MX_SPI3_Init();
 80019d6:	f001 fc31 	bl	800323c <MX_SPI3_Init>
/*******************************************************************************
* USER ADDED DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t Encoder_Init[AS5145B_NUMBER_OF_DEVICES];
	Encoder_Init[AnkleEncoderIndex].DO_GPIOx = ANKLE_ENCODER_DO_GPIO_Port;
 80019da:	4bb4      	ldr	r3, [pc, #720]	; (8001cac <main+0x314>)
 80019dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	Encoder_Init[AnkleEncoderIndex].CLK_GPIOx = ANKLE_ENCODER_CLK_GPIO_Port;
 80019e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	Encoder_Init[AnkleEncoderIndex].CSn_GPIOx = ANKLE_ENCODER_CSn_GPIO_Port;
 80019e8:	4bb0      	ldr	r3, [pc, #704]	; (8001cac <main+0x314>)
 80019ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	Encoder_Init[AnkleEncoderIndex].DO_Pin = ANKLE_ENCODER_DO_Pin;
 80019ee:	2320      	movs	r3, #32
 80019f0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	Encoder_Init[AnkleEncoderIndex].CLK_Pin = ANKLE_ENCODER_CLK_Pin;
 80019f4:	2310      	movs	r3, #16
 80019f6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	Encoder_Init[AnkleEncoderIndex].CSn_Pin = ANKLE_ENCODER_CSn_Pin;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
	Encoder_Init[AnkleEncoderIndex].TIMx = TIM6;
 8001a02:	4bab      	ldr	r3, [pc, #684]	; (8001cb0 <main+0x318>)
 8001a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	Encoder_Init[AnkleEncoderIndex].timerRateMHz = 10;
 8001a08:	230a      	movs	r3, #10
 8001a0a:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0

	memcpy(&Encoder_Init[KneeEncoderIndex], &Encoder_Init[AnkleEncoderIndex], sizeof(Encoder_Init[AnkleEncoderIndex]));
 8001a0e:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001a12:	f107 05a8 	add.w	r5, r7, #168	; 0xa8
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Encoder_Init[KneeEncoderIndex].DO_GPIOx = KNEE_ENCODER_DO_GPIO_Port;
 8001a22:	4ba2      	ldr	r3, [pc, #648]	; (8001cac <main+0x314>)
 8001a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	Encoder_Init[KneeEncoderIndex].CLK_GPIOx = KNEE_ENCODER_CLK_GPIO_Port;
 8001a28:	4ba2      	ldr	r3, [pc, #648]	; (8001cb4 <main+0x31c>)
 8001a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	Encoder_Init[KneeEncoderIndex].CSn_GPIOx = KNEE_ENCODER_CSn_GPIO_Port;
 8001a2e:	4b9f      	ldr	r3, [pc, #636]	; (8001cac <main+0x314>)
 8001a30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	Encoder_Init[KneeEncoderIndex].DO_Pin = KNEE_ENCODER_DO_Pin;
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
	Encoder_Init[KneeEncoderIndex].CLK_Pin = KNEE_ENCODER_CLK_Pin;
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
	Encoder_Init[KneeEncoderIndex].CSn_Pin = KNEE_ENCODER_CSn_Pin;
 8001a40:	2340      	movs	r3, #64	; 0x40
 8001a42:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

	EPOS4_Init_t MotorController_Init[EPOS4_NUMBER_OF_DEVICES];
	MotorController_Init[AnkleMotorControllerIndex].nodeId = 2;
 8001a46:	2302      	movs	r3, #2
 8001a48:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	MotorController_Init[AnkleMotorControllerIndex].mcpIndex = AnkleCAN_ControllerIndex;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MotorController_Init[AnkleMotorControllerIndex].Requirements.isFirstStepRequired = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	MotorController_Init[AnkleMotorControllerIndex].Requirements.isModeOfOperationRequired = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.CAN_BitRate = EPOS4_Rate1000Kbps;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.MotorType = EPOS4_TrapezoidalPmBlMotor;
 8001a64:	230b      	movs	r3, #11
 8001a66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.nominalCurrent = 8000;
 8001a6a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.outputCurrentLimit = 29300;
 8001a70:	f247 2374 	movw	r3, #29300	; 0x7274
 8001a74:	63fb      	str	r3, [r7, #60]	; 0x3c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.numberOfPolePairs = 21;
 8001a76:	2315      	movs	r3, #21
 8001a78:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.thermalTimeConstantWinding = 400;
 8001a7c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001a80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.torqueConstant = 60 / (2 * 3.1416f * 100) * 1000000;	// For Kv = 100 rpm/V
 8001a84:	4b8c      	ldr	r3, [pc, #560]	; (8001cb8 <main+0x320>)
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.maxMotorSpeed = 2384;
 8001a88:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8001a8c:	64bb      	str	r3, [r7, #72]	; 0x48
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.maxGearInputSpeed = 100000;
 8001a8e:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <main+0x324>)
 8001a90:	64fb      	str	r3, [r7, #76]	; 0x4c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.sensorsConfiguration = 0x00100000;
 8001a92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a96:	653b      	str	r3, [r7, #80]	; 0x50
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.controlStructure = 0x00030111;
 8001a98:	4b89      	ldr	r3, [pc, #548]	; (8001cc0 <main+0x328>)
 8001a9a:	657b      	str	r3, [r7, #84]	; 0x54
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.commutationSensors = 0x00000030;
 8001a9c:	2330      	movs	r3, #48	; 0x30
 8001a9e:	65bb      	str	r3, [r7, #88]	; 0x58
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.axisConfigMiscellaneous = 0x00000000;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.currentControllerP_Gain = 643609;
 8001aa4:	4b87      	ldr	r3, [pc, #540]	; (8001cc4 <main+0x32c>)
 8001aa6:	663b      	str	r3, [r7, #96]	; 0x60
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.currentControllerI_Gain = 2791837;
 8001aa8:	4b87      	ldr	r3, [pc, #540]	; (8001cc8 <main+0x330>)
 8001aaa:	667b      	str	r3, [r7, #100]	; 0x64
	MotorController_Init[AnkleMotorControllerIndex].ModeOfOperation = EPOS4_CyclicSynchronousTorqueMode;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

	memcpy(&MotorController_Init[KneeMotorControllerIndex], &MotorController_Init[AnkleMotorControllerIndex], sizeof(MotorController_Init[AnkleMotorControllerIndex]));
 8001ab2:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001ab6:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MotorController_Init[KneeMotorControllerIndex].nodeId = 1;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	MotorController_Init[KneeMotorControllerIndex].mcpIndex = KneeCAN_ControllerIndex;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

  	MCP25625_Init_t CAN_Controller_Init[MCP25625_NUMBER_OF_DEVICES];
  	memset(&CAN_Controller_Init, 0, sizeof(CAN_Controller_Init));
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2220      	movs	r2, #32
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f005 f81e 	bl	8006b24 <memset>
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].SPIx = SPI3;
 8001ae8:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <main+0x334>)
 8001aea:	613b      	str	r3, [r7, #16]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CS_Port = ANKLE_CAN_CONTROLLER_CS_GPIO_Port;
 8001aec:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <main+0x314>)
 8001aee:	617b      	str	r3, [r7, #20]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].csPin = ANKLE_CAN_CONTROLLER_CS_Pin;
 8001af0:	2310      	movs	r3, #16
 8001af2:	833b      	strh	r3, [r7, #24]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.CLKEN = MCP25625_ClockoutDisabled;
 8001af4:	7ebb      	ldrb	r3, [r7, #26]
 8001af6:	f36f 0382 	bfc	r3, #2, #1
 8001afa:	76bb      	strb	r3, [r7, #26]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.OSM = MCP25625_OneShotModeEnabled;
 8001afc:	7ebb      	ldrb	r3, [r7, #26]
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	76bb      	strb	r3, [r7, #26]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.ABAT = MCP25625_AbortAllTransmissions;
 8001b04:	7ebb      	ldrb	r3, [r7, #26]
 8001b06:	f36f 1304 	bfc	r3, #4, #1
 8001b0a:	76bb      	strb	r3, [r7, #26]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.REQOP = MCP25625_NormalOperationMode;
 8001b0c:	7ebb      	ldrb	r3, [r7, #26]
 8001b0e:	f36f 1347 	bfc	r3, #5, #3
 8001b12:	76bb      	strb	r3, [r7, #26]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF1_Reg.Bits.BRP = 0;
 8001b14:	7efb      	ldrb	r3, [r7, #27]
 8001b16:	f36f 0305 	bfc	r3, #0, #6
 8001b1a:	76fb      	strb	r3, [r7, #27]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF1_Reg.Bits.SJW = MCP25625_Length1xT_Q;
 8001b1c:	7efb      	ldrb	r3, [r7, #27]
 8001b1e:	f36f 1387 	bfc	r3, #6, #2
 8001b22:	76fb      	strb	r3, [r7, #27]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.PRSEG = 4;
 8001b24:	7f3b      	ldrb	r3, [r7, #28]
 8001b26:	2204      	movs	r2, #4
 8001b28:	f362 0302 	bfi	r3, r2, #0, #3
 8001b2c:	773b      	strb	r3, [r7, #28]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.PHSEG1 = 1;
 8001b2e:	7f3b      	ldrb	r3, [r7, #28]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f362 03c5 	bfi	r3, r2, #3, #3
 8001b36:	773b      	strb	r3, [r7, #28]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.SAM = MCP25625_BusSampledOnceAtSamplePoint;
 8001b38:	7f3b      	ldrb	r3, [r7, #28]
 8001b3a:	f36f 1386 	bfc	r3, #6, #1
 8001b3e:	773b      	strb	r3, [r7, #28]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.BLTMODE = MCP25625_PS2LengthDeterminedByCNF3;
 8001b40:	7f3b      	ldrb	r3, [r7, #28]
 8001b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b46:	773b      	strb	r3, [r7, #28]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.PHSEG2 = 1;
 8001b48:	7f7b      	ldrb	r3, [r7, #29]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f362 0302 	bfi	r3, r2, #0, #3
 8001b50:	777b      	strb	r3, [r7, #29]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.WAKFIL = MCP25625_WakeUpFilterIsDisabled;
 8001b52:	7f7b      	ldrb	r3, [r7, #29]
 8001b54:	f36f 1386 	bfc	r3, #6, #1
 8001b58:	777b      	strb	r3, [r7, #29]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.SOF = MCP25625_ClockoutPinIsEnabledForClockOutFunction;
 8001b5a:	7f7b      	ldrb	r3, [r7, #29]
 8001b5c:	f36f 13c7 	bfc	r3, #7, #1
 8001b60:	777b      	strb	r3, [r7, #29]

  	memcpy(&CAN_Controller_Init[KneeCAN_ControllerIndex], &CAN_Controller_Init[AnkleCAN_ControllerIndex], sizeof(CAN_Controller_Init[AnkleCAN_ControllerIndex]));
 8001b62:	f107 0420 	add.w	r4, r7, #32
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	CAN_Controller_Init[KneeCAN_ControllerIndex].SPIx = SPI2;
 8001b70:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <main+0x338>)
 8001b72:	623b      	str	r3, [r7, #32]
  	CAN_Controller_Init[KneeCAN_ControllerIndex].CS_Port = KNEE_CAN_CONTROLLER_CS_GPIO_Port;
 8001b74:	4b4f      	ldr	r3, [pc, #316]	; (8001cb4 <main+0x31c>)
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  	CAN_Controller_Init[KneeCAN_ControllerIndex].csPin = KNEE_CAN_CONTROLLER_CS_Pin;
 8001b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7c:	853b      	strh	r3, [r7, #40]	; 0x28

  	MPU925x_Init_t IMU_Init;
  	IMU_Init.SPI_Handle = SPI1;
 8001b7e:	4b55      	ldr	r3, [pc, #340]	; (8001cd4 <main+0x33c>)
 8001b80:	607b      	str	r3, [r7, #4]
  	IMU_Init.CS_GPIOx = IMU_CS_GPIO_Port;
 8001b82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001b86:	60bb      	str	r3, [r7, #8]
  	IMU_Init.csPin = IMU_CS_Pin;
 8001b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8c:	81bb      	strh	r3, [r7, #12]

  	Prosthesis_Init.Joint = Combined;
 8001b8e:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <main+0x340>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	705a      	strb	r2, [r3, #1]
  	Prosthesis_Init.Side = Left;
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <main+0x340>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]

/*******************************************************************************
* USER ADDED INITIALIZATIONS
*******************************************************************************/

	LL_SYSTICK_EnableIT();
 8001b9a:	f7ff fea9 	bl	80018f0 <LL_SYSTICK_EnableIT>

	LL_LPTIM_Enable(LPTIM2);
 8001b9e:	484f      	ldr	r0, [pc, #316]	; (8001cdc <main+0x344>)
 8001ba0:	f7ff fcb4 	bl	800150c <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001ba4:	484d      	ldr	r0, [pc, #308]	; (8001cdc <main+0x344>)
 8001ba6:	f7ff fce7 	bl	8001578 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001baa:	213f      	movs	r1, #63	; 0x3f
 8001bac:	484b      	ldr	r0, [pc, #300]	; (8001cdc <main+0x344>)
 8001bae:	f7ff fcd0 	bl	8001552 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	4849      	ldr	r0, [pc, #292]	; (8001cdc <main+0x344>)
 8001bb6:	f7ff fcb9 	bl	800152c <LL_LPTIM_StartCounter>

	LL_TIM_EnableCounter(TIM6);
 8001bba:	483d      	ldr	r0, [pc, #244]	; (8001cb0 <main+0x318>)
 8001bbc:	f7ff fedc 	bl	8001978 <LL_TIM_EnableCounter>

	LL_SPI_Enable(SPI1);
 8001bc0:	4844      	ldr	r0, [pc, #272]	; (8001cd4 <main+0x33c>)
 8001bc2:	f7ff fec9 	bl	8001958 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001bc6:	4842      	ldr	r0, [pc, #264]	; (8001cd0 <main+0x338>)
 8001bc8:	f7ff fec6 	bl	8001958 <LL_SPI_Enable>
	LL_SPI_Enable(SPI3);
 8001bcc:	483f      	ldr	r0, [pc, #252]	; (8001ccc <main+0x334>)
 8001bce:	f7ff fec3 	bl	8001958 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001bd2:	4843      	ldr	r0, [pc, #268]	; (8001ce0 <main+0x348>)
 8001bd4:	f7ff fc86 	bl	80014e4 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001bd8:	4842      	ldr	r0, [pc, #264]	; (8001ce4 <main+0x34c>)
 8001bda:	f7ff fc83 	bl	80014e4 <LL_ADC_Enable>

	LL_mDelay(4000);	// Significant delay when powering on EPOS4
 8001bde:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001be2:	f004 ff35 	bl	8006a50 <LL_mDelay>

	MPU925x_Error_e imuError = MPU925x_Init(0, &IMU_Init);
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	2000      	movs	r0, #0
 8001bec:	f003 fb0e 	bl	800520c <MPU925x_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	if(imuError)
 8001bf6:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <main+0x270>
		ErrorHandler_MPU925x(imuError);
 8001bfe:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fa3a 	bl	800107c <ErrorHandler_MPU925x>
	MPU925x_SetAccelSensitivity(0, MPU925x_AccelSensitivity_8g);
 8001c08:	2102      	movs	r1, #2
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f003 fb32 	bl	8005274 <MPU925x_SetAccelSensitivity>
	MPU925x_SetGyroSensitivity(0, MPU925x_GyroSensitivity_1000dps);
 8001c10:	2102      	movs	r1, #2
 8001c12:	2000      	movs	r0, #0
 8001c14:	f003 fbc0 	bl	8005398 <MPU925x_SetGyroSensitivity>

	if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <main+0x340>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <main+0x290>
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <main+0x340>)
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d138      	bne.n	8001c9a <main+0x302>
	{
		AS5145B_Error_e encoderError = AS5145B_Init(AnkleEncoderIndex, &Encoder_Init[AnkleEncoderIndex]);
 8001c28:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f001 fd80 	bl	8003734 <AS5145B_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		if(encoderError)
 8001c3a:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <main+0x2b6>
			ErrorHandler_AS5145B(AnkleEncoderIndex, encoderError);
 8001c42:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001c46:	4619      	mov	r1, r3
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff f9a1 	bl	8000f90 <ErrorHandler_AS5145B>

		MCP25625_Error_e canControllerError = MCP25625_Init(AnkleCAN_ControllerIndex, &CAN_Controller_Init[AnkleCAN_ControllerIndex]);
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	4619      	mov	r1, r3
 8001c54:	2000      	movs	r0, #0
 8001c56:	f002 fd37 	bl	80046c8 <MCP25625_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
		if(canControllerError)
 8001c60:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <main+0x2dc>
			ErrorHandler_MCP25625(AnkleCAN_ControllerIndex, canControllerError);
 8001c68:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff f9ee 	bl	8001050 <ErrorHandler_MCP25625>

		EPOS4_Error_e motorControllerError = EPOS4_Init(AnkleMotorControllerIndex, &MotorController_Init[AnkleMotorControllerIndex]);
 8001c74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c78:	4619      	mov	r1, r3
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f001 ff40 	bl	8003b00 <EPOS4_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
		if(motorControllerError)
 8001c86:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <main+0x302>
			ErrorHandler_EPOS4(AnkleMotorControllerIndex, motorControllerError);
 8001c8e:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001c92:	4619      	mov	r1, r3
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff f991 	bl	8000fbc <ErrorHandler_EPOS4>
	}

	if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <main+0x340>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d022      	beq.n	8001ce8 <main+0x350>
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <main+0x340>)
 8001ca4:	785b      	ldrb	r3, [r3, #1]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d15a      	bne.n	8001d60 <main+0x3c8>
 8001caa:	e01d      	b.n	8001ce8 <main+0x350>
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	40001000 	.word	0x40001000
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	00017504 	.word	0x00017504
 8001cbc:	000186a0 	.word	0x000186a0
 8001cc0:	00030111 	.word	0x00030111
 8001cc4:	0009d219 	.word	0x0009d219
 8001cc8:	002a999d 	.word	0x002a999d
 8001ccc:	40003c00 	.word	0x40003c00
 8001cd0:	40003800 	.word	0x40003800
 8001cd4:	40013000 	.word	0x40013000
 8001cd8:	20000030 	.word	0x20000030
 8001cdc:	40009400 	.word	0x40009400
 8001ce0:	50040000 	.word	0x50040000
 8001ce4:	50040100 	.word	0x50040100
	{
		AS5145B_Error_e encoderError = AS5145B_Init(KneeEncoderIndex, &Encoder_Init[KneeEncoderIndex]);
 8001ce8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cec:	331c      	adds	r3, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f001 fd1f 	bl	8003734 <AS5145B_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		if(encoderError)
 8001cfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <main+0x378>
			ErrorHandler_AS5145B(KneeEncoderIndex, encoderError);
 8001d04:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff f940 	bl	8000f90 <ErrorHandler_AS5145B>

		MCP25625_Error_e canControllerError = MCP25625_Init(KneeCAN_ControllerIndex, &CAN_Controller_Init[KneeCAN_ControllerIndex]);
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	3310      	adds	r3, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f002 fcd5 	bl	80046c8 <MCP25625_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
		if(canControllerError)
 8001d24:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <main+0x3a0>
			ErrorHandler_MCP25625(KneeCAN_ControllerIndex, canControllerError);
 8001d2c:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8001d30:	4619      	mov	r1, r3
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff f98c 	bl	8001050 <ErrorHandler_MCP25625>

		EPOS4_Error_e motorControllerError = EPOS4_Init(KneeMotorControllerIndex, &MotorController_Init[KneeMotorControllerIndex]);
 8001d38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d3c:	333c      	adds	r3, #60	; 0x3c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	2001      	movs	r0, #1
 8001d42:	f001 fedd 	bl	8003b00 <EPOS4_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
		if(motorControllerError)
 8001d4c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <main+0x3c8>
			ErrorHandler_EPOS4(KneeMotorControllerIndex, motorControllerError);
 8001d54:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff f92e 	bl	8000fbc <ErrorHandler_EPOS4>
	}

	InitProsthesisControl(&Prosthesis_Init);
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <main+0x3e8>)
 8001d62:	f000 f8a3 	bl	8001eac <InitProsthesisControl>

/*******************************************************************************
* USER ADDED TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ImpedanceControl);
 8001d66:	2002      	movs	r0, #2
 8001d68:	f000 f95a 	bl	8002020 <RequireTestProgram>
* USER ADDED MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if(isProsthesisControlRequired)
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <main+0x3ec>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0fb      	beq.n	8001d6c <main+0x3d4>
	  {
		  RunProsthesisControl();
 8001d74:	f000 f96e 	bl	8002054 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <main+0x3ec>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 8001d7e:	e7f5      	b.n	8001d6c <main+0x3d4>
 8001d80:	20000030 	.word	0x20000030
 8001d84:	20000032 	.word	0x20000032

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001d8c:	2004      	movs	r0, #4
 8001d8e:	f7ff fd8d 	bl	80018ac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001d92:	bf00      	nop
 8001d94:	f7ff fd9e 	bl	80018d4 <LL_FLASH_GetLatency>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d1fa      	bne.n	8001d94 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001d9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001da2:	f7ff fdb5 	bl	8001910 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001da6:	f7ff fc33 	bl	8001610 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001daa:	bf00      	nop
 8001dac:	f7ff fc40 	bl	8001630 <LL_RCC_MSI_IsReady>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d1fa      	bne.n	8001dac <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001db6:	f7ff fc5d 	bl	8001674 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001dba:	20b0      	movs	r0, #176	; 0xb0
 8001dbc:	f7ff fc6a 	bl	8001694 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fc7b 	bl	80016bc <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001dc6:	f7ff fdb7 	bl	8001938 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff fbf6 	bl	80015bc <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001dd0:	f7ff fbe2 	bl	8001598 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001dd4:	bf00      	nop
 8001dd6:	f7ff fc07 	bl	80015e8 <LL_RCC_LSE_IsReady>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d1fa      	bne.n	8001dd6 <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001de0:	f7ff fc38 	bl	8001654 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de8:	2228      	movs	r2, #40	; 0x28
 8001dea:	2150      	movs	r1, #80	; 0x50
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff fcfd 	bl	80017ec <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001df2:	f7ff fd1b 	bl	800182c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001df6:	f7ff fcd5 	bl	80017a4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff fce2 	bl	80017c4 <LL_RCC_PLL_IsReady>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d1fa      	bne.n	8001dfc <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001e06:	2003      	movs	r0, #3
 8001e08:	f7ff fc6e 	bl	80016e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001e0c:	bf00      	nop
 8001e0e:	f7ff fc7f 	bl	8001710 <LL_RCC_GetSysClkSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d1fa      	bne.n	8001e0e <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fc87 	bl	800172c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001e1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e22:	f7ff fc97 	bl	8001754 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001e26:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e2a:	f7ff fca7 	bl	800177c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001e2e:	4804      	ldr	r0, [pc, #16]	; (8001e40 <SystemClock_Config+0xb8>)
 8001e30:	f004 fe00 	bl	8006a34 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <SystemClock_Config+0xb8>)
 8001e36:	f004 fe33 	bl	8006aa0 <LL_SetSystemCoreClock>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	04c4b400 	.word	0x04c4b400

08001e44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e58:	f043 0204 	orr.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	b29b      	uxth	r3, r3
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d101      	bne.n	8001e9e <LL_ADC_IsActiveFlag_EOC+0x18>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <InitProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	memcpy(&Device, Device_Init, sizeof(&Device_Init));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	484b      	ldr	r0, [pc, #300]	; (8001fe8 <InitProsthesisControl+0x13c>)
 8001ebc:	f004 fe24 	bl	8006b08 <memcpy>

	float startEqPoint = -11.0f;
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <InitProsthesisControl+0x140>)
 8001ec2:	617b      	str	r3, [r7, #20]
	float startKd = 0.00f;
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
	float startKp = 5.0f;
 8001eca:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <InitProsthesisControl+0x144>)
 8001ecc:	60fb      	str	r3, [r7, #12]

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001ece:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <InitProsthesisControl+0x13c>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <InitProsthesisControl+0x32>
 8001ed6:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <InitProsthesisControl+0x13c>)
 8001ed8:	785b      	ldrb	r3, [r3, #1]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d137      	bne.n	8001f4e <InitProsthesisControl+0xa2>
	{
		CM_Ankle.encoderBias = 1357 * AS5145B_RAW2DEG;
 8001ede:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001ee0:	4a45      	ldr	r2, [pc, #276]	; (8001ff8 <InitProsthesisControl+0x14c>)
 8001ee2:	621a      	str	r2, [r3, #32]

		CM_Ankle.EarlyStanceCtrl.eqPoint = startEqPoint;
 8001ee4:	4a43      	ldr	r2, [pc, #268]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
		CM_Ankle.EarlyStanceCtrl.kd = startKd;
 8001eea:	4a42      	ldr	r2, [pc, #264]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	6453      	str	r3, [r2, #68]	; 0x44
		CM_Ankle.EarlyStanceCtrl.kp = startKp;
 8001ef0:	4a40      	ldr	r2, [pc, #256]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6493      	str	r3, [r2, #72]	; 0x48

		CM_Ankle.MidStanceCtrl.eqPoint = startEqPoint;
 8001ef6:	4a3f      	ldr	r2, [pc, #252]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	64d3      	str	r3, [r2, #76]	; 0x4c
		CM_Ankle.MidStanceCtrl.kd = startKd;
 8001efc:	4a3d      	ldr	r2, [pc, #244]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6513      	str	r3, [r2, #80]	; 0x50
		CM_Ankle.MidStanceCtrl.kp = startKp;
 8001f02:	4a3c      	ldr	r2, [pc, #240]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6553      	str	r3, [r2, #84]	; 0x54

		CM_Ankle.LateStanceCtrl.eqPoint = startEqPoint;
 8001f08:	4a3a      	ldr	r2, [pc, #232]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	6593      	str	r3, [r2, #88]	; 0x58
		CM_Ankle.LateStanceCtrl.kd = startKd;
 8001f0e:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	65d3      	str	r3, [r2, #92]	; 0x5c

		CM_Ankle.SwingFlexCtrl.eqPoint = startEqPoint;
 8001f14:	4a37      	ldr	r2, [pc, #220]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	6653      	str	r3, [r2, #100]	; 0x64
		CM_Ankle.SwingFlexCtrl.kd = startKd;
 8001f1a:	4a36      	ldr	r2, [pc, #216]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6693      	str	r3, [r2, #104]	; 0x68
		CM_Ankle.SwingFlexCtrl.kp = startKp;
 8001f20:	4a34      	ldr	r2, [pc, #208]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	66d3      	str	r3, [r2, #108]	; 0x6c

		CM_Ankle.SwingExtCtrl.eqPoint = startEqPoint;
 8001f26:	4a33      	ldr	r2, [pc, #204]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	6713      	str	r3, [r2, #112]	; 0x70
		CM_Ankle.SwingExtCtrl.kd = startKd;
 8001f2c:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6753      	str	r3, [r2, #116]	; 0x74
		CM_Ankle.SwingExtCtrl.kp = startKp;
 8001f32:	4a30      	ldr	r2, [pc, #192]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6793      	str	r3, [r2, #120]	; 0x78

		CM_Ankle.SwingDescCtrl.eqPoint = startEqPoint;
 8001f38:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	67d3      	str	r3, [r2, #124]	; 0x7c
		CM_Ankle.SwingDescCtrl.kd = startKd;
 8001f3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		CM_Ankle.SwingDescCtrl.kp = startKp;
 8001f46:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <InitProsthesisControl+0x148>)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	}
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <InitProsthesisControl+0x13c>)
 8001f50:	785b      	ldrb	r3, [r3, #1]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d003      	beq.n	8001f5e <InitProsthesisControl+0xb2>
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <InitProsthesisControl+0x13c>)
 8001f58:	785b      	ldrb	r3, [r3, #1]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d13a      	bne.n	8001fd4 <InitProsthesisControl+0x128>
	{
		CM_Knee.encoderBias = 2244 * AS5145B_RAW2DEG;
 8001f5e:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <InitProsthesisControl+0x154>)
 8001f62:	621a      	str	r2, [r3, #32]

		CM_Knee.EarlyStanceCtrl.eqPoint = 2.0f;
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
		CM_Knee.EarlyStanceCtrl.kd = 0.00f;
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
		CM_Knee.EarlyStanceCtrl.kp = 0.00f;
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	649a      	str	r2, [r3, #72]	; 0x48

		CM_Knee.MidStanceCtrl.eqPoint = 0.0f;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	64da      	str	r2, [r3, #76]	; 0x4c
		CM_Knee.MidStanceCtrl.kd = 0.00f;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	651a      	str	r2, [r3, #80]	; 0x50
		CM_Knee.MidStanceCtrl.kp = 0.00f;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54

		CM_Knee.LateStanceCtrl.eqPoint = 8.0f;
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f96:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001f9a:	659a      	str	r2, [r3, #88]	; 0x58
		CM_Knee.LateStanceCtrl.kd = 0.00f;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <InitProsthesisControl+0x150>)
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	65da      	str	r2, [r3, #92]	; 0x5c
		CM_Knee.LateStanceCtrl.kp = 0.00f;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <InitProsthesisControl+0x150>)
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	661a      	str	r2, [r3, #96]	; 0x60

		CM_Knee.SwingFlexCtrl.eqPoint = 65.0f;
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <InitProsthesisControl+0x150>)
 8001fae:	4a15      	ldr	r2, [pc, #84]	; (8002004 <InitProsthesisControl+0x158>)
 8001fb0:	665a      	str	r2, [r3, #100]	; 0x64
		CM_Knee.SwingFlexCtrl.kd = 0.00f;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <InitProsthesisControl+0x150>)
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	669a      	str	r2, [r3, #104]	; 0x68
		CM_Knee.SwingFlexCtrl.kp = 0.12f;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <InitProsthesisControl+0x150>)
 8001fbc:	4a12      	ldr	r2, [pc, #72]	; (8002008 <InitProsthesisControl+0x15c>)
 8001fbe:	66da      	str	r2, [r3, #108]	; 0x6c

		CM_Knee.SwingExtCtrl.eqPoint = 22.0f;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <InitProsthesisControl+0x150>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <InitProsthesisControl+0x160>)
 8001fc4:	671a      	str	r2, [r3, #112]	; 0x70
		CM_Knee.SwingExtCtrl.kd = 0.00f;
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <InitProsthesisControl+0x150>)
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	675a      	str	r2, [r3, #116]	; 0x74
		CM_Knee.SwingExtCtrl.kp = 0.13f;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <InitProsthesisControl+0x150>)
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <InitProsthesisControl+0x164>)
 8001fd2:	679a      	str	r2, [r3, #120]	; 0x78
	}

	CM_LoadCell.intoStanceThreshold = 1300;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <InitProsthesisControl+0x168>)
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <InitProsthesisControl+0x16c>)
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34
	CM_LoadCell.outOfStanceThreshold = 1300 + 50;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <InitProsthesisControl+0x168>)
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <InitProsthesisControl+0x170>)
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000068 	.word	0x20000068
 8001fec:	c1300000 	.word	0xc1300000
 8001ff0:	40a00000 	.word	0x40a00000
 8001ff4:	20000078 	.word	0x20000078
 8001ff8:	42ee8900 	.word	0x42ee8900
 8001ffc:	20000100 	.word	0x20000100
 8002000:	43453a00 	.word	0x43453a00
 8002004:	42820000 	.word	0x42820000
 8002008:	3df5c28f 	.word	0x3df5c28f
 800200c:	41b00000 	.word	0x41b00000
 8002010:	3e051eb8 	.word	0x3e051eb8
 8002014:	20000188 	.word	0x20000188
 8002018:	44a28000 	.word	0x44a28000
 800201c:	44a8c000 	.word	0x44a8c000

08002020 <RequireTestProgram>:

void RequireTestProgram(TestProgram_e option)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <RequireTestProgram+0x2c>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	7013      	strb	r3, [r2, #0]
	if(testProgram != None)
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <RequireTestProgram+0x2c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <RequireTestProgram+0x30>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000006a 	.word	0x2000006a
 8002050:	2000006c 	.word	0x2000006c

08002054 <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	GetInputs();
 8002058:	f000 f826 	bl	80020a8 <GetInputs>
	ProcessInputs();
 800205c:	f000 f8b0 	bl	80021c0 <ProcessInputs>

	if(isTestProgramRequired)
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <RunProsthesisControl+0x48>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <RunProsthesisControl+0x18>
		RunTestProgram();
 8002068:	f000 fedc 	bl	8002e24 <RunTestProgram>

	RunStateMachine();
 800206c:	f000 fb5c 	bl	8002728 <RunStateMachine>
	RunImpedanceControl();
 8002070:	f000 fd72 	bl	8002b58 <RunImpedanceControl>

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <RunProsthesisControl+0x4c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <RunProsthesisControl+0x36>
	{
		isFirst = 0;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <RunProsthesisControl+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <RunProsthesisControl+0x50>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8002088:	e006      	b.n	8002098 <RunProsthesisControl+0x44>
	else if(isSecond)
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <RunProsthesisControl+0x50>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <RunProsthesisControl+0x44>
		isSecond = 0;
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <RunProsthesisControl+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	2000006c 	.word	0x2000006c
 80020a0:	20000000 	.word	0x20000000
 80020a4:	2000006b 	.word	0x2000006b

080020a8 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <GetInputs+0xcc>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <GetInputs+0x16>
 80020b6:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <GetInputs+0xcc>)
 80020b8:	785b      	ldrb	r3, [r3, #1]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d112      	bne.n	80020e4 <GetInputs+0x3c>
		CM_Ankle.jointAngle[0] = AS5145B_ReadPosition(AnkleEncoderIndex) - CM_Ankle.encoderBias;
 80020be:	2000      	movs	r0, #0
 80020c0:	f001 fb6e 	bl	80037a0 <AS5145B_ReadPosition>
 80020c4:	eeb0 7a40 	vmov.f32	s14, s0
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <GetInputs+0xd0>)
 80020ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80020ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d2:	ee17 0a90 	vmov	r0, s15
 80020d6:	f7fe f9db 	bl	8000490 <__aeabi_f2d>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4926      	ldr	r1, [pc, #152]	; (8002178 <GetInputs+0xd0>)
 80020e0:	e9c1 2300 	strd	r2, r3, [r1]

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <GetInputs+0xcc>)
 80020e6:	785b      	ldrb	r3, [r3, #1]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d003      	beq.n	80020f4 <GetInputs+0x4c>
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <GetInputs+0xcc>)
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d115      	bne.n	8002120 <GetInputs+0x78>
		CM_Knee.jointAngle[0] = - (AS5145B_ReadPosition(KneeEncoderIndex) - CM_Knee.encoderBias);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f001 fb53 	bl	80037a0 <AS5145B_ReadPosition>
 80020fa:	eeb0 7a40 	vmov.f32	s14, s0
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <GetInputs+0xd4>)
 8002100:	edd3 7a08 	vldr	s15, [r3, #32]
 8002104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002108:	eef1 7a67 	vneg.f32	s15, s15
 800210c:	ee17 3a90 	vmov	r3, s15
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f9bd 	bl	8000490 <__aeabi_f2d>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4918      	ldr	r1, [pc, #96]	; (800217c <GetInputs+0xd4>)
 800211c:	e9c1 2300 	strd	r2, r3, [r1]

	CM_LoadCell.Raw.bot[0] = ReadLoadCell(ADC1);
 8002120:	4817      	ldr	r0, [pc, #92]	; (8002180 <GetInputs+0xd8>)
 8002122:	f000 f835 	bl	8002190 <ReadLoadCell>
 8002126:	4603      	mov	r3, r0
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <GetInputs+0xdc>)
 8002132:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell.Raw.top[0] = ReadLoadCell(ADC2);
 8002136:	4814      	ldr	r0, [pc, #80]	; (8002188 <GetInputs+0xe0>)
 8002138:	f000 f82a 	bl	8002190 <ReadLoadCell>
 800213c:	4603      	mov	r3, r0
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <GetInputs+0xdc>)
 8002148:	edc3 7a03 	vstr	s15, [r3, #12]

	IMU_Data = MPU925x_ReadIMU(0);
 800214c:	4c0f      	ldr	r4, [pc, #60]	; (800218c <GetInputs+0xe4>)
 800214e:	463b      	mov	r3, r7
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f003 f9b6 	bl	80054c4 <MPU925x_ReadIMU>
 8002158:	4625      	mov	r5, r4
 800215a:	463c      	mov	r4, r7
 800215c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002168:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800216c:	bf00      	nop
 800216e:	3730      	adds	r7, #48	; 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bdb0      	pop	{r4, r5, r7, pc}
 8002174:	20000068 	.word	0x20000068
 8002178:	20000078 	.word	0x20000078
 800217c:	20000100 	.word	0x20000100
 8002180:	50040000 	.word	0x50040000
 8002184:	20000188 	.word	0x20000188
 8002188:	50040100 	.word	0x50040100
 800218c:	20000038 	.word	0x20000038

08002190 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff fe53 	bl	8001e44 <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 800219e:	bf00      	nop
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff fe70 	bl	8001e86 <LL_ADC_IsActiveFlag_EOC>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f9      	beq.n	80021a0 <ReadLoadCell+0x10>
	uint16_t data = LL_ADC_REG_ReadConversionData12(ADCx);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fe5d 	bl	8001e6c <LL_ADC_REG_ReadConversionData12>
 80021b2:	4603      	mov	r3, r0
 80021b4:	81fb      	strh	r3, [r7, #14]
	return data;
 80021b6:	89fb      	ldrh	r3, [r7, #14]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <ProcessInputs>:

static void ProcessInputs(void)
{
 80021c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
	// Derivative of joint angle (joint speed) and filtering of load cells
	if(isFirst)
 80021c8:	4b65      	ldr	r3, [pc, #404]	; (8002360 <ProcessInputs+0x1a0>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d032      	beq.n	8002236 <ProcessInputs+0x76>
	{
		CM_Ankle.jointSpeed = 0.0;
 80021d0:	4964      	ldr	r1, [pc, #400]	; (8002364 <ProcessInputs+0x1a4>)
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 80021de:	4b61      	ldr	r3, [pc, #388]	; (8002364 <ProcessInputs+0x1a4>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	495f      	ldr	r1, [pc, #380]	; (8002364 <ProcessInputs+0x1a4>)
 80021e6:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CM_Knee.jointSpeed = 0.0;
 80021ea:	495f      	ldr	r1, [pc, #380]	; (8002368 <ProcessInputs+0x1a8>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 80021f8:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <ProcessInputs+0x1a8>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	495a      	ldr	r1, [pc, #360]	; (8002368 <ProcessInputs+0x1a8>)
 8002200:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[0];
 8002204:	4b59      	ldr	r3, [pc, #356]	; (800236c <ProcessInputs+0x1ac>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a58      	ldr	r2, [pc, #352]	; (800236c <ProcessInputs+0x1ac>)
 800220a:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[0];
 800220c:	4b57      	ldr	r3, [pc, #348]	; (800236c <ProcessInputs+0x1ac>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a56      	ldr	r2, [pc, #344]	; (800236c <ProcessInputs+0x1ac>)
 8002212:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8002214:	4b55      	ldr	r3, [pc, #340]	; (800236c <ProcessInputs+0x1ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a54      	ldr	r2, [pc, #336]	; (800236c <ProcessInputs+0x1ac>)
 800221a:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <ProcessInputs+0x1ac>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a52      	ldr	r2, [pc, #328]	; (800236c <ProcessInputs+0x1ac>)
 8002222:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[0];
 8002224:	4b51      	ldr	r3, [pc, #324]	; (800236c <ProcessInputs+0x1ac>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <ProcessInputs+0x1ac>)
 800222a:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[0];
 800222c:	4b4f      	ldr	r3, [pc, #316]	; (800236c <ProcessInputs+0x1ac>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	4a4e      	ldr	r2, [pc, #312]	; (800236c <ProcessInputs+0x1ac>)
 8002232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002234:	e1f0      	b.n	8002618 <ProcessInputs+0x458>
	}
	else if(isSecond)
 8002236:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <ProcessInputs+0x1b0>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 809a 	beq.w	8002374 <ProcessInputs+0x1b4>
	{
		// Practical differentiator (bilinear transformation used)
		CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*TAU - DT)*CM_Ankle.jointSpeed) / (DT + 2*TAU);
 8002240:	4b48      	ldr	r3, [pc, #288]	; (8002364 <ProcessInputs+0x1a4>)
 8002242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <ProcessInputs+0x1a4>)
 8002248:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800224c:	f7fd ffc0 	bl	80001d0 <__aeabi_dsub>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	f7fd ffba 	bl	80001d4 <__adddf3>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4614      	mov	r4, r2
 8002266:	461d      	mov	r5, r3
 8002268:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <ProcessInputs+0x1a4>)
 800226a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800226e:	a338      	add	r3, pc, #224	; (adr r3, 8002350 <ProcessInputs+0x190>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	f7fe f964 	bl	8000540 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4620      	mov	r0, r4
 800227e:	4629      	mov	r1, r5
 8002280:	f7fd ffa8 	bl	80001d4 <__adddf3>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	a332      	add	r3, pc, #200	; (adr r3, 8002358 <ProcessInputs+0x198>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fe fa7f 	bl	8000794 <__aeabi_ddiv>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4932      	ldr	r1, [pc, #200]	; (8002364 <ProcessInputs+0x1a4>)
 800229c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 80022a0:	4b30      	ldr	r3, [pc, #192]	; (8002364 <ProcessInputs+0x1a4>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	492f      	ldr	r1, [pc, #188]	; (8002364 <ProcessInputs+0x1a4>)
 80022a8:	e9c1 2302 	strd	r2, r3, [r1, #8]

		// Practical differentiator (bilinear transformation used)
		CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*TAU - DT)*CM_Knee.jointSpeed) / (DT + 2*TAU);
 80022ac:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <ProcessInputs+0x1a8>)
 80022ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <ProcessInputs+0x1a8>)
 80022b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022b8:	f7fd ff8a 	bl	80001d0 <__aeabi_dsub>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	f7fd ff84 	bl	80001d4 <__adddf3>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	461d      	mov	r5, r3
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <ProcessInputs+0x1a8>)
 80022d6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80022da:	a31d      	add	r3, pc, #116	; (adr r3, 8002350 <ProcessInputs+0x190>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe f92e 	bl	8000540 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4620      	mov	r0, r4
 80022ea:	4629      	mov	r1, r5
 80022ec:	f7fd ff72 	bl	80001d4 <__adddf3>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	a317      	add	r3, pc, #92	; (adr r3, 8002358 <ProcessInputs+0x198>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	f7fe fa49 	bl	8000794 <__aeabi_ddiv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4918      	ldr	r1, [pc, #96]	; (8002368 <ProcessInputs+0x1a8>)
 8002308:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <ProcessInputs+0x1a8>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	4915      	ldr	r1, [pc, #84]	; (8002368 <ProcessInputs+0x1a8>)
 8002314:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <ProcessInputs+0x1ac>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <ProcessInputs+0x1ac>)
 800231e:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <ProcessInputs+0x1ac>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <ProcessInputs+0x1ac>)
 8002326:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <ProcessInputs+0x1ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0f      	ldr	r2, [pc, #60]	; (800236c <ProcessInputs+0x1ac>)
 800232e:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <ProcessInputs+0x1ac>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <ProcessInputs+0x1ac>)
 8002336:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <ProcessInputs+0x1ac>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <ProcessInputs+0x1ac>)
 800233e:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <ProcessInputs+0x1ac>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	4a09      	ldr	r2, [pc, #36]	; (800236c <ProcessInputs+0x1ac>)
 8002346:	6293      	str	r3, [r2, #40]	; 0x28
 8002348:	e166      	b.n	8002618 <ProcessInputs+0x458>
 800234a:	bf00      	nop
 800234c:	f3af 8000 	nop.w
 8002350:	7daf8e50 	.word	0x7daf8e50
 8002354:	3f9e9848 	.word	0x3f9e9848
 8002358:	3ed7c728 	.word	0x3ed7c728
 800235c:	3fa14c24 	.word	0x3fa14c24
 8002360:	20000000 	.word	0x20000000
 8002364:	20000078 	.word	0x20000078
 8002368:	20000100 	.word	0x20000100
 800236c:	20000188 	.word	0x20000188
 8002370:	2000006b 	.word	0x2000006b
	}
	else
	{
		// Practical differentiator (bilinear transformation used)
		CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*TAU - DT)*CM_Ankle.jointSpeed) / (DT + 2*TAU);
 8002374:	4bbe      	ldr	r3, [pc, #760]	; (8002670 <ProcessInputs+0x4b0>)
 8002376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237a:	4bbd      	ldr	r3, [pc, #756]	; (8002670 <ProcessInputs+0x4b0>)
 800237c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002380:	f7fd ff26 	bl	80001d0 <__aeabi_dsub>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	f7fd ff20 	bl	80001d4 <__adddf3>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4614      	mov	r4, r2
 800239a:	461d      	mov	r5, r3
 800239c:	4bb4      	ldr	r3, [pc, #720]	; (8002670 <ProcessInputs+0x4b0>)
 800239e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023a2:	a3a7      	add	r3, pc, #668	; (adr r3, 8002640 <ProcessInputs+0x480>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f8ca 	bl	8000540 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff0e 	bl	80001d4 <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	a3a1      	add	r3, pc, #644	; (adr r3, 8002648 <ProcessInputs+0x488>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	f7fe f9e5 	bl	8000794 <__aeabi_ddiv>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	49a8      	ldr	r1, [pc, #672]	; (8002670 <ProcessInputs+0x4b0>)
 80023d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 80023d4:	4ba6      	ldr	r3, [pc, #664]	; (8002670 <ProcessInputs+0x4b0>)
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	49a5      	ldr	r1, [pc, #660]	; (8002670 <ProcessInputs+0x4b0>)
 80023dc:	e9c1 2302 	strd	r2, r3, [r1, #8]

		// Practical differentiator (bilinear transformation used)
		CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*TAU - DT)*CM_Knee.jointSpeed) / (DT + 2*TAU);
 80023e0:	4ba4      	ldr	r3, [pc, #656]	; (8002674 <ProcessInputs+0x4b4>)
 80023e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e6:	4ba3      	ldr	r3, [pc, #652]	; (8002674 <ProcessInputs+0x4b4>)
 80023e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023ec:	f7fd fef0 	bl	80001d0 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	f7fd feea 	bl	80001d4 <__adddf3>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	4b9a      	ldr	r3, [pc, #616]	; (8002674 <ProcessInputs+0x4b4>)
 800240a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800240e:	a38c      	add	r3, pc, #560	; (adr r3, 8002640 <ProcessInputs+0x480>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fe f894 	bl	8000540 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4620      	mov	r0, r4
 800241e:	4629      	mov	r1, r5
 8002420:	f7fd fed8 	bl	80001d4 <__adddf3>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	a386      	add	r3, pc, #536	; (adr r3, 8002648 <ProcessInputs+0x488>)
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	f7fe f9af 	bl	8000794 <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	498e      	ldr	r1, [pc, #568]	; (8002674 <ProcessInputs+0x4b4>)
 800243c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 8002440:	4b8c      	ldr	r3, [pc, #560]	; (8002674 <ProcessInputs+0x4b4>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	498b      	ldr	r1, [pc, #556]	; (8002674 <ProcessInputs+0x4b4>)
 8002448:	e9c1 2302 	strd	r2, r3, [r1, #8]

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell.Filtered.bot[0] =   1.6556 * CM_LoadCell.Filtered.bot[1] - 0.7068 * CM_LoadCell.Filtered.bot[2]
 800244c:	4b8a      	ldr	r3, [pc, #552]	; (8002678 <ProcessInputs+0x4b8>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f81d 	bl	8000490 <__aeabi_f2d>
 8002456:	a37e      	add	r3, pc, #504	; (adr r3, 8002650 <ProcessInputs+0x490>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f870 	bl	8000540 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4614      	mov	r4, r2
 8002466:	461d      	mov	r5, r3
 8002468:	4b83      	ldr	r3, [pc, #524]	; (8002678 <ProcessInputs+0x4b8>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f80f 	bl	8000490 <__aeabi_f2d>
 8002472:	a379      	add	r3, pc, #484	; (adr r3, 8002658 <ProcessInputs+0x498>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f862 	bl	8000540 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7fd fea4 	bl	80001d0 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4614      	mov	r4, r2
 800248e:	461d      	mov	r5, r3
									  + 0.0128 * CM_LoadCell.Raw.bot[0] + 0.0256 * CM_LoadCell.Raw.bot[1] + 0.0128 * CM_LoadCell.Raw.bot[2];
 8002490:	4b79      	ldr	r3, [pc, #484]	; (8002678 <ProcessInputs+0x4b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd fffb 	bl	8000490 <__aeabi_f2d>
 800249a:	a371      	add	r3, pc, #452	; (adr r3, 8002660 <ProcessInputs+0x4a0>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe f84e 	bl	8000540 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4620      	mov	r0, r4
 80024aa:	4629      	mov	r1, r5
 80024ac:	f7fd fe92 	bl	80001d4 <__adddf3>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4614      	mov	r4, r2
 80024b6:	461d      	mov	r5, r3
 80024b8:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <ProcessInputs+0x4b8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd ffe7 	bl	8000490 <__aeabi_f2d>
 80024c2:	a369      	add	r3, pc, #420	; (adr r3, 8002668 <ProcessInputs+0x4a8>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f83a 	bl	8000540 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd fe7e 	bl	80001d4 <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4614      	mov	r4, r2
 80024de:	461d      	mov	r5, r3
 80024e0:	4b65      	ldr	r3, [pc, #404]	; (8002678 <ProcessInputs+0x4b8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd ffd3 	bl	8000490 <__aeabi_f2d>
 80024ea:	a35d      	add	r3, pc, #372	; (adr r3, 8002660 <ProcessInputs+0x4a0>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f826 	bl	8000540 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4620      	mov	r0, r4
 80024fa:	4629      	mov	r1, r5
 80024fc:	f7fd fe6a 	bl	80001d4 <__adddf3>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fab4 	bl	8000a74 <__aeabi_d2f>
 800250c:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.bot[0] =   1.6556 * CM_LoadCell.Filtered.bot[1] - 0.7068 * CM_LoadCell.Filtered.bot[2]
 800250e:	4a5a      	ldr	r2, [pc, #360]	; (8002678 <ProcessInputs+0x4b8>)
 8002510:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] =   1.6556 * CM_LoadCell.Filtered.top[1] - 0.7068 * CM_LoadCell.Filtered.top[2]
 8002512:	4b59      	ldr	r3, [pc, #356]	; (8002678 <ProcessInputs+0x4b8>)
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd ffba 	bl	8000490 <__aeabi_f2d>
 800251c:	a34c      	add	r3, pc, #304	; (adr r3, 8002650 <ProcessInputs+0x490>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fe f80d 	bl	8000540 <__aeabi_dmul>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4614      	mov	r4, r2
 800252c:	461d      	mov	r5, r3
 800252e:	4b52      	ldr	r3, [pc, #328]	; (8002678 <ProcessInputs+0x4b8>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ffac 	bl	8000490 <__aeabi_f2d>
 8002538:	a347      	add	r3, pc, #284	; (adr r3, 8002658 <ProcessInputs+0x498>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fd ffff 	bl	8000540 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4620      	mov	r0, r4
 8002548:	4629      	mov	r1, r5
 800254a:	f7fd fe41 	bl	80001d0 <__aeabi_dsub>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4614      	mov	r4, r2
 8002554:	461d      	mov	r5, r3
									  + 0.0128 * CM_LoadCell.Raw.top[0] + 0.0256 * CM_LoadCell.Raw.top[1] + 0.0128 * CM_LoadCell.Raw.top[2];
 8002556:	4b48      	ldr	r3, [pc, #288]	; (8002678 <ProcessInputs+0x4b8>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd ff98 	bl	8000490 <__aeabi_f2d>
 8002560:	a33f      	add	r3, pc, #252	; (adr r3, 8002660 <ProcessInputs+0x4a0>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fd ffeb 	bl	8000540 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4620      	mov	r0, r4
 8002570:	4629      	mov	r1, r5
 8002572:	f7fd fe2f 	bl	80001d4 <__adddf3>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4614      	mov	r4, r2
 800257c:	461d      	mov	r5, r3
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <ProcessInputs+0x4b8>)
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ff84 	bl	8000490 <__aeabi_f2d>
 8002588:	a337      	add	r3, pc, #220	; (adr r3, 8002668 <ProcessInputs+0x4a8>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fd ffd7 	bl	8000540 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe1b 	bl	80001d4 <__adddf3>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4614      	mov	r4, r2
 80025a4:	461d      	mov	r5, r3
 80025a6:	4b34      	ldr	r3, [pc, #208]	; (8002678 <ProcessInputs+0x4b8>)
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ff70 	bl	8000490 <__aeabi_f2d>
 80025b0:	a32b      	add	r3, pc, #172	; (adr r3, 8002660 <ProcessInputs+0x4a0>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fd ffc3 	bl	8000540 <__aeabi_dmul>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4620      	mov	r0, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	f7fd fe07 	bl	80001d4 <__adddf3>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fa51 	bl	8000a74 <__aeabi_d2f>
 80025d2:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.top[0] =   1.6556 * CM_LoadCell.Filtered.top[1] - 0.7068 * CM_LoadCell.Filtered.top[2]
 80025d4:	4a28      	ldr	r2, [pc, #160]	; (8002678 <ProcessInputs+0x4b8>)
 80025d6:	6253      	str	r3, [r2, #36]	; 0x24

		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[1];
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <ProcessInputs+0x4b8>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <ProcessInputs+0x4b8>)
 80025de:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <ProcessInputs+0x4b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a24      	ldr	r2, [pc, #144]	; (8002678 <ProcessInputs+0x4b8>)
 80025e6:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[1];
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <ProcessInputs+0x4b8>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <ProcessInputs+0x4b8>)
 80025ee:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 80025f0:	4b21      	ldr	r3, [pc, #132]	; (8002678 <ProcessInputs+0x4b8>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a20      	ldr	r2, [pc, #128]	; (8002678 <ProcessInputs+0x4b8>)
 80025f6:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <ProcessInputs+0x4b8>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <ProcessInputs+0x4b8>)
 80025fe:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <ProcessInputs+0x4b8>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <ProcessInputs+0x4b8>)
 8002606:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <ProcessInputs+0x4b8>)
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <ProcessInputs+0x4b8>)
 800260e:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <ProcessInputs+0x4b8>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <ProcessInputs+0x4b8>)
 8002616:	6293      	str	r3, [r2, #40]	; 0x28
	}

	if(Device.Side == Left)
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <ProcessInputs+0x4bc>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d15e      	bne.n	80026de <ProcessInputs+0x51e>
	{
		CM_IMU_Data.Struct.ax = -IMU_Data.Struct.ax;
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <ProcessInputs+0x4c0>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	60ba      	str	r2, [r7, #8]
 8002628:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <ProcessInputs+0x4c4>)
 8002630:	ed97 7b02 	vldr	d7, [r7, #8]
 8002634:	ed83 7b00 	vstr	d7, [r3]
 8002638:	e026      	b.n	8002688 <ProcessInputs+0x4c8>
 800263a:	bf00      	nop
 800263c:	f3af 8000 	nop.w
 8002640:	7daf8e50 	.word	0x7daf8e50
 8002644:	3f9e9848 	.word	0x3f9e9848
 8002648:	3ed7c728 	.word	0x3ed7c728
 800264c:	3fa14c24 	.word	0x3fa14c24
 8002650:	6cf41f21 	.word	0x6cf41f21
 8002654:	3ffa7d56 	.word	0x3ffa7d56
 8002658:	089a0275 	.word	0x089a0275
 800265c:	3fe69e1b 	.word	0x3fe69e1b
 8002660:	eb1c432d 	.word	0xeb1c432d
 8002664:	3f8a36e2 	.word	0x3f8a36e2
 8002668:	eb1c432d 	.word	0xeb1c432d
 800266c:	3f9a36e2 	.word	0x3f9a36e2
 8002670:	20000078 	.word	0x20000078
 8002674:	20000100 	.word	0x20000100
 8002678:	20000188 	.word	0x20000188
 800267c:	20000068 	.word	0x20000068
 8002680:	20000038 	.word	0x20000038
 8002684:	200001c0 	.word	0x200001c0
		CM_IMU_Data.Struct.ay = IMU_Data.Struct.ay;
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <ProcessInputs+0x55c>)
 800268a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800268e:	4924      	ldr	r1, [pc, #144]	; (8002720 <ProcessInputs+0x560>)
 8002690:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_IMU_Data.Struct.az = -IMU_Data.Struct.az;
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <ProcessInputs+0x55c>)
 8002696:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800269a:	603a      	str	r2, [r7, #0]
 800269c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <ProcessInputs+0x560>)
 80026a4:	ed97 7b00 	vldr	d7, [r7]
 80026a8:	ed83 7b04 	vstr	d7, [r3, #16]
		CM_IMU_Data.Struct.gx = -IMU_Data.Struct.gx;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <ProcessInputs+0x55c>)
 80026ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026b2:	4692      	mov	sl, r2
 80026b4:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <ProcessInputs+0x560>)
 80026ba:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		CM_IMU_Data.Struct.gy = IMU_Data.Struct.gy;
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <ProcessInputs+0x55c>)
 80026c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026c4:	4916      	ldr	r1, [pc, #88]	; (8002720 <ProcessInputs+0x560>)
 80026c6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_IMU_Data.Struct.gz = -IMU_Data.Struct.gz;
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <ProcessInputs+0x55c>)
 80026cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80026d0:	4690      	mov	r8, r2
 80026d2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <ProcessInputs+0x560>)
 80026d8:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
 80026dc:	e00b      	b.n	80026f6 <ProcessInputs+0x536>
	}
	else
		memcpy(&CM_IMU_Data, &IMU_Data, sizeof(IMU_Data));
 80026de:	4a10      	ldr	r2, [pc, #64]	; (8002720 <ProcessInputs+0x560>)
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <ProcessInputs+0x55c>)
 80026e2:	4614      	mov	r4, r2
 80026e4:	461d      	mov	r5, r3
 80026e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	CM_Ankle.limbSpeed = CM_IMU_Data.Struct.gz + CM_Ankle.jointSpeed;
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <ProcessInputs+0x560>)
 80026f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <ProcessInputs+0x564>)
 80026fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002702:	f7fd fd67 	bl	80001d4 <__adddf3>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4906      	ldr	r1, [pc, #24]	; (8002724 <ProcessInputs+0x564>)
 800270c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271a:	bf00      	nop
 800271c:	20000038 	.word	0x20000038
 8002720:	200001c0 	.word	0x200001c0
 8002724:	20000078 	.word	0x20000078

08002728 <RunStateMachine>:

static void RunStateMachine(void)
{
 8002728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800272c:	af00      	add	r7, sp, #0
	static StateMachine_e state = EarlyStance;
	static uint8_t isFirstCallForLateStance = 1;
	switch(state)
 800272e:	4b90      	ldr	r3, [pc, #576]	; (8002970 <RunStateMachine+0x248>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b05      	cmp	r3, #5
 8002734:	f200 81f8 	bhi.w	8002b28 <RunStateMachine+0x400>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <RunStateMachine+0x18>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002759 	.word	0x08002759
 8002744:	080027df 	.word	0x080027df
 8002748:	08002865 	.word	0x08002865
 800274c:	08002999 	.word	0x08002999
 8002750:	08002a13 	.word	0x08002a13
 8002754:	08002a8d 	.word	0x08002a8d
	{
	case EarlyStance:
		CM_state_angles = -10;
 8002758:	4b86      	ldr	r3, [pc, #536]	; (8002974 <RunStateMachine+0x24c>)
 800275a:	22f6      	movs	r2, #246	; 0xf6
 800275c:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1100;
 800275e:	4b86      	ldr	r3, [pc, #536]	; (8002978 <RunStateMachine+0x250>)
 8002760:	f240 424c 	movw	r2, #1100	; 0x44c
 8002764:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -30;
 8002766:	4b85      	ldr	r3, [pc, #532]	; (800297c <RunStateMachine+0x254>)
 8002768:	22e2      	movs	r2, #226	; 0xe2
 800276a:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -200;
 800276c:	4b84      	ldr	r3, [pc, #528]	; (8002980 <RunStateMachine+0x258>)
 800276e:	f64f 7238 	movw	r2, #65336	; 0xff38
 8002772:	801a      	strh	r2, [r3, #0]
		isFirstCallForLateStance = 1;
 8002774:	4b83      	ldr	r3, [pc, #524]	; (8002984 <RunStateMachine+0x25c>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 800277a:	4b83      	ldr	r3, [pc, #524]	; (8002988 <RunStateMachine+0x260>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d017      	beq.n	80027b2 <RunStateMachine+0x8a>
		{
			CM_Ankle.ProsCtrl.eqPoint = CM_Ankle.EarlyStanceCtrl.eqPoint;
 8002782:	4b82      	ldr	r3, [pc, #520]	; (800298c <RunStateMachine+0x264>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a81      	ldr	r2, [pc, #516]	; (800298c <RunStateMachine+0x264>)
 8002788:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Ankle.ProsCtrl.kd = CM_Ankle.EarlyStanceCtrl.kd;
 800278a:	4b80      	ldr	r3, [pc, #512]	; (800298c <RunStateMachine+0x264>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a7f      	ldr	r2, [pc, #508]	; (800298c <RunStateMachine+0x264>)
 8002790:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Ankle.ProsCtrl.kp = CM_Ankle.EarlyStanceCtrl.kp;
 8002792:	4b7e      	ldr	r3, [pc, #504]	; (800298c <RunStateMachine+0x264>)
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	4a7d      	ldr	r2, [pc, #500]	; (800298c <RunStateMachine+0x264>)
 8002798:	63d3      	str	r3, [r2, #60]	; 0x3c

			CM_Knee.ProsCtrl.eqPoint = CM_Knee.EarlyStanceCtrl.eqPoint;
 800279a:	4b7d      	ldr	r3, [pc, #500]	; (8002990 <RunStateMachine+0x268>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a7c      	ldr	r2, [pc, #496]	; (8002990 <RunStateMachine+0x268>)
 80027a0:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Knee.ProsCtrl.kd = CM_Knee.EarlyStanceCtrl.kd;
 80027a2:	4b7b      	ldr	r3, [pc, #492]	; (8002990 <RunStateMachine+0x268>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a7a      	ldr	r2, [pc, #488]	; (8002990 <RunStateMachine+0x268>)
 80027a8:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Knee.ProsCtrl.kp = CM_Knee.EarlyStanceCtrl.kp;
 80027aa:	4b79      	ldr	r3, [pc, #484]	; (8002990 <RunStateMachine+0x268>)
 80027ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ae:	4a78      	ldr	r2, [pc, #480]	; (8002990 <RunStateMachine+0x268>)
 80027b0:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		if(CM_Ankle.limbSpeed > CM_Ankle.limbSpeedThreshold)
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <RunStateMachine+0x264>)
 80027b4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80027b8:	4b74      	ldr	r3, [pc, #464]	; (800298c <RunStateMachine+0x264>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fe67 	bl	8000490 <__aeabi_f2d>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4620      	mov	r0, r4
 80027c8:	4629      	mov	r1, r5
 80027ca:	f7fe f949 	bl	8000a60 <__aeabi_dcmpgt>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d100      	bne.n	80027d6 <RunStateMachine+0xae>
			state = MidStance;

		break;
 80027d4:	e1a8      	b.n	8002b28 <RunStateMachine+0x400>
			state = MidStance;
 80027d6:	4b66      	ldr	r3, [pc, #408]	; (8002970 <RunStateMachine+0x248>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
		break;
 80027dc:	e1a4      	b.n	8002b28 <RunStateMachine+0x400>

	case MidStance:
		CM_state_angles = 5;
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <RunStateMachine+0x24c>)
 80027e0:	2205      	movs	r2, #5
 80027e2:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1200;
 80027e4:	4b64      	ldr	r3, [pc, #400]	; (8002978 <RunStateMachine+0x250>)
 80027e6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80027ea:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -20;
 80027ec:	4b63      	ldr	r3, [pc, #396]	; (800297c <RunStateMachine+0x254>)
 80027ee:	22ec      	movs	r2, #236	; 0xec
 80027f0:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -120;
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <RunStateMachine+0x258>)
 80027f4:	f64f 7288 	movw	r2, #65416	; 0xff88
 80027f8:	801a      	strh	r2, [r3, #0]
		isFirstCallForLateStance = 1;
 80027fa:	4b62      	ldr	r3, [pc, #392]	; (8002984 <RunStateMachine+0x25c>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 8002800:	4b61      	ldr	r3, [pc, #388]	; (8002988 <RunStateMachine+0x260>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d017      	beq.n	8002838 <RunStateMachine+0x110>
		{
			CM_Ankle.ProsCtrl.eqPoint = CM_Ankle.MidStanceCtrl.eqPoint;
 8002808:	4b60      	ldr	r3, [pc, #384]	; (800298c <RunStateMachine+0x264>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	4a5f      	ldr	r2, [pc, #380]	; (800298c <RunStateMachine+0x264>)
 800280e:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Ankle.ProsCtrl.kd = CM_Ankle.MidStanceCtrl.kd;
 8002810:	4b5e      	ldr	r3, [pc, #376]	; (800298c <RunStateMachine+0x264>)
 8002812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002814:	4a5d      	ldr	r2, [pc, #372]	; (800298c <RunStateMachine+0x264>)
 8002816:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Ankle.ProsCtrl.kp = CM_Ankle.MidStanceCtrl.kp;
 8002818:	4b5c      	ldr	r3, [pc, #368]	; (800298c <RunStateMachine+0x264>)
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	4a5b      	ldr	r2, [pc, #364]	; (800298c <RunStateMachine+0x264>)
 800281e:	63d3      	str	r3, [r2, #60]	; 0x3c

			CM_Knee.ProsCtrl.eqPoint = CM_Knee.MidStanceCtrl.eqPoint;
 8002820:	4b5b      	ldr	r3, [pc, #364]	; (8002990 <RunStateMachine+0x268>)
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	4a5a      	ldr	r2, [pc, #360]	; (8002990 <RunStateMachine+0x268>)
 8002826:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Knee.ProsCtrl.kd = CM_Knee.MidStanceCtrl.kd;
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <RunStateMachine+0x268>)
 800282a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <RunStateMachine+0x268>)
 800282e:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Knee.ProsCtrl.kp = CM_Knee.MidStanceCtrl.kp;
 8002830:	4b57      	ldr	r3, [pc, #348]	; (8002990 <RunStateMachine+0x268>)
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	4a56      	ldr	r2, [pc, #344]	; (8002990 <RunStateMachine+0x268>)
 8002836:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		if(CM_Ankle.jointSpeed < CM_Ankle.jointSpeedThreshold)
 8002838:	4b54      	ldr	r3, [pc, #336]	; (800298c <RunStateMachine+0x264>)
 800283a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800283e:	4b53      	ldr	r3, [pc, #332]	; (800298c <RunStateMachine+0x264>)
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe24 	bl	8000490 <__aeabi_f2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fe f8e8 	bl	8000a24 <__aeabi_dcmplt>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d100      	bne.n	800285c <RunStateMachine+0x134>
			state = LateStance;

		break;
 800285a:	e165      	b.n	8002b28 <RunStateMachine+0x400>
			state = LateStance;
 800285c:	4b44      	ldr	r3, [pc, #272]	; (8002970 <RunStateMachine+0x248>)
 800285e:	2202      	movs	r2, #2
 8002860:	701a      	strb	r2, [r3, #0]
		break;
 8002862:	e161      	b.n	8002b28 <RunStateMachine+0x400>

	case LateStance:
		CM_state_angles = 20;
 8002864:	4b43      	ldr	r3, [pc, #268]	; (8002974 <RunStateMachine+0x24c>)
 8002866:	2214      	movs	r2, #20
 8002868:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1300;
 800286a:	4b43      	ldr	r3, [pc, #268]	; (8002978 <RunStateMachine+0x250>)
 800286c:	f240 5214 	movw	r2, #1300	; 0x514
 8002870:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -10;
 8002872:	4b42      	ldr	r3, [pc, #264]	; (800297c <RunStateMachine+0x254>)
 8002874:	22f6      	movs	r2, #246	; 0xf6
 8002876:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -40;
 8002878:	4b41      	ldr	r3, [pc, #260]	; (8002980 <RunStateMachine+0x258>)
 800287a:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 800287e:	801a      	strh	r2, [r3, #0]

		// Compute kp to start with previous torque when first called
		if(isFirstCallForLateStance)
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <RunStateMachine+0x25c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d046      	beq.n	8002916 <RunStateMachine+0x1ee>
		{
			CM_Ankle.LateStanceCtrl.kp = (CM_Ankle.jointTargetTorque + CM_Ankle.jointSpeed*CM_Ankle.LateStanceCtrl.kd) / (CM_Ankle.LateStanceCtrl.eqPoint - CM_Ankle.jointAngle[0]);
 8002888:	4b40      	ldr	r3, [pc, #256]	; (800298c <RunStateMachine+0x264>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fdff 	bl	8000490 <__aeabi_f2d>
 8002892:	4680      	mov	r8, r0
 8002894:	4689      	mov	r9, r1
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <RunStateMachine+0x264>)
 8002898:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800289c:	4b3b      	ldr	r3, [pc, #236]	; (800298c <RunStateMachine+0x264>)
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fdf5 	bl	8000490 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd fe47 	bl	8000540 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4640      	mov	r0, r8
 80028b8:	4649      	mov	r1, r9
 80028ba:	f7fd fc8b 	bl	80001d4 <__adddf3>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	461d      	mov	r5, r3
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <RunStateMachine+0x264>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fde0 	bl	8000490 <__aeabi_f2d>
 80028d0:	4b2e      	ldr	r3, [pc, #184]	; (800298c <RunStateMachine+0x264>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd fc7b 	bl	80001d0 <__aeabi_dsub>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f7fd ff57 	bl	8000794 <__aeabi_ddiv>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe f8c1 	bl	8000a74 <__aeabi_d2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4a25      	ldr	r2, [pc, #148]	; (800298c <RunStateMachine+0x264>)
 80028f6:	6613      	str	r3, [r2, #96]	; 0x60
			if(CM_Ankle.LateStanceCtrl.kp < 0)
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <RunStateMachine+0x264>)
 80028fa:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80028fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	d503      	bpl.n	8002910 <RunStateMachine+0x1e8>
			{
				state = MidStance;
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <RunStateMachine+0x248>)
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
				break;
 800290e:	e10b      	b.n	8002b28 <RunStateMachine+0x400>
			}
			else
				isFirstCallForLateStance = 0;
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <RunStateMachine+0x25c>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
		}

		if(testProgram != ImpedanceControl)
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <RunStateMachine+0x260>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d017      	beq.n	800294e <RunStateMachine+0x226>
		{
			CM_Ankle.ProsCtrl.eqPoint = CM_Ankle.LateStanceCtrl.eqPoint;
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <RunStateMachine+0x264>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <RunStateMachine+0x264>)
 8002924:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Ankle.ProsCtrl.kd = CM_Ankle.LateStanceCtrl.kd;
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <RunStateMachine+0x264>)
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <RunStateMachine+0x264>)
 800292c:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Ankle.ProsCtrl.kp = CM_Ankle.LateStanceCtrl.kp;
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <RunStateMachine+0x264>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	4a16      	ldr	r2, [pc, #88]	; (800298c <RunStateMachine+0x264>)
 8002934:	63d3      	str	r3, [r2, #60]	; 0x3c

			CM_Knee.ProsCtrl.eqPoint = CM_Knee.LateStanceCtrl.eqPoint;
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <RunStateMachine+0x268>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	4a15      	ldr	r2, [pc, #84]	; (8002990 <RunStateMachine+0x268>)
 800293c:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Knee.ProsCtrl.kd = CM_Knee.LateStanceCtrl.kd;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <RunStateMachine+0x268>)
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <RunStateMachine+0x268>)
 8002944:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Knee.ProsCtrl.kp = CM_Knee.LateStanceCtrl.kp;
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <RunStateMachine+0x268>)
 8002948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294a:	4a11      	ldr	r2, [pc, #68]	; (8002990 <RunStateMachine+0x268>)
 800294c:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		if(CM_LoadCell.Filtered.bot[0] > CM_LoadCell.outOfStanceThreshold)
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <RunStateMachine+0x26c>)
 8002950:	ed93 7a06 	vldr	s14, [r3, #24]
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <RunStateMachine+0x26c>)
 8002956:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800295a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002962:	dc00      	bgt.n	8002966 <RunStateMachine+0x23e>
			state = SwingFlexion;

		break;
 8002964:	e0e0      	b.n	8002b28 <RunStateMachine+0x400>
			state = SwingFlexion;
 8002966:	4b02      	ldr	r3, [pc, #8]	; (8002970 <RunStateMachine+0x248>)
 8002968:	2203      	movs	r2, #3
 800296a:	701a      	strb	r2, [r3, #0]
		break;
 800296c:	e0dc      	b.n	8002b28 <RunStateMachine+0x400>
 800296e:	bf00      	nop
 8002970:	200001f6 	.word	0x200001f6
 8002974:	2000006d 	.word	0x2000006d
 8002978:	200001f4 	.word	0x200001f4
 800297c:	2000006e 	.word	0x2000006e
 8002980:	20000070 	.word	0x20000070
 8002984:	20000001 	.word	0x20000001
 8002988:	2000006a 	.word	0x2000006a
 800298c:	20000078 	.word	0x20000078
 8002990:	20000100 	.word	0x20000100
 8002994:	20000188 	.word	0x20000188

	case SwingFlexion:
		CM_state_angles = 35;
 8002998:	4b65      	ldr	r3, [pc, #404]	; (8002b30 <RunStateMachine+0x408>)
 800299a:	2223      	movs	r2, #35	; 0x23
 800299c:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1400;
 800299e:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <RunStateMachine+0x40c>)
 80029a0:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80029a4:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 0;
 80029a6:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <RunStateMachine+0x410>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 40;
 80029ac:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <RunStateMachine+0x414>)
 80029ae:	2228      	movs	r2, #40	; 0x28
 80029b0:	801a      	strh	r2, [r3, #0]
		isFirstCallForLateStance = 1;
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <RunStateMachine+0x418>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80029b8:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <RunStateMachine+0x41c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d017      	beq.n	80029f0 <RunStateMachine+0x2c8>
		{
			CM_Ankle.ProsCtrl.eqPoint = CM_Ankle.SwingFlexCtrl.eqPoint;
 80029c0:	4b61      	ldr	r3, [pc, #388]	; (8002b48 <RunStateMachine+0x420>)
 80029c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c4:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <RunStateMachine+0x420>)
 80029c6:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Ankle.ProsCtrl.kd = CM_Ankle.SwingFlexCtrl.kd;
 80029c8:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <RunStateMachine+0x420>)
 80029ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029cc:	4a5e      	ldr	r2, [pc, #376]	; (8002b48 <RunStateMachine+0x420>)
 80029ce:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Ankle.ProsCtrl.kp = CM_Ankle.SwingFlexCtrl.kp;
 80029d0:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <RunStateMachine+0x420>)
 80029d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d4:	4a5c      	ldr	r2, [pc, #368]	; (8002b48 <RunStateMachine+0x420>)
 80029d6:	63d3      	str	r3, [r2, #60]	; 0x3c

			CM_Knee.ProsCtrl.eqPoint = CM_Knee.SwingFlexCtrl.eqPoint;
 80029d8:	4b5c      	ldr	r3, [pc, #368]	; (8002b4c <RunStateMachine+0x424>)
 80029da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029dc:	4a5b      	ldr	r2, [pc, #364]	; (8002b4c <RunStateMachine+0x424>)
 80029de:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Knee.ProsCtrl.kd = CM_Knee.SwingFlexCtrl.kd;
 80029e0:	4b5a      	ldr	r3, [pc, #360]	; (8002b4c <RunStateMachine+0x424>)
 80029e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e4:	4a59      	ldr	r2, [pc, #356]	; (8002b4c <RunStateMachine+0x424>)
 80029e6:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Knee.ProsCtrl.kp = CM_Knee.SwingFlexCtrl.kp;
 80029e8:	4b58      	ldr	r3, [pc, #352]	; (8002b4c <RunStateMachine+0x424>)
 80029ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ec:	4a57      	ldr	r2, [pc, #348]	; (8002b4c <RunStateMachine+0x424>)
 80029ee:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		if(CM_Knee.jointSpeed < 0)
 80029f0:	4b56      	ldr	r3, [pc, #344]	; (8002b4c <RunStateMachine+0x424>)
 80029f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	f7fe f811 	bl	8000a24 <__aeabi_dcmplt>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d100      	bne.n	8002a0a <RunStateMachine+0x2e2>
			state = SwingExtension;

		break;
 8002a08:	e08e      	b.n	8002b28 <RunStateMachine+0x400>
			state = SwingExtension;
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <RunStateMachine+0x428>)
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	701a      	strb	r2, [r3, #0]
		break;
 8002a10:	e08a      	b.n	8002b28 <RunStateMachine+0x400>

	case SwingExtension:
		CM_state_angles = 50;
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <RunStateMachine+0x408>)
 8002a14:	2232      	movs	r2, #50	; 0x32
 8002a16:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1500;
 8002a18:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <RunStateMachine+0x40c>)
 8002a1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002a1e:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 10;
 8002a20:	4b45      	ldr	r3, [pc, #276]	; (8002b38 <RunStateMachine+0x410>)
 8002a22:	220a      	movs	r2, #10
 8002a24:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 120;
 8002a26:	4b45      	ldr	r3, [pc, #276]	; (8002b3c <RunStateMachine+0x414>)
 8002a28:	2278      	movs	r2, #120	; 0x78
 8002a2a:	801a      	strh	r2, [r3, #0]
		isFirstCallForLateStance = 1;
 8002a2c:	4b44      	ldr	r3, [pc, #272]	; (8002b40 <RunStateMachine+0x418>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 8002a32:	4b44      	ldr	r3, [pc, #272]	; (8002b44 <RunStateMachine+0x41c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d017      	beq.n	8002a6a <RunStateMachine+0x342>
		{
			CM_Ankle.ProsCtrl.eqPoint = CM_Ankle.SwingExtCtrl.eqPoint;
 8002a3a:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <RunStateMachine+0x420>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a42      	ldr	r2, [pc, #264]	; (8002b48 <RunStateMachine+0x420>)
 8002a40:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Ankle.ProsCtrl.kd = CM_Ankle.SwingExtCtrl.kd;
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <RunStateMachine+0x420>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4a40      	ldr	r2, [pc, #256]	; (8002b48 <RunStateMachine+0x420>)
 8002a48:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Ankle.ProsCtrl.kp = CM_Ankle.SwingExtCtrl.kp;
 8002a4a:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <RunStateMachine+0x420>)
 8002a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4e:	4a3e      	ldr	r2, [pc, #248]	; (8002b48 <RunStateMachine+0x420>)
 8002a50:	63d3      	str	r3, [r2, #60]	; 0x3c

			CM_Knee.ProsCtrl.eqPoint = CM_Knee.SwingExtCtrl.eqPoint;
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <RunStateMachine+0x424>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a3d      	ldr	r2, [pc, #244]	; (8002b4c <RunStateMachine+0x424>)
 8002a58:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Knee.ProsCtrl.kd = CM_Knee.SwingExtCtrl.kd;
 8002a5a:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <RunStateMachine+0x424>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <RunStateMachine+0x424>)
 8002a60:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Knee.ProsCtrl.kp = CM_Knee.SwingExtCtrl.kp;
 8002a62:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <RunStateMachine+0x424>)
 8002a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a66:	4a39      	ldr	r2, [pc, #228]	; (8002b4c <RunStateMachine+0x424>)
 8002a68:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		if(CM_Ankle.limbSpeed < 0)
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <RunStateMachine+0x420>)
 8002a6c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	f7fd ffd4 	bl	8000a24 <__aeabi_dcmplt>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d100      	bne.n	8002a84 <RunStateMachine+0x35c>
			state = SwingDescension;

		break;
 8002a82:	e051      	b.n	8002b28 <RunStateMachine+0x400>
			state = SwingDescension;
 8002a84:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <RunStateMachine+0x428>)
 8002a86:	2205      	movs	r2, #5
 8002a88:	701a      	strb	r2, [r3, #0]
		break;
 8002a8a:	e04d      	b.n	8002b28 <RunStateMachine+0x400>

	case SwingDescension:
		CM_state_angles = 65;
 8002a8c:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <RunStateMachine+0x408>)
 8002a8e:	2241      	movs	r2, #65	; 0x41
 8002a90:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1600;
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <RunStateMachine+0x40c>)
 8002a94:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002a98:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 20;
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <RunStateMachine+0x410>)
 8002a9c:	2214      	movs	r2, #20
 8002a9e:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 200;
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <RunStateMachine+0x414>)
 8002aa2:	22c8      	movs	r2, #200	; 0xc8
 8002aa4:	801a      	strh	r2, [r3, #0]
		isFirstCallForLateStance = 1;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <RunStateMachine+0x418>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <RunStateMachine+0x41c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d029      	beq.n	8002b08 <RunStateMachine+0x3e0>
		{
			CM_Ankle.ProsCtrl.eqPoint = CM_Ankle.SwingDescCtrl.eqPoint;
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <RunStateMachine+0x420>)
 8002ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab8:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <RunStateMachine+0x420>)
 8002aba:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Ankle.ProsCtrl.kd = CM_Ankle.SwingDescCtrl.kd;
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <RunStateMachine+0x420>)
 8002abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <RunStateMachine+0x420>)
 8002ac4:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Ankle.ProsCtrl.kp = CM_Ankle.SwingDescCtrl.kp;
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <RunStateMachine+0x420>)
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002acc:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <RunStateMachine+0x420>)
 8002ace:	63d3      	str	r3, [r2, #60]	; 0x3c

			CM_Knee.SwingDescCtrl.eqPoint = CM_Knee.SwingExtCtrl.eqPoint;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <RunStateMachine+0x424>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <RunStateMachine+0x424>)
 8002ad6:	67d3      	str	r3, [r2, #124]	; 0x7c
			CM_Knee.SwingDescCtrl.kd = CM_Knee.SwingExtCtrl.kd;
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <RunStateMachine+0x424>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <RunStateMachine+0x424>)
 8002ade:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			CM_Knee.SwingDescCtrl.kp = CM_Knee.SwingExtCtrl.kp;
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <RunStateMachine+0x424>)
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae6:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <RunStateMachine+0x424>)
 8002ae8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

			CM_Knee.ProsCtrl.eqPoint = CM_Knee.SwingDescCtrl.eqPoint;
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <RunStateMachine+0x424>)
 8002aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af0:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <RunStateMachine+0x424>)
 8002af2:	6353      	str	r3, [r2, #52]	; 0x34
			CM_Knee.ProsCtrl.kd = CM_Knee.SwingDescCtrl.kd;
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <RunStateMachine+0x424>)
 8002af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <RunStateMachine+0x424>)
 8002afc:	6393      	str	r3, [r2, #56]	; 0x38
			CM_Knee.ProsCtrl.kp = CM_Knee.SwingDescCtrl.kp;
 8002afe:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <RunStateMachine+0x424>)
 8002b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b04:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <RunStateMachine+0x424>)
 8002b06:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		if(CM_LoadCell.Filtered.bot[0] < CM_LoadCell.intoStanceThreshold)
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <RunStateMachine+0x42c>)
 8002b0a:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <RunStateMachine+0x42c>)
 8002b10:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	d400      	bmi.n	8002b20 <RunStateMachine+0x3f8>
			state = EarlyStance;

		break;
 8002b1e:	e002      	b.n	8002b26 <RunStateMachine+0x3fe>
			state = EarlyStance;
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <RunStateMachine+0x428>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
		break;
 8002b26:	bf00      	nop
	}
}
 8002b28:	bf00      	nop
 8002b2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000006d 	.word	0x2000006d
 8002b34:	200001f4 	.word	0x200001f4
 8002b38:	2000006e 	.word	0x2000006e
 8002b3c:	20000070 	.word	0x20000070
 8002b40:	20000001 	.word	0x20000001
 8002b44:	2000006a 	.word	0x2000006a
 8002b48:	20000078 	.word	0x20000078
 8002b4c:	20000100 	.word	0x20000100
 8002b50:	200001f6 	.word	0x200001f6
 8002b54:	20000188 	.word	0x20000188

08002b58 <RunImpedanceControl>:

static void RunImpedanceControl(void)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002b5e:	4ba7      	ldr	r3, [pc, #668]	; (8002dfc <RunImpedanceControl+0x2a4>)
 8002b60:	785b      	ldrb	r3, [r3, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <RunImpedanceControl+0x18>
 8002b66:	4ba5      	ldr	r3, [pc, #660]	; (8002dfc <RunImpedanceControl+0x2a4>)
 8002b68:	785b      	ldrb	r3, [r3, #1]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	f040 809c 	bne.w	8002ca8 <RunImpedanceControl+0x150>
	{
		float errorPos = CM_Ankle.ProsCtrl.eqPoint - CM_Ankle.jointAngle[0];
 8002b70:	4ba3      	ldr	r3, [pc, #652]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fc8b 	bl	8000490 <__aeabi_f2d>
 8002b7a:	4ba1      	ldr	r3, [pc, #644]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f7fd fb26 	bl	80001d0 <__aeabi_dsub>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fd ff72 	bl	8000a74 <__aeabi_d2f>
 8002b90:	4603      	mov	r3, r0
 8002b92:	61fb      	str	r3, [r7, #28]

		float jointTargetTorque = (CM_Ankle.ProsCtrl.kp*errorPos - CM_Ankle.ProsCtrl.kd*CM_Ankle.jointSpeed);
 8002b94:	4b9a      	ldr	r3, [pc, #616]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002b96:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002b9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba2:	ee17 0a90 	vmov	r0, s15
 8002ba6:	f7fd fc73 	bl	8000490 <__aeabi_f2d>
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	4b94      	ldr	r3, [pc, #592]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fc6c 	bl	8000490 <__aeabi_f2d>
 8002bb8:	4b91      	ldr	r3, [pc, #580]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002bba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002bbe:	f7fd fcbf 	bl	8000540 <__aeabi_dmul>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f7fd fb01 	bl	80001d0 <__aeabi_dsub>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7fd ff4d 	bl	8000a74 <__aeabi_d2f>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	61bb      	str	r3, [r7, #24]
		if(jointTargetTorque > MAX_JOINT_TORQUE)
 8002bde:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8002e04 <RunImpedanceControl+0x2ac>
 8002be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	dd03      	ble.n	8002bf8 <RunImpedanceControl+0xa0>
			CM_Ankle.jointTargetTorque = MAX_JOINT_TORQUE;
 8002bf0:	4b83      	ldr	r3, [pc, #524]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002bf2:	4a85      	ldr	r2, [pc, #532]	; (8002e08 <RunImpedanceControl+0x2b0>)
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
 8002bf6:	e00f      	b.n	8002c18 <RunImpedanceControl+0xc0>
		else if(jointTargetTorque < -MAX_JOINT_TORQUE)
 8002bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bfc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002e0c <RunImpedanceControl+0x2b4>
 8002c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c08:	d503      	bpl.n	8002c12 <RunImpedanceControl+0xba>
			CM_Ankle.jointTargetTorque = -MAX_JOINT_TORQUE;
 8002c0a:	4b7d      	ldr	r3, [pc, #500]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002c0c:	4a80      	ldr	r2, [pc, #512]	; (8002e10 <RunImpedanceControl+0x2b8>)
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c10:	e002      	b.n	8002c18 <RunImpedanceControl+0xc0>
		else
			CM_Ankle.jointTargetTorque = jointTargetTorque;
 8002c12:	4a7b      	ldr	r2, [pc, #492]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6253      	str	r3, [r2, #36]	; 0x24

		if((testProgram == None) || (testProgram == ImpedanceControl))
 8002c18:	4b7e      	ldr	r3, [pc, #504]	; (8002e14 <RunImpedanceControl+0x2bc>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <RunImpedanceControl+0xd0>
 8002c20:	4b7c      	ldr	r3, [pc, #496]	; (8002e14 <RunImpedanceControl+0x2bc>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d13f      	bne.n	8002ca8 <RunImpedanceControl+0x150>
		{
			int16_t targetTorque = CM_Ankle.jointTargetTorque / (TORQUE_CONSTANT * GEAR_RATIO * NOMINAL_CURRENT) * 1000;
 8002c28:	4b75      	ldr	r3, [pc, #468]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002c2a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002c2e:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8002e18 <RunImpedanceControl+0x2c0>
 8002c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c36:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002e1c <RunImpedanceControl+0x2c4>
 8002c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c42:	ee17 3a90 	vmov	r3, s15
 8002c46:	82fb      	strh	r3, [r7, #22]
			EPOS4_Error_e error = EPOS4_WriteTargetTorqueValue(AnkleMotorControllerIndex, targetTorque);
 8002c48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f001 f822 	bl	8003c98 <EPOS4_WriteTargetTorqueValue>
 8002c54:	4603      	mov	r3, r0
 8002c56:	757b      	strb	r3, [r7, #21]
			if(error)
 8002c58:	7d7b      	ldrb	r3, [r7, #21]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <RunImpedanceControl+0x110>
				ErrorHandler_EPOS4(AnkleMotorControllerIndex, error);
 8002c5e:	7d7b      	ldrb	r3, [r7, #21]
 8002c60:	4619      	mov	r1, r3
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fe f9aa 	bl	8000fbc <ErrorHandler_EPOS4>

			int16_t torqueActual;
			error = EPOS4_ReadTorqueActualValue(AnkleMotorControllerIndex, &torqueActual);
 8002c68:	1dbb      	adds	r3, r7, #6
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f001 f83b 	bl	8003ce8 <EPOS4_ReadTorqueActualValue>
 8002c72:	4603      	mov	r3, r0
 8002c74:	757b      	strb	r3, [r7, #21]
			if(error)
 8002c76:	7d7b      	ldrb	r3, [r7, #21]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <RunImpedanceControl+0x12e>
				ErrorHandler_EPOS4(AnkleMotorControllerIndex, error);
 8002c7c:	7d7b      	ldrb	r3, [r7, #21]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe f99b 	bl	8000fbc <ErrorHandler_EPOS4>

			CM_Ankle.jointTorqueActual = (float) torqueActual * (TORQUE_CONSTANT * GEAR_RATIO * NOMINAL_CURRENT) / 1000;
 8002c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c92:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002e18 <RunImpedanceControl+0x2c0>
 8002c96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c9a:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002e1c <RunImpedanceControl+0x2c4>
 8002c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca2:	4b57      	ldr	r3, [pc, #348]	; (8002e00 <RunImpedanceControl+0x2a8>)
 8002ca4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		}
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002ca8:	4b54      	ldr	r3, [pc, #336]	; (8002dfc <RunImpedanceControl+0x2a4>)
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d004      	beq.n	8002cba <RunImpedanceControl+0x162>
 8002cb0:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <RunImpedanceControl+0x2a4>)
 8002cb2:	785b      	ldrb	r3, [r3, #1]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	f040 809c 	bne.w	8002df2 <RunImpedanceControl+0x29a>
	{
		float errorPos = CM_Knee.ProsCtrl.eqPoint - CM_Knee.jointAngle[0];
 8002cba:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fbe6 	bl	8000490 <__aeabi_f2d>
 8002cc4:	4b56      	ldr	r3, [pc, #344]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd fa81 	bl	80001d0 <__aeabi_dsub>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f7fd fecd 	bl	8000a74 <__aeabi_d2f>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	613b      	str	r3, [r7, #16]

		float jointTargetTorque = (CM_Knee.ProsCtrl.kp*errorPos - CM_Knee.ProsCtrl.kd*CM_Knee.jointSpeed);
 8002cde:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002ce0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cec:	ee17 0a90 	vmov	r0, s15
 8002cf0:	f7fd fbce 	bl	8000490 <__aeabi_f2d>
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460d      	mov	r5, r1
 8002cf8:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fbc7 	bl	8000490 <__aeabi_f2d>
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002d04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d08:	f7fd fc1a 	bl	8000540 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7fd fa5c 	bl	80001d0 <__aeabi_dsub>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd fea8 	bl	8000a74 <__aeabi_d2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	60fb      	str	r3, [r7, #12]
		if(jointTargetTorque > MAX_JOINT_TORQUE)
 8002d28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d2c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002e04 <RunImpedanceControl+0x2ac>
 8002d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	dd03      	ble.n	8002d42 <RunImpedanceControl+0x1ea>
			CM_Knee.jointTargetTorque = MAX_JOINT_TORQUE;
 8002d3a:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002d3c:	4a32      	ldr	r2, [pc, #200]	; (8002e08 <RunImpedanceControl+0x2b0>)
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d40:	e00f      	b.n	8002d62 <RunImpedanceControl+0x20a>
		else if(jointTargetTorque < -MAX_JOINT_TORQUE)
 8002d42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d46:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002e0c <RunImpedanceControl+0x2b4>
 8002d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d52:	d503      	bpl.n	8002d5c <RunImpedanceControl+0x204>
			CM_Knee.jointTargetTorque = -MAX_JOINT_TORQUE;
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002d56:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <RunImpedanceControl+0x2b8>)
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5a:	e002      	b.n	8002d62 <RunImpedanceControl+0x20a>
		else
			CM_Knee.jointTargetTorque = jointTargetTorque;
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6253      	str	r3, [r2, #36]	; 0x24

		if((testProgram == None) || (testProgram == ImpedanceControl))
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <RunImpedanceControl+0x2bc>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <RunImpedanceControl+0x21a>
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <RunImpedanceControl+0x2bc>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d13f      	bne.n	8002df2 <RunImpedanceControl+0x29a>
		{
			int16_t targetTorque = CM_Knee.jointTargetTorque / (TORQUE_CONSTANT * GEAR_RATIO * NOMINAL_CURRENT) * 1000;
 8002d72:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002d74:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002d78:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002e18 <RunImpedanceControl+0x2c0>
 8002d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d80:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002e1c <RunImpedanceControl+0x2c4>
 8002d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d8c:	ee17 3a90 	vmov	r3, s15
 8002d90:	817b      	strh	r3, [r7, #10]
			EPOS4_Error_e error = EPOS4_WriteTargetTorqueValue(KneeMotorControllerIndex, targetTorque);
 8002d92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d96:	4619      	mov	r1, r3
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f000 ff7d 	bl	8003c98 <EPOS4_WriteTargetTorqueValue>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	727b      	strb	r3, [r7, #9]
			if(error)
 8002da2:	7a7b      	ldrb	r3, [r7, #9]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <RunImpedanceControl+0x25a>
				ErrorHandler_EPOS4(KneeMotorControllerIndex, error);
 8002da8:	7a7b      	ldrb	r3, [r7, #9]
 8002daa:	4619      	mov	r1, r3
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7fe f905 	bl	8000fbc <ErrorHandler_EPOS4>

			int16_t torqueActual;
			error = EPOS4_ReadTorqueActualValue(KneeMotorControllerIndex, &torqueActual);
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	2001      	movs	r0, #1
 8002db8:	f000 ff96 	bl	8003ce8 <EPOS4_ReadTorqueActualValue>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	727b      	strb	r3, [r7, #9]
			if(error)
 8002dc0:	7a7b      	ldrb	r3, [r7, #9]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <RunImpedanceControl+0x278>
				ErrorHandler_EPOS4(KneeMotorControllerIndex, error);
 8002dc6:	7a7b      	ldrb	r3, [r7, #9]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7fe f8f6 	bl	8000fbc <ErrorHandler_EPOS4>

			CM_Knee.jointTorqueActual = (float) torqueActual * (TORQUE_CONSTANT * GEAR_RATIO * NOMINAL_CURRENT) / 1000;
 8002dd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ddc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002e18 <RunImpedanceControl+0x2c0>
 8002de0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002e1c <RunImpedanceControl+0x2c4>
 8002de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <RunImpedanceControl+0x2c8>)
 8002dee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		}
	}
}
 8002df2:	bf00      	nop
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000068 	.word	0x20000068
 8002e00:	20000078 	.word	0x20000078
 8002e04:	42dfd5c2 	.word	0x42dfd5c2
 8002e08:	42dfd5c2 	.word	0x42dfd5c2
 8002e0c:	c2dfd5c2 	.word	0xc2dfd5c2
 8002e10:	c2dfd5c2 	.word	0xc2dfd5c2
 8002e14:	2000006a 	.word	0x2000006a
 8002e18:	425fd5c2 	.word	0x425fd5c2
 8002e1c:	447a0000 	.word	0x447a0000
 8002e20:	20000100 	.word	0x20000100

08002e24 <RunTestProgram>:

static void RunTestProgram(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
	switch (testProgram)
 8002e2a:	4b6c      	ldr	r3, [pc, #432]	; (8002fdc <RunTestProgram+0x1b8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d060      	beq.n	8002ef4 <RunTestProgram+0xd0>
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	f300 80ce 	bgt.w	8002fd4 <RunTestProgram+0x1b0>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80c6 	beq.w	8002fca <RunTestProgram+0x1a6>
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d000      	beq.n	8002e44 <RunTestProgram+0x20>
			}
		}

		break;
	}
}
 8002e42:	e0c7      	b.n	8002fd4 <RunTestProgram+0x1b0>
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <RunTestProgram+0x1bc>)
 8002e46:	785b      	ldrb	r3, [r3, #1]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <RunTestProgram+0x30>
 8002e4c:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <RunTestProgram+0x1bc>)
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d122      	bne.n	8002e9a <RunTestProgram+0x76>
			sum += AS5145B_ReadPosition_Raw(AnkleEncoderIndex);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f000 fcd1 	bl	80037fc <AS5145B_ReadPosition_Raw>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <RunTestProgram+0x1c0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a5f      	ldr	r2, [pc, #380]	; (8002fe4 <RunTestProgram+0x1c0>)
 8002e66:	6013      	str	r3, [r2, #0]
			count++;
 8002e68:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <RunTestProgram+0x1c4>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <RunTestProgram+0x1c4>)
 8002e72:	801a      	strh	r2, [r3, #0]
			if(count == 10)
 8002e74:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <RunTestProgram+0x1c4>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	2b0a      	cmp	r3, #10
 8002e7a:	d10e      	bne.n	8002e9a <RunTestProgram+0x76>
				CM_ankleRawEncoderBias = sum/count;
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <RunTestProgram+0x1c0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a59      	ldr	r2, [pc, #356]	; (8002fe8 <RunTestProgram+0x1c4>)
 8002e82:	8812      	ldrh	r2, [r2, #0]
 8002e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	4b58      	ldr	r3, [pc, #352]	; (8002fec <RunTestProgram+0x1c8>)
 8002e8c:	801a      	strh	r2, [r3, #0]
				sum = 0;
 8002e8e:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <RunTestProgram+0x1c0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
				count = 0;
 8002e94:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <RunTestProgram+0x1c4>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	801a      	strh	r2, [r3, #0]
		if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002e9a:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <RunTestProgram+0x1bc>)
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d004      	beq.n	8002eac <RunTestProgram+0x88>
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <RunTestProgram+0x1bc>)
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	f040 8091 	bne.w	8002fce <RunTestProgram+0x1aa>
			sum += AS5145B_ReadPosition_Raw(KneeEncoderIndex);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f000 fca5 	bl	80037fc <AS5145B_ReadPosition_Raw>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <RunTestProgram+0x1cc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a4c      	ldr	r2, [pc, #304]	; (8002ff0 <RunTestProgram+0x1cc>)
 8002ebe:	6013      	str	r3, [r2, #0]
			count++;
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <RunTestProgram+0x1d0>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <RunTestProgram+0x1d0>)
 8002eca:	801a      	strh	r2, [r3, #0]
			if(count == 10)
 8002ecc:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <RunTestProgram+0x1d0>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2b0a      	cmp	r3, #10
 8002ed2:	d17c      	bne.n	8002fce <RunTestProgram+0x1aa>
				CM_kneeRawEncoderBias = sum/count;
 8002ed4:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <RunTestProgram+0x1cc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a46      	ldr	r2, [pc, #280]	; (8002ff4 <RunTestProgram+0x1d0>)
 8002eda:	8812      	ldrh	r2, [r2, #0]
 8002edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	4b45      	ldr	r3, [pc, #276]	; (8002ff8 <RunTestProgram+0x1d4>)
 8002ee4:	801a      	strh	r2, [r3, #0]
				sum = 0;
 8002ee6:	4b42      	ldr	r3, [pc, #264]	; (8002ff0 <RunTestProgram+0x1cc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
				count = 0;
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <RunTestProgram+0x1d0>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	801a      	strh	r2, [r3, #0]
		break;
 8002ef2:	e06c      	b.n	8002fce <RunTestProgram+0x1aa>
		if(isFirst)
 8002ef4:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <RunTestProgram+0x1d8>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d06a      	beq.n	8002fd2 <RunTestProgram+0x1ae>
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002efc:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <RunTestProgram+0x1bc>)
 8002efe:	785b      	ldrb	r3, [r3, #1]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <RunTestProgram+0xe8>
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <RunTestProgram+0x1bc>)
 8002f06:	785b      	ldrb	r3, [r3, #1]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d12a      	bne.n	8002f62 <RunTestProgram+0x13e>
				float sum = 0.0f;
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
				for(i = 0; i < 1000; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	82fb      	strh	r3, [r7, #22]
 8002f16:	e00f      	b.n	8002f38 <RunTestProgram+0x114>
					float position = AS5145B_ReadPosition(AnkleEncoderIndex);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f000 fc41 	bl	80037a0 <AS5145B_ReadPosition>
 8002f1e:	ed87 0a01 	vstr	s0, [r7, #4]
					sum += position;
 8002f22:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2e:	edc7 7a04 	vstr	s15, [r7, #16]
				for(i = 0; i < 1000; i++)
 8002f32:	8afb      	ldrh	r3, [r7, #22]
 8002f34:	3301      	adds	r3, #1
 8002f36:	82fb      	strh	r3, [r7, #22]
 8002f38:	8afb      	ldrh	r3, [r7, #22]
 8002f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f3e:	d3eb      	bcc.n	8002f18 <RunTestProgram+0xf4>
				CM_Ankle.ProsCtrl.eqPoint = sum / i - CM_Ankle.encoderBias;
 8002f40:	8afb      	ldrh	r3, [r7, #22]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f4a:	edd7 6a04 	vldr	s13, [r7, #16]
 8002f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f52:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <RunTestProgram+0x1dc>)
 8002f54:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5c:	4b28      	ldr	r3, [pc, #160]	; (8003000 <RunTestProgram+0x1dc>)
 8002f5e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002f62:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <RunTestProgram+0x1bc>)
 8002f64:	785b      	ldrb	r3, [r3, #1]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <RunTestProgram+0x14e>
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <RunTestProgram+0x1bc>)
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d12f      	bne.n	8002fd2 <RunTestProgram+0x1ae>
				float sum = 0.0f;
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
				for(i = 0; i < 1000; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	81fb      	strh	r3, [r7, #14]
 8002f7c:	e00f      	b.n	8002f9e <RunTestProgram+0x17a>
					float position = AS5145B_ReadPosition(KneeEncoderIndex);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f000 fc0e 	bl	80037a0 <AS5145B_ReadPosition>
 8002f84:	ed87 0a00 	vstr	s0, [r7]
					sum += position;
 8002f88:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f8c:	edd7 7a00 	vldr	s15, [r7]
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	edc7 7a02 	vstr	s15, [r7, #8]
				for(i = 0; i < 1000; i++)
 8002f98:	89fb      	ldrh	r3, [r7, #14]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	81fb      	strh	r3, [r7, #14]
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa4:	d3eb      	bcc.n	8002f7e <RunTestProgram+0x15a>
				CM_Knee.ProsCtrl.eqPoint = sum / i - CM_Knee.encoderBias;
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb0:	edd7 6a02 	vldr	s13, [r7, #8]
 8002fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <RunTestProgram+0x1e0>)
 8002fba:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <RunTestProgram+0x1e0>)
 8002fc4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		break;
 8002fc8:	e003      	b.n	8002fd2 <RunTestProgram+0x1ae>
		break;
 8002fca:	bf00      	nop
 8002fcc:	e002      	b.n	8002fd4 <RunTestProgram+0x1b0>
		break;
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <RunTestProgram+0x1b0>
		break;
 8002fd2:	bf00      	nop
}
 8002fd4:	bf00      	nop
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	2000006a 	.word	0x2000006a
 8002fe0:	20000068 	.word	0x20000068
 8002fe4:	200001f8 	.word	0x200001f8
 8002fe8:	200001fc 	.word	0x200001fc
 8002fec:	200001f0 	.word	0x200001f0
 8002ff0:	20000200 	.word	0x20000200
 8002ff4:	20000204 	.word	0x20000204
 8002ff8:	200001f2 	.word	0x200001f2
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000078 	.word	0x20000078
 8003004:	20000100 	.word	0x20000100

08003008 <LL_AHB2_GRP1_EnableClock>:
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4313      	orrs	r3, r2
 800301a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800301e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4013      	ands	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40021000 	.word	0x40021000

08003038 <LL_APB1_GRP1_EnableClock>:
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003042:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003044:	4907      	ldr	r1, [pc, #28]	; (8003064 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4313      	orrs	r3, r2
 800304a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <LL_APB1_GRP1_EnableClock+0x2c>)
 800304e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4013      	ands	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	40021000 	.word	0x40021000

08003068 <LL_APB2_GRP1_EnableClock>:
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003072:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4313      	orrs	r3, r2
 800307a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <LL_APB2_GRP1_EnableClock+0x2c>)
 800307e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4013      	ands	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40021000 	.word	0x40021000

08003098 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f023 0210 	bic.w	r2, r3, #16
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f023 0208 	bic.w	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	605a      	str	r2, [r3, #4]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b090      	sub	sp, #64	; 0x40
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80030e6:	f107 0318 	add.w	r3, r7, #24
 80030ea:	2228      	movs	r2, #40	; 0x28
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 fd18 	bl	8006b24 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	463b      	mov	r3, r7
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	60da      	str	r2, [r3, #12]
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003104:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003108:	f7ff ffae 	bl	8003068 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800310c:	2001      	movs	r0, #1
 800310e:	f7ff ff7b 	bl	8003008 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003112:	23e0      	movs	r3, #224	; 0xe0
 8003114:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003116:	2302      	movs	r3, #2
 8003118:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800311a:	2303      	movs	r3, #3
 800311c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003126:	2305      	movs	r3, #5
 8003128:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312a:	463b      	mov	r3, r7
 800312c:	4619      	mov	r1, r3
 800312e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003132:	f002 fdea 	bl	8005d0a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800313a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800313e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003140:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003144:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003146:	2302      	movs	r3, #2
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800314a:	2301      	movs	r3, #1
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800314e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003154:	2308      	movs	r3, #8
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003158:	2300      	movs	r3, #0
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003160:	2307      	movs	r3, #7
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003164:	f107 0318 	add.w	r3, r7, #24
 8003168:	4619      	mov	r1, r3
 800316a:	4807      	ldr	r0, [pc, #28]	; (8003188 <MX_SPI1_Init+0xa8>)
 800316c:	f003 fa36 	bl	80065dc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003170:	2100      	movs	r1, #0
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_SPI1_Init+0xa8>)
 8003174:	f7ff ff90 	bl	8003098 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8003178:	4803      	ldr	r0, [pc, #12]	; (8003188 <MX_SPI1_Init+0xa8>)
 800317a:	f7ff ffa0 	bl	80030be <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800317e:	bf00      	nop
 8003180:	3740      	adds	r7, #64	; 0x40
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40013000 	.word	0x40013000

0800318c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b090      	sub	sp, #64	; 0x40
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003192:	f107 0318 	add.w	r3, r7, #24
 8003196:	2228      	movs	r2, #40	; 0x28
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f003 fcc2 	bl	8006b24 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	463b      	mov	r3, r7
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	611a      	str	r2, [r3, #16]
 80031ae:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80031b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031b4:	f7ff ff40 	bl	8003038 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80031b8:	2002      	movs	r0, #2
 80031ba:	f7ff ff25 	bl	8003008 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = KNEE_CAN_CONTROLLER_SCK_Pin|KNEE_CAN_CONTROLLER_MISO_Pin|KNEE_CAN_CONTROLLER_MOSI_Pin;
 80031be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80031c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80031c4:	2302      	movs	r3, #2
 80031c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	2303      	movs	r3, #3
 80031ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80031d4:	2305      	movs	r3, #5
 80031d6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d8:	463b      	mov	r3, r7
 80031da:	4619      	mov	r1, r3
 80031dc:	4815      	ldr	r0, [pc, #84]	; (8003234 <MX_SPI2_Init+0xa8>)
 80031de:	f002 fd94 	bl	8005d0a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80031e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80031ea:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80031ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80031f0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80031f2:	2302      	movs	r3, #2
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80031f6:	2301      	movs	r3, #1
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80031fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003200:	2308      	movs	r3, #8
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003204:	2300      	movs	r3, #0
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800320c:	2307      	movs	r3, #7
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003210:	f107 0318 	add.w	r3, r7, #24
 8003214:	4619      	mov	r1, r3
 8003216:	4808      	ldr	r0, [pc, #32]	; (8003238 <MX_SPI2_Init+0xac>)
 8003218:	f003 f9e0 	bl	80065dc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800321c:	2100      	movs	r1, #0
 800321e:	4806      	ldr	r0, [pc, #24]	; (8003238 <MX_SPI2_Init+0xac>)
 8003220:	f7ff ff3a 	bl	8003098 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8003224:	4804      	ldr	r0, [pc, #16]	; (8003238 <MX_SPI2_Init+0xac>)
 8003226:	f7ff ff4a 	bl	80030be <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800322a:	bf00      	nop
 800322c:	3740      	adds	r7, #64	; 0x40
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	48000400 	.word	0x48000400
 8003238:	40003800 	.word	0x40003800

0800323c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b090      	sub	sp, #64	; 0x40
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003242:	f107 0318 	add.w	r3, r7, #24
 8003246:	2228      	movs	r2, #40	; 0x28
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fc6a 	bl	8006b24 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	463b      	mov	r3, r7
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	611a      	str	r2, [r3, #16]
 800325e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003260:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003264:	f7ff fee8 	bl	8003038 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003268:	2002      	movs	r0, #2
 800326a:	f7ff fecd 	bl	8003008 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3 (JTDO-TRACESWO)   ------> SPI3_SCK
  PB4 (NJTRST)   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = ANKLE_CAN_CONTROLLER_SCK_Pin|ANKLE_CAN_CONTROLLER_MISO_Pin|ANKLE_CAN_CONTROLLER_MOSI_Pin;
 800326e:	2338      	movs	r3, #56	; 0x38
 8003270:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003272:	2302      	movs	r3, #2
 8003274:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003276:	2303      	movs	r3, #3
 8003278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003282:	2306      	movs	r3, #6
 8003284:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003286:	463b      	mov	r3, r7
 8003288:	4619      	mov	r1, r3
 800328a:	4815      	ldr	r0, [pc, #84]	; (80032e0 <MX_SPI3_Init+0xa4>)
 800328c:	f002 fd3d 	bl	8005d0a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003294:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003298:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800329a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800329e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80032a0:	2302      	movs	r3, #2
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80032a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80032ae:	2308      	movs	r3, #8
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80032ba:	2307      	movs	r3, #7
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80032be:	f107 0318 	add.w	r3, r7, #24
 80032c2:	4619      	mov	r1, r3
 80032c4:	4807      	ldr	r0, [pc, #28]	; (80032e4 <MX_SPI3_Init+0xa8>)
 80032c6:	f003 f989 	bl	80065dc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80032ca:	2100      	movs	r1, #0
 80032cc:	4805      	ldr	r0, [pc, #20]	; (80032e4 <MX_SPI3_Init+0xa8>)
 80032ce:	f7ff fee3 	bl	8003098 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 80032d2:	4804      	ldr	r0, [pc, #16]	; (80032e4 <MX_SPI3_Init+0xa8>)
 80032d4:	f7ff fef3 	bl	80030be <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	3740      	adds	r7, #64	; 0x40
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	48000400 	.word	0x48000400
 80032e4:	40003c00 	.word	0x40003c00

080032e8 <LL_LPTIM_ClearFLAG_ARRM>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	605a      	str	r2, [r3, #4]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b02      	cmp	r3, #2
 800331a:	d101      	bne.n	8003320 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003332:	e7fe      	b.n	8003332 <NMI_Handler+0x4>

08003334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003338:	e7fe      	b.n	8003338 <HardFault_Handler+0x4>

0800333a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800333e:	e7fe      	b.n	800333e <MemManage_Handler+0x4>

08003340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <BusFault_Handler+0x4>

08003346 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800334a:	e7fe      	b.n	800334a <UsageFault_Handler+0x4>

0800334c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8003388:	4806      	ldr	r0, [pc, #24]	; (80033a4 <LPTIM2_IRQHandler+0x20>)
 800338a:	f7ff ffbd 	bl	8003308 <LL_LPTIM_IsActiveFlag_ARRM>
 800338e:	4603      	mov	r3, r0
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <LPTIM2_IRQHandler+0x24>)
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 800339a:	4802      	ldr	r0, [pc, #8]	; (80033a4 <LPTIM2_IRQHandler+0x20>)
 800339c:	f7ff ffa4 	bl	80032e8 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40009400 	.word	0x40009400
 80033a8:	20000032 	.word	0x20000032

080033ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <SystemInit+0x20>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	4a05      	ldr	r2, [pc, #20]	; (80033cc <SystemInit+0x20>)
 80033b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <LL_APB1_GRP1_EnableClock>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80033da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033dc:	4907      	ldr	r1, [pc, #28]	; (80033fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80033e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4013      	ands	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40021000 	.word	0x40021000

08003400 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	605a      	str	r2, [r3, #4]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	609a      	str	r2, [r3, #8]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 800347c:	2010      	movs	r0, #16
 800347e:	f7ff ffa7 	bl	80033d0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 8003482:	2307      	movs	r3, #7
 8003484:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800348a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800348e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	4619      	mov	r1, r3
 8003494:	4808      	ldr	r0, [pc, #32]	; (80034b8 <MX_TIM6_Init+0x50>)
 8003496:	f003 f933 	bl	8006700 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800349a:	4807      	ldr	r0, [pc, #28]	; (80034b8 <MX_TIM6_Init+0x50>)
 800349c:	f7ff ffb0 	bl	8003400 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80034a0:	2100      	movs	r1, #0
 80034a2:	4805      	ldr	r0, [pc, #20]	; (80034b8 <MX_TIM6_Init+0x50>)
 80034a4:	f7ff ffbc 	bl	8003420 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80034a8:	4803      	ldr	r0, [pc, #12]	; (80034b8 <MX_TIM6_Init+0x50>)
 80034aa:	f7ff ffcc 	bl	8003446 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40001000 	.word	0x40001000

080034bc <LL_RCC_SetUSARTClockSource>:
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <LL_RCC_SetUSARTClockSource+0x30>)
 80034c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	43db      	mvns	r3, r3
 80034d0:	401a      	ands	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4905      	ldr	r1, [pc, #20]	; (80034ec <LL_RCC_SetUSARTClockSource+0x30>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000

080034f0 <LL_AHB2_GRP1_EnableClock>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034fc:	4907      	ldr	r1, [pc, #28]	; (800351c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4313      	orrs	r3, r2
 8003502:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4013      	ands	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40021000 	.word	0x40021000

08003520 <LL_APB1_GRP1_EnableClock>:
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <LL_APB1_GRP1_EnableClock+0x2c>)
 800352a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <LL_APB1_GRP1_EnableClock+0x2c>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4313      	orrs	r3, r2
 8003532:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003536:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4013      	ands	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40021000 	.word	0x40021000

08003550 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	; 0x38
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80035a2:	f107 031c 	add.w	r3, r7, #28
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	611a      	str	r2, [r3, #16]
 80035b2:	615a      	str	r2, [r3, #20]
 80035b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
 80035c4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80035c6:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80035ca:	f7ff ff77 	bl	80034bc <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80035ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035d2:	f7ff ffa5 	bl	8003520 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80035d6:	2001      	movs	r0, #1
 80035d8:	f7ff ff8a 	bl	80034f0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035dc:	230c      	movs	r3, #12
 80035de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80035e0:	2302      	movs	r3, #2
 80035e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80035e4:	2303      	movs	r3, #3
 80035e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80035f0:	2307      	movs	r3, #7
 80035f2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035fc:	f002 fb85 	bl	8005d0a <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003600:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003604:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800360e:	2300      	movs	r3, #0
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003612:	230c      	movs	r3, #12
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003616:	2300      	movs	r3, #0
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800361a:	2300      	movs	r3, #0
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800361e:	f107 031c 	add.w	r3, r7, #28
 8003622:	4619      	mov	r1, r3
 8003624:	4806      	ldr	r0, [pc, #24]	; (8003640 <MX_USART2_UART_Init+0xa4>)
 8003626:	f003 f96f 	bl	8006908 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <MX_USART2_UART_Init+0xa4>)
 800362c:	f7ff ffa0 	bl	8003570 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003630:	4803      	ldr	r0, [pc, #12]	; (8003640 <MX_USART2_UART_Init+0xa4>)
 8003632:	f7ff ff8d 	bl	8003550 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003636:	bf00      	nop
 8003638:	3738      	adds	r7, #56	; 0x38
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40004400 	.word	0x40004400

08003644 <DelayUs>:
 *  100			~100.6
 *  500			~500.0
 *  1000		~998.0
 */
void DelayUs(TIM_TypeDef *TIMx, uint8_t timerRateMHz, uint16_t useconds)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
 8003650:	4613      	mov	r3, r2
 8003652:	803b      	strh	r3, [r7, #0]
	TIMx->CNT = 0;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
	uint16_t duration = useconds * timerRateMHz;
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	b29b      	uxth	r3, r3
 800365e:	883a      	ldrh	r2, [r7, #0]
 8003660:	fb12 f303 	smulbb	r3, r2, r3
 8003664:	81fb      	strh	r3, [r7, #14]
	while(TIMx->CNT < duration);
 8003666:	bf00      	nop
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	429a      	cmp	r2, r3
 8003670:	d3fa      	bcc.n	8003668 <DelayUs+0x24>
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003684:	f7ff fe92 	bl	80033ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003688:	480c      	ldr	r0, [pc, #48]	; (80036bc <LoopForever+0x6>)
  ldr r1, =_edata
 800368a:	490d      	ldr	r1, [pc, #52]	; (80036c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800368c:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <LoopForever+0xe>)
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003690:	e002      	b.n	8003698 <LoopCopyDataInit>

08003692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003696:	3304      	adds	r3, #4

08003698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800369c:	d3f9      	bcc.n	8003692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036a0:	4c0a      	ldr	r4, [pc, #40]	; (80036cc <LoopForever+0x16>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a4:	e001      	b.n	80036aa <LoopFillZerobss>

080036a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a8:	3204      	adds	r2, #4

080036aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ac:	d3fb      	bcc.n	80036a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ae:	f003 fa07 	bl	8006ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036b2:	f7fe f971 	bl	8001998 <main>

080036b6 <LoopForever>:

LoopForever:
    b LoopForever
 80036b6:	e7fe      	b.n	80036b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80036b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80036c4:	08006ba8 	.word	0x08006ba8
  ldr r2, =_sbss
 80036c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80036cc:	20000324 	.word	0x20000324

080036d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036d0:	e7fe      	b.n	80036d0 <ADC1_2_IRQHandler>

080036d2 <LL_GPIO_IsInputPinSet>:
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4013      	ands	r3, r2
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d101      	bne.n	80036ee <LL_GPIO_IsInputPinSet+0x1c>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <LL_GPIO_IsInputPinSet+0x1e>
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_GPIO_SetOutputPin>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	619a      	str	r2, [r3, #24]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_GPIO_ResetOutputPin>:
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

AS5145B_Error_e AS5145B_Init(uint8_t deviceIndex, AS5145B_Init_t *Device_Init)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > AS5145B_NUMBER_OF_DEVICES)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d900      	bls.n	8003748 <AS5145B_Init+0x14>
		while(1);
 8003746:	e7fe      	b.n	8003746 <AS5145B_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(AS5145B_Init_t));
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	4a13      	ldr	r2, [pc, #76]	; (800379c <AS5145B_Init+0x68>)
 800374e:	4413      	add	r3, r2
 8003750:	221c      	movs	r2, #28
 8003752:	6839      	ldr	r1, [r7, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f003 f9d7 	bl	8006b08 <memcpy>

	ClearChipSelect(deviceIndex);
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 f93f 	bl	80039e0 <ClearChipSelect>
	RaiseClockEdge(deviceIndex);
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f973 	bl	8003a50 <RaiseClockEdge>

	uint8_t status = ReadStatus(deviceIndex);
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f863 	bl	8003838 <ReadStatus>
 8003772:	4603      	mov	r3, r0
 8003774:	73fb      	strb	r3, [r7, #15]
	if((status & 0b111000) != 0b100000)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377c:	2b20      	cmp	r3, #32
 800377e:	d001      	beq.n	8003784 <AS5145B_Init+0x50>
		return AS5145B_StatusError;
 8003780:	2301      	movs	r3, #1
 8003782:	e007      	b.n	8003794 <AS5145B_Init+0x60>

	Device[deviceIndex].isInit = 1;
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	4a05      	ldr	r2, [pc, #20]	; (800379c <AS5145B_Init+0x68>)
 8003788:	015b      	lsls	r3, r3, #5
 800378a:	4413      	add	r3, r2
 800378c:	331c      	adds	r3, #28
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

	return AS5145B_NoError;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000208 	.word	0x20000208

080037a0 <AS5145B_ReadPosition>:

	return ReadData(deviceIndex);
}

float AS5145B_ReadPosition(uint8_t deviceIndex)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <AS5145B_ReadPosition+0x54>)
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	4413      	add	r3, r2
 80037b2:	331c      	adds	r3, #28
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d100      	bne.n	80037bc <AS5145B_ReadPosition+0x1c>
		while(1);
 80037ba:	e7fe      	b.n	80037ba <AS5145B_ReadPosition+0x1a>

	AS5145B_Data_t Data = ReadData(deviceIndex);
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f84a 	bl	8003858 <ReadData>
 80037c4:	4603      	mov	r3, r0
 80037c6:	60fb      	str	r3, [r7, #12]
	return Data.position * AS5145B_RAW2DEG;
 80037c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037cc:	461a      	mov	r2, r3
 80037ce:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80037f8 <AS5145B_ReadPosition+0x58>
 80037e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80037ea:	eeb0 0a67 	vmov.f32	s0, s15
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000208 	.word	0x20000208
 80037f8:	45800000 	.word	0x45800000

080037fc <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(uint8_t deviceIndex)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <AS5145B_ReadPosition_Raw+0x38>)
 800380a:	015b      	lsls	r3, r3, #5
 800380c:	4413      	add	r3, r2
 800380e:	331c      	adds	r3, #28
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d100      	bne.n	8003818 <AS5145B_ReadPosition_Raw+0x1c>
		while(1);
 8003816:	e7fe      	b.n	8003816 <AS5145B_ReadPosition_Raw+0x1a>

	AS5145B_Data_t Data = ReadData(deviceIndex);
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f81c 	bl	8003858 <ReadData>
 8003820:	4603      	mov	r3, r0
 8003822:	60fb      	str	r3, [r7, #12]
	return Data.position;
 8003824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003828:	b29b      	uxth	r3, r3
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000208 	.word	0x20000208

08003838 <ReadStatus>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static uint8_t ReadStatus(uint8_t deviceIndex)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
	AS5145B_Data_t Data = ReadData(deviceIndex);
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f807 	bl	8003858 <ReadData>
 800384a:	4603      	mov	r3, r0
 800384c:	60fb      	str	r3, [r7, #12]
	return Data.status;
 800384e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <ReadData>:

static AS5145B_Data_t ReadData(uint8_t deviceIndex)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f8d7 	bl	8003a18 <SetChipSelect>
	DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	4a5b      	ldr	r2, [pc, #364]	; (80039dc <ReadData+0x184>)
 800386e:	015b      	lsls	r3, r3, #5
 8003870:	4413      	add	r3, r2
 8003872:	3314      	adds	r3, #20
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	4a58      	ldr	r2, [pc, #352]	; (80039dc <ReadData+0x184>)
 800387a:	015b      	lsls	r3, r3, #5
 800387c:	4413      	add	r3, r2
 800387e:	3318      	adds	r3, #24
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2201      	movs	r2, #1
 8003884:	4619      	mov	r1, r3
 8003886:	f7ff fedd 	bl	8003644 <DelayUs>

	AS5145B_Data_t Data;
	memset(&Data, 0, sizeof(Data));
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	2204      	movs	r2, #4
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f003 f946 	bl	8006b24 <memset>
	for(int i = 12-1; i >= 0; i--)
 8003898:	230b      	movs	r3, #11
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e039      	b.n	8003912 <ReadData+0xba>
	{
		LowerClockEdge(deviceIndex);
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f8f1 	bl	8003a88 <LowerClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4a4c      	ldr	r2, [pc, #304]	; (80039dc <ReadData+0x184>)
 80038aa:	015b      	lsls	r3, r3, #5
 80038ac:	4413      	add	r3, r2
 80038ae:	3314      	adds	r3, #20
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	4a49      	ldr	r2, [pc, #292]	; (80039dc <ReadData+0x184>)
 80038b6:	015b      	lsls	r3, r3, #5
 80038b8:	4413      	add	r3, r2
 80038ba:	3318      	adds	r3, #24
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2201      	movs	r2, #1
 80038c0:	4619      	mov	r1, r3
 80038c2:	f7ff febf 	bl	8003644 <DelayUs>
		RaiseClockEdge(deviceIndex);
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f8c1 	bl	8003a50 <RaiseClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	4a42      	ldr	r2, [pc, #264]	; (80039dc <ReadData+0x184>)
 80038d2:	015b      	lsls	r3, r3, #5
 80038d4:	4413      	add	r3, r2
 80038d6:	3314      	adds	r3, #20
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	4a3f      	ldr	r2, [pc, #252]	; (80039dc <ReadData+0x184>)
 80038de:	015b      	lsls	r3, r3, #5
 80038e0:	4413      	add	r3, r2
 80038e2:	3318      	adds	r3, #24
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2201      	movs	r2, #1
 80038e8:	4619      	mov	r1, r3
 80038ea:	f7ff feab 	bl	8003644 <DelayUs>

		Data.position |= ReadDO_Pin(deviceIndex) << i;
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f8e5 	bl	8003ac0 <ReadDO_Pin>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003904:	b21b      	sxth	r3, r3
 8003906:	4313      	orrs	r3, r2
 8003908:	b21b      	sxth	r3, r3
 800390a:	813b      	strh	r3, [r7, #8]
	for(int i = 12-1; i >= 0; i--)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	3b01      	subs	r3, #1
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	dac2      	bge.n	800389e <ReadData+0x46>
	}

	for(int i = 6-1; i >= 0; i--)
 8003918:	2305      	movs	r3, #5
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	e03a      	b.n	8003994 <ReadData+0x13c>
	{
		LowerClockEdge(deviceIndex);
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f8b1 	bl	8003a88 <LowerClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <ReadData+0x184>)
 800392a:	015b      	lsls	r3, r3, #5
 800392c:	4413      	add	r3, r2
 800392e:	3314      	adds	r3, #20
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	4a29      	ldr	r2, [pc, #164]	; (80039dc <ReadData+0x184>)
 8003936:	015b      	lsls	r3, r3, #5
 8003938:	4413      	add	r3, r2
 800393a:	3318      	adds	r3, #24
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	4619      	mov	r1, r3
 8003942:	f7ff fe7f 	bl	8003644 <DelayUs>
		RaiseClockEdge(deviceIndex);
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f881 	bl	8003a50 <RaiseClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	4a22      	ldr	r2, [pc, #136]	; (80039dc <ReadData+0x184>)
 8003952:	015b      	lsls	r3, r3, #5
 8003954:	4413      	add	r3, r2
 8003956:	3314      	adds	r3, #20
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <ReadData+0x184>)
 800395e:	015b      	lsls	r3, r3, #5
 8003960:	4413      	add	r3, r2
 8003962:	3318      	adds	r3, #24
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4619      	mov	r1, r3
 800396a:	f7ff fe6b 	bl	8003644 <DelayUs>

		Data.status |= ReadDO_Pin(deviceIndex) << i;
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 f8a5 	bl	8003ac0 <ReadDO_Pin>
 8003976:	4603      	mov	r3, r0
 8003978:	461a      	mov	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	7aba      	ldrb	r2, [r7, #10]
 8003982:	b252      	sxtb	r2, r2
 8003984:	b25b      	sxtb	r3, r3
 8003986:	4313      	orrs	r3, r2
 8003988:	b25b      	sxtb	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	72bb      	strb	r3, [r7, #10]
	for(int i = 6-1; i >= 0; i--)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3b01      	subs	r3, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	dac1      	bge.n	800391e <ReadData+0xc6>
	}

	ClearChipSelect(deviceIndex);
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 f81f 	bl	80039e0 <ClearChipSelect>
	DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <ReadData+0x184>)
 80039a6:	015b      	lsls	r3, r3, #5
 80039a8:	4413      	add	r3, r2
 80039aa:	3314      	adds	r3, #20
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <ReadData+0x184>)
 80039b2:	015b      	lsls	r3, r3, #5
 80039b4:	4413      	add	r3, r2
 80039b6:	3318      	adds	r3, #24
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2201      	movs	r2, #1
 80039bc:	4619      	mov	r1, r3
 80039be:	f7ff fe41 	bl	8003644 <DelayUs>

	return Data;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	2300      	movs	r3, #0
 80039c8:	89ba      	ldrh	r2, [r7, #12]
 80039ca:	f362 030f 	bfi	r3, r2, #0, #16
 80039ce:	89fa      	ldrh	r2, [r7, #14]
 80039d0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000208 	.word	0x20000208

080039e0 <ClearChipSelect>:

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CSn_GPIOx, Device[deviceIndex].CSn_Pin);
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <ClearChipSelect+0x34>)
 80039ee:	015b      	lsls	r3, r3, #5
 80039f0:	4413      	add	r3, r2
 80039f2:	3308      	adds	r3, #8
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	4906      	ldr	r1, [pc, #24]	; (8003a14 <ClearChipSelect+0x34>)
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	440b      	add	r3, r1
 80039fe:	3310      	adds	r3, #16
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	4619      	mov	r1, r3
 8003a04:	4610      	mov	r0, r2
 8003a06:	f7ff fe79 	bl	80036fc <LL_GPIO_SetOutputPin>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000208 	.word	0x20000208

08003a18 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CSn_GPIOx, Device[deviceIndex].CSn_Pin);
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <SetChipSelect+0x34>)
 8003a26:	015b      	lsls	r3, r3, #5
 8003a28:	4413      	add	r3, r2
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4906      	ldr	r1, [pc, #24]	; (8003a4c <SetChipSelect+0x34>)
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	440b      	add	r3, r1
 8003a36:	3310      	adds	r3, #16
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7ff fe6b 	bl	8003718 <LL_GPIO_ResetOutputPin>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000208 	.word	0x20000208

08003a50 <RaiseClockEdge>:

static inline void RaiseClockEdge(uint8_t deviceIndex)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CLK_GPIOx, Device[deviceIndex].CLK_Pin);
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <RaiseClockEdge+0x34>)
 8003a5e:	015b      	lsls	r3, r3, #5
 8003a60:	4413      	add	r3, r2
 8003a62:	3304      	adds	r3, #4
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	4906      	ldr	r1, [pc, #24]	; (8003a84 <RaiseClockEdge+0x34>)
 8003a6a:	015b      	lsls	r3, r3, #5
 8003a6c:	440b      	add	r3, r1
 8003a6e:	330e      	adds	r3, #14
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f7ff fe41 	bl	80036fc <LL_GPIO_SetOutputPin>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000208 	.word	0x20000208

08003a88 <LowerClockEdge>:

static inline void LowerClockEdge(uint8_t deviceIndex)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CLK_GPIOx, Device[deviceIndex].CLK_Pin);
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4a09      	ldr	r2, [pc, #36]	; (8003abc <LowerClockEdge+0x34>)
 8003a96:	015b      	lsls	r3, r3, #5
 8003a98:	4413      	add	r3, r2
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <LowerClockEdge+0x34>)
 8003aa2:	015b      	lsls	r3, r3, #5
 8003aa4:	440b      	add	r3, r1
 8003aa6:	330e      	adds	r3, #14
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7ff fe33 	bl	8003718 <LL_GPIO_ResetOutputPin>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000208 	.word	0x20000208

08003ac0 <ReadDO_Pin>:

static inline uint8_t ReadDO_Pin(uint8_t deviceIndex)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_IsInputPinSet(Device[deviceIndex].DO_GPIOx, Device[deviceIndex].DO_Pin) & 0x01;
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <ReadDO_Pin+0x3c>)
 8003ace:	015b      	lsls	r3, r3, #5
 8003ad0:	4413      	add	r3, r2
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	4909      	ldr	r1, [pc, #36]	; (8003afc <ReadDO_Pin+0x3c>)
 8003ad8:	015b      	lsls	r3, r3, #5
 8003ada:	440b      	add	r3, r1
 8003adc:	330c      	adds	r3, #12
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7ff fdf5 	bl	80036d2 <LL_GPIO_IsInputPinSet>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000208 	.word	0x20000208

08003b00 <EPOS4_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

EPOS4_Error_e EPOS4_Init(uint8_t deviceIndex, EPOS4_Init_t *Device_Init)
{
 8003b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b02:	b093      	sub	sp, #76	; 0x4c
 8003b04:	af0a      	add	r7, sp, #40	; 0x28
 8003b06:	4603      	mov	r3, r0
 8003b08:	6039      	str	r1, [r7, #0]
 8003b0a:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > EPOS4_NUMBER_OF_DEVICES)
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d900      	bls.n	8003b14 <EPOS4_Init+0x14>
		while(1);
 8003b12:	e7fe      	b.n	8003b12 <EPOS4_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(EPOS4_Init_t));
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	019b      	lsls	r3, r3, #6
 8003b18:	4a5d      	ldr	r2, [pc, #372]	; (8003c90 <EPOS4_Init+0x190>)
 8003b1a:	4413      	add	r3, r2
 8003b1c:	223c      	movs	r2, #60	; 0x3c
 8003b1e:	6839      	ldr	r1, [r7, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f002 fff1 	bl	8006b08 <memcpy>

	Device[deviceIndex].cobId = Device[deviceIndex].nodeId + 0x0600;
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	4a59      	ldr	r2, [pc, #356]	; (8003c90 <EPOS4_Init+0x190>)
 8003b2a:	019b      	lsls	r3, r3, #6
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8003b38:	b291      	uxth	r1, r2
 8003b3a:	4a55      	ldr	r2, [pc, #340]	; (8003c90 <EPOS4_Init+0x190>)
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	4413      	add	r3, r2
 8003b40:	333a      	adds	r3, #58	; 0x3a
 8003b42:	460a      	mov	r2, r1
 8003b44:	801a      	strh	r2, [r3, #0]

	uint8_t epos4ProductCodeError = 1;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77fb      	strb	r3, [r7, #31]
	uint16_t hwVersions[6] = {0x6050, 0x6150, 0x6551, 0x6552, 0x6350, 0x6450};
 8003b4a:	4a52      	ldr	r2, [pc, #328]	; (8003c94 <EPOS4_Init+0x194>)
 8003b4c:	f107 0310 	add.w	r3, r7, #16
 8003b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t value;
	ReadObjectValue(deviceIndex, IDENTITY_OBJECT_INDEX, PRODUCT_CODE_SUBINDEX, &value);
 8003b56:	f107 030c 	add.w	r3, r7, #12
 8003b5a:	79f8      	ldrb	r0, [r7, #7]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f241 0118 	movw	r1, #4120	; 0x1018
 8003b62:	f000 f925 	bl	8003db0 <ReadObjectValue>
	value = value >> 16;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 6; i++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77bb      	strb	r3, [r7, #30]
 8003b70:	e00f      	b.n	8003b92 <EPOS4_Init+0x92>
	{
		if(value == hwVersions[i])
 8003b72:	7fbb      	ldrb	r3, [r7, #30]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	3320      	adds	r3, #32
 8003b78:	443b      	add	r3, r7
 8003b7a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d102      	bne.n	8003b8c <EPOS4_Init+0x8c>
		{
			epos4ProductCodeError = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	77fb      	strb	r3, [r7, #31]
			break;
 8003b8a:	e005      	b.n	8003b98 <EPOS4_Init+0x98>
	for(uint8_t i = 0; i < 6; i++)
 8003b8c:	7fbb      	ldrb	r3, [r7, #30]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	77bb      	strb	r3, [r7, #30]
 8003b92:	7fbb      	ldrb	r3, [r7, #30]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d9ec      	bls.n	8003b72 <EPOS4_Init+0x72>
		}
	}
	if(epos4ProductCodeError)
 8003b98:	7ffb      	ldrb	r3, [r7, #31]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <EPOS4_Init+0xa2>
		return EPOS4_ProductCodeError;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e072      	b.n	8003c88 <EPOS4_Init+0x188>

	ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	79f8      	ldrb	r0, [r7, #7]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f246 0141 	movw	r1, #24641	; 0x6041
 8003bae:	f000 f8ff 	bl	8003db0 <ReadObjectValue>
	value = value & STATE_MASK;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003bb8:	60fb      	str	r3, [r7, #12]
	if((value == STATE_FAULT) || (value == STATE_FAULT_REACTION_ACTIVE))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d002      	beq.n	8003bc6 <EPOS4_Init+0xc6>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b0f      	cmp	r3, #15
 8003bc4:	d101      	bne.n	8003bca <EPOS4_Init+0xca>
		return EPOS4_InitFaultDetected;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e05e      	b.n	8003c88 <EPOS4_Init+0x188>

	DisableVoltage(deviceIndex);
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa32 	bl	8004036 <DisableVoltage>
	do
	{
		ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	79f8      	ldrb	r0, [r7, #7]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f246 0141 	movw	r1, #24641	; 0x6041
 8003bde:	f000 f8e7 	bl	8003db0 <ReadObjectValue>
		value = value & STATE_MASK;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003be8:	60fb      	str	r3, [r7, #12]
	} while(value != STATE_SWITCH_ON_DISABLED);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d1f0      	bne.n	8003bd2 <EPOS4_Init+0xd2>

	if(Device[deviceIndex].Requirements.isFirstStepRequired)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <EPOS4_Init+0x190>)
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01a      	beq.n	8003c36 <EPOS4_Init+0x136>
		if(WriteFirstStepObjects(deviceIndex, Device[deviceIndex].FirstStep))
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <EPOS4_Init+0x190>)
 8003c04:	019b      	lsls	r3, r3, #6
 8003c06:	18d6      	adds	r6, r2, r3
 8003c08:	f897 c007 	ldrb.w	ip, [r7, #7]
 8003c0c:	466d      	mov	r5, sp
 8003c0e:	f106 0410 	add.w	r4, r6, #16
 8003c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c22:	1d33      	adds	r3, r6, #4
 8003c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c26:	4660      	mov	r0, ip
 8003c28:	f000 fab2 	bl	8004190 <WriteFirstStepObjects>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <EPOS4_Init+0x136>
			return EPOS4_FirstStepError;
 8003c32:	2305      	movs	r3, #5
 8003c34:	e028      	b.n	8003c88 <EPOS4_Init+0x188>

	if(WriteOptionCodes(deviceIndex))
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fc01 	bl	8004440 <WriteOptionCodes>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <EPOS4_Init+0x148>
		return EPOS4_OptionCodesError;
 8003c44:	2306      	movs	r3, #6
 8003c46:	e01f      	b.n	8003c88 <EPOS4_Init+0x188>

	if(Device[deviceIndex].Requirements.isModeOfOperationRequired)
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <EPOS4_Init+0x190>)
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	4413      	add	r3, r2
 8003c50:	3303      	adds	r3, #3
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00f      	beq.n	8003c78 <EPOS4_Init+0x178>
		if(WriteModeOfOperation(deviceIndex, Device[deviceIndex].ModeOfOperation))
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <EPOS4_Init+0x190>)
 8003c5c:	019b      	lsls	r3, r3, #6
 8003c5e:	4413      	add	r3, r2
 8003c60:	3338      	adds	r3, #56	; 0x38
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fc43 	bl	80044f4 <WriteModeOfOperation>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <EPOS4_Init+0x178>
			return EPOS4_ModeOfOperationError;
 8003c74:	2307      	movs	r3, #7
 8003c76:	e007      	b.n	8003c88 <EPOS4_Init+0x188>

	Device[deviceIndex].isInit = 1;
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <EPOS4_Init+0x190>)
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	4413      	add	r3, r2
 8003c80:	333c      	adds	r3, #60	; 0x3c
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

	return EPOS4_NoError;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3724      	adds	r7, #36	; 0x24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c90:	20000248 	.word	0x20000248
 8003c94:	08006b4c 	.word	0x08006b4c

08003c98 <EPOS4_WriteTargetTorqueValue>:

EPOS4_Error_e EPOS4_WriteTargetTorqueValue(uint8_t deviceIndex, int16_t torque)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	71fb      	strb	r3, [r7, #7]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	80bb      	strh	r3, [r7, #4]
	if(!Device[deviceIndex].isInit)
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <EPOS4_WriteTargetTorqueValue+0x4c>)
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	4413      	add	r3, r2
 8003cb0:	333c      	adds	r3, #60	; 0x3c
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d100      	bne.n	8003cba <EPOS4_WriteTargetTorqueValue+0x22>
		while(1);
 8003cb8:	e7fe      	b.n	8003cb8 <EPOS4_WriteTargetTorqueValue+0x20>

	EPOS4_Error_e error = WriteObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, torque);
 8003cba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cbe:	79f8      	ldrb	r0, [r7, #7]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f246 0171 	movw	r1, #24689	; 0x6071
 8003cc6:	f000 f8a9 	bl	8003e1c <WriteObjectValue>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]
	if(error)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <EPOS4_WriteTargetTorqueValue+0x40>
		return error;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	e000      	b.n	8003cda <EPOS4_WriteTargetTorqueValue+0x42>

	return EPOS4_NoError;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000248 	.word	0x20000248

08003ce8 <EPOS4_ReadTorqueActualValue>:

EPOS4_Error_e EPOS4_ReadTorqueActualValue(uint8_t deviceIndex, int16_t *torque)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	6039      	str	r1, [r7, #0]
 8003cf2:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <EPOS4_ReadTorqueActualValue+0x50>)
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	4413      	add	r3, r2
 8003cfc:	333c      	adds	r3, #60	; 0x3c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d100      	bne.n	8003d06 <EPOS4_ReadTorqueActualValue+0x1e>
		while(1);
 8003d04:	e7fe      	b.n	8003d04 <EPOS4_ReadTorqueActualValue+0x1c>

	uint32_t value;
	EPOS4_Error_e error = ReadObjectValue(deviceIndex, TORQUE_ACTUAL_VALUE_INDEX, 0, &value);
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	79f8      	ldrb	r0, [r7, #7]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f246 0177 	movw	r1, #24695	; 0x6077
 8003d12:	f000 f84d 	bl	8003db0 <ReadObjectValue>
 8003d16:	4603      	mov	r3, r0
 8003d18:	73fb      	strb	r3, [r7, #15]
	if(error)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <EPOS4_ReadTorqueActualValue+0x3c>
		return error;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	e004      	b.n	8003d2e <EPOS4_ReadTorqueActualValue+0x46>

	torque[0] = (int16_t) value;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	b21a      	sxth	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	801a      	strh	r2, [r3, #0]

	return EPOS4_NoError;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000248 	.word	0x20000248

08003d3c <EPOS4_DisableVoltage>:


EPOS4_Error_e EPOS4_DisableVoltage(uint8_t deviceIndex)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <EPOS4_DisableVoltage+0x30>)
 8003d4a:	019b      	lsls	r3, r3, #6
 8003d4c:	4413      	add	r3, r2
 8003d4e:	333c      	adds	r3, #60	; 0x3c
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d100      	bne.n	8003d58 <EPOS4_DisableVoltage+0x1c>
		while(1);
 8003d56:	e7fe      	b.n	8003d56 <EPOS4_DisableVoltage+0x1a>

	return DisableVoltage(deviceIndex);
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f96b 	bl	8004036 <DisableVoltage>
 8003d60:	4603      	mov	r3, r0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000248 	.word	0x20000248

08003d70 <EPOS4_ReadObjectValue>:

EPOS4_Error_e EPOS4_ReadObjectValue(uint8_t deviceIndex, uint16_t objectIndex, uint8_t objectSubindex, uint32_t *value)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4603      	mov	r3, r0
 8003d7a:	71fb      	strb	r3, [r7, #7]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	80bb      	strh	r3, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <EPOS4_ReadObjectValue+0x3c>)
 8003d88:	019b      	lsls	r3, r3, #6
 8003d8a:	4413      	add	r3, r2
 8003d8c:	333c      	adds	r3, #60	; 0x3c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d100      	bne.n	8003d96 <EPOS4_ReadObjectValue+0x26>
		while(1);
 8003d94:	e7fe      	b.n	8003d94 <EPOS4_ReadObjectValue+0x24>

	return ReadObjectValue(deviceIndex, objectIndex, objectSubindex, value);
 8003d96:	79ba      	ldrb	r2, [r7, #6]
 8003d98:	88b9      	ldrh	r1, [r7, #4]
 8003d9a:	79f8      	ldrb	r0, [r7, #7]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f000 f807 	bl	8003db0 <ReadObjectValue>
 8003da2:	4603      	mov	r3, r0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000248 	.word	0x20000248

08003db0 <ReadObjectValue>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static EPOS4_Error_e ReadObjectValue(uint8_t deviceIndex, uint16_t objectIndex, uint8_t objectSubindex, uint32_t *value)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4603      	mov	r3, r0
 8003dba:	71fb      	strb	r3, [r7, #7]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	80bb      	strh	r3, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	71bb      	strb	r3, [r7, #6]
	MCP25625_RXBx_t RXBx;
	SDO_Upload(deviceIndex, objectIndex, objectSubindex, &RXBx);
 8003dc4:	f107 0308 	add.w	r3, r7, #8
 8003dc8:	79ba      	ldrb	r2, [r7, #6]
 8003dca:	88b9      	ldrh	r1, [r7, #4]
 8003dcc:	79f8      	ldrb	r0, [r7, #7]
 8003dce:	f000 f877 	bl	8003ec0 <SDO_Upload>

	if(CheckForFault(deviceIndex, &RXBx))
 8003dd2:	f107 0208 	add.w	r2, r7, #8
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f944 	bl	8004068 <CheckForFault>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <ReadObjectValue+0x3a>
		return EPOS4_FaultError;
 8003de6:	2308      	movs	r3, #8
 8003de8:	e014      	b.n	8003e14 <ReadObjectValue+0x64>
	if(CheckForAbort(deviceIndex, RXBx.Struct.RXBxDn_Reg))
 8003dea:	f107 0308 	add.w	r3, r7, #8
 8003dee:	1d5a      	adds	r2, r3, #5
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f99d 	bl	8004134 <CheckForAbort>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <ReadObjectValue+0x54>
		return EPOS4_AbortError;
 8003e00:	2309      	movs	r3, #9
 8003e02:	e007      	b.n	8003e14 <ReadObjectValue+0x64>

	ParseValueFromData(value, RXBx.Struct.RXBxDn_Reg);
 8003e04:	f107 0308 	add.w	r3, r7, #8
 8003e08:	3305      	adds	r3, #5
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6838      	ldr	r0, [r7, #0]
 8003e0e:	f000 f836 	bl	8003e7e <ParseValueFromData>

	return EPOS4_NoError;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <WriteObjectValue>:

static EPOS4_Error_e WriteObjectValue(uint8_t deviceIndex, uint16_t objectIndex, uint8_t objectSubindex, uint32_t value)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4603      	mov	r3, r0
 8003e26:	71fb      	strb	r3, [r7, #7]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	80bb      	strh	r3, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71bb      	strb	r3, [r7, #6]
	MCP25625_RXBx_t	RXBx;
	SDO_Download(deviceIndex, objectIndex, objectSubindex, value, &RXBx);
 8003e30:	79ba      	ldrb	r2, [r7, #6]
 8003e32:	88b9      	ldrh	r1, [r7, #4]
 8003e34:	79f8      	ldrb	r0, [r7, #7]
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	f000 f87d 	bl	8003f3c <SDO_Download>

	if(CheckForFault(deviceIndex, &RXBx))
 8003e42:	f107 0208 	add.w	r2, r7, #8
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f90c 	bl	8004068 <CheckForFault>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <WriteObjectValue+0x3e>
		return EPOS4_FaultError;
 8003e56:	2308      	movs	r3, #8
 8003e58:	e00d      	b.n	8003e76 <WriteObjectValue+0x5a>
	if(CheckForAbort(deviceIndex, RXBx.Struct.RXBxDn_Reg))
 8003e5a:	f107 0308 	add.w	r3, r7, #8
 8003e5e:	1d5a      	adds	r2, r3, #5
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f965 	bl	8004134 <CheckForAbort>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <WriteObjectValue+0x58>
		return EPOS4_AbortError;
 8003e70:	2309      	movs	r3, #9
 8003e72:	e000      	b.n	8003e76 <WriteObjectValue+0x5a>

	return EPOS4_NoError;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <ParseValueFromData>:

static void ParseValueFromData(uint32_t *value, uint8_t *data)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
	value[0] = ((data[7] << 24) + (data[6] << 16) + (data[5] << 8) + data[4]);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	3307      	adds	r3, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	061a      	lsls	r2, r3, #24
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	3306      	adds	r3, #6
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	441a      	add	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	3305      	adds	r3, #5
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	4413      	add	r3, r2
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	3204      	adds	r2, #4
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <SDO_Upload>:

static void SDO_Upload(uint8_t deviceIndex, uint16_t index, uint8_t subindex, MCP25625_RXBx_t *RXBx)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	80bb      	strh	r3, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[8];
	FrameData(data, CLIENT_UPLOAD, index, subindex, 0);
 8003ed4:	79bb      	ldrb	r3, [r7, #6]
 8003ed6:	88ba      	ldrh	r2, [r7, #4]
 8003ed8:	f107 0008 	add.w	r0, r7, #8
 8003edc:	2100      	movs	r1, #0
 8003ede:	9100      	str	r1, [sp, #0]
 8003ee0:	2140      	movs	r1, #64	; 0x40
 8003ee2:	f000 f86b 	bl	8003fbc <FrameData>
	while(MCP25625_LoadTxBufferAtSIDH(Device[deviceIndex].mcpIndex, Device[deviceIndex].cobId, data, 8));
 8003ee6:	bf00      	nop
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <SDO_Upload+0x78>)
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	4413      	add	r3, r2
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	7818      	ldrb	r0, [r3, #0]
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <SDO_Upload+0x78>)
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	4413      	add	r3, r2
 8003efc:	333a      	adds	r3, #58	; 0x3a
 8003efe:	8819      	ldrh	r1, [r3, #0]
 8003f00:	f107 0208 	add.w	r2, r7, #8
 8003f04:	2308      	movs	r3, #8
 8003f06:	f000 fc85 	bl	8004814 <MCP25625_LoadTxBufferAtSIDH>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1eb      	bne.n	8003ee8 <SDO_Upload+0x28>
	while(MCP25625_ReadRxBufferAtSIDH(Device[deviceIndex].mcpIndex, RXBx, 8));
 8003f10:	bf00      	nop
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <SDO_Upload+0x78>)
 8003f16:	019b      	lsls	r3, r3, #6
 8003f18:	4413      	add	r3, r2
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2208      	movs	r2, #8
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fd66 	bl	80049f4 <MCP25625_ReadRxBufferAtSIDH>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f1      	bne.n	8003f12 <SDO_Upload+0x52>
}
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000248 	.word	0x20000248

08003f3c <SDO_Download>:

static void SDO_Download(uint8_t deviceIndex, uint16_t index, uint8_t subindex, uint32_t value, MCP25625_RXBx_t *RXBx)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4603      	mov	r3, r0
 8003f46:	71fb      	strb	r3, [r7, #7]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	80bb      	strh	r3, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[8];
	FrameData(data, EXPEDITED_CLIENT_DOWNLOAD, index, subindex, value);
 8003f50:	79b9      	ldrb	r1, [r7, #6]
 8003f52:	88ba      	ldrh	r2, [r7, #4]
 8003f54:	f107 0008 	add.w	r0, r7, #8
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	2122      	movs	r1, #34	; 0x22
 8003f60:	f000 f82c 	bl	8003fbc <FrameData>
	while(MCP25625_LoadTxBufferAtSIDH(Device[deviceIndex].mcpIndex, Device[deviceIndex].cobId, data, 8));
 8003f64:	bf00      	nop
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	4a13      	ldr	r2, [pc, #76]	; (8003fb8 <SDO_Download+0x7c>)
 8003f6a:	019b      	lsls	r3, r3, #6
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3301      	adds	r3, #1
 8003f70:	7818      	ldrb	r0, [r3, #0]
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <SDO_Download+0x7c>)
 8003f76:	019b      	lsls	r3, r3, #6
 8003f78:	4413      	add	r3, r2
 8003f7a:	333a      	adds	r3, #58	; 0x3a
 8003f7c:	8819      	ldrh	r1, [r3, #0]
 8003f7e:	f107 0208 	add.w	r2, r7, #8
 8003f82:	2308      	movs	r3, #8
 8003f84:	f000 fc46 	bl	8004814 <MCP25625_LoadTxBufferAtSIDH>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1eb      	bne.n	8003f66 <SDO_Download+0x2a>
	while(MCP25625_ReadRxBufferAtSIDH(Device[deviceIndex].mcpIndex, RXBx, 8));
 8003f8e:	bf00      	nop
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <SDO_Download+0x7c>)
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	4413      	add	r3, r2
 8003f98:	3301      	adds	r3, #1
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	69b9      	ldr	r1, [r7, #24]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fd27 	bl	80049f4 <MCP25625_ReadRxBufferAtSIDH>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f1      	bne.n	8003f90 <SDO_Download+0x54>
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000248 	.word	0x20000248

08003fbc <FrameData>:

static void FrameData(uint8_t *data, uint8_t byte0, uint16_t index, uint8_t subindex, uint32_t value)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	70fb      	strb	r3, [r7, #3]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	803b      	strh	r3, [r7, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	70bb      	strb	r3, [r7, #2]
	data[0] = byte0;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	701a      	strb	r2, [r3, #0]
	data[1] = (0x00 | index);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	883a      	ldrh	r2, [r7, #0]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
	data[2] = (0x00 | index >> 8);
 8003fe6:	883b      	ldrh	r3, [r7, #0]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3302      	adds	r3, #2
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]
	data[3] = subindex;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3303      	adds	r3, #3
 8003ff8:	78ba      	ldrb	r2, [r7, #2]
 8003ffa:	701a      	strb	r2, [r3, #0]
	data[4] = (0x00 | value);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]
	data[5] = (0x00 | value >> 8);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	0a1a      	lsrs	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3305      	adds	r3, #5
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
	data[6] = (0x00 | value >> 16);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	0c1a      	lsrs	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3306      	adds	r3, #6
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
	data[7] = (0x00 | value >> 24);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	0e1a      	lsrs	r2, r3, #24
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3307      	adds	r3, #7
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <DisableVoltage>:

static EPOS4_Error_e DisableVoltage(uint8_t deviceIndex)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	71fb      	strb	r3, [r7, #7]
	EPOS4_Error_e error = WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_DISABLE_VOLTAGE);
 8004040:	79f8      	ldrb	r0, [r7, #7]
 8004042:	2300      	movs	r3, #0
 8004044:	2200      	movs	r2, #0
 8004046:	f246 0140 	movw	r1, #24640	; 0x6040
 800404a:	f7ff fee7 	bl	8003e1c <WriteObjectValue>
 800404e:	4603      	mov	r3, r0
 8004050:	73fb      	strb	r3, [r7, #15]
	if(error)
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <DisableVoltage+0x26>
		return error;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	e000      	b.n	800405e <DisableVoltage+0x28>

	return EPOS4_NoError;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <CheckForFault>:

static EPOS4_Error_e CheckForFault(uint8_t deviceIndex, MCP25625_RXBx_t *RXBx)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	71fb      	strb	r3, [r7, #7]
	uint8_t cobIdEmcy = Device[deviceIndex].nodeId + 0x80;
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	4a27      	ldr	r2, [pc, #156]	; (8004114 <CheckForFault+0xac>)
 8004078:	019b      	lsls	r3, r3, #6
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	3b80      	subs	r3, #128	; 0x80
 8004080:	73fb      	strb	r3, [r7, #15]
	uint16_t cobId = (uint16_t) ((RXBx->Struct.RXBxSIDH_Reg << 3) + (RXBx->Struct.RXBxSIDL_Reg.value >> 5));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	b29a      	uxth	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	b2db      	uxtb	r3, r3
 8004094:	b29b      	uxth	r3, r3
 8004096:	4413      	add	r3, r2
 8004098:	81bb      	strh	r3, [r7, #12]
	if(cobId == cobIdEmcy)
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	b29b      	uxth	r3, r3
 800409e:	89ba      	ldrh	r2, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d132      	bne.n	800410a <CheckForFault+0xa2>
	{
		EPOS4_ReadObjectValue(deviceIndex, ERROR_REG_INDEX, 0, &CM_epos4_errorReg);
 80040a4:	79f8      	ldrb	r0, [r7, #7]
 80040a6:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <CheckForFault+0xb0>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	f241 0101 	movw	r1, #4097	; 0x1001
 80040ae:	f7ff fe5f 	bl	8003d70 <EPOS4_ReadObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, ERROR_HISTORY_INDEX, NUMBER_OF_ERRORS_SUBINDEX, &CM_epos4_numOfErrors);
 80040b2:	79f8      	ldrb	r0, [r7, #7]
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <CheckForFault+0xb4>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	f241 0103 	movw	r1, #4099	; 0x1003
 80040bc:	f7ff fe58 	bl	8003d70 <EPOS4_ReadObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, ERROR_HISTORY_INDEX, ERROR_HISTORY_1_SUBINDEX, &CM_epos4_errorHistory[0]);
 80040c0:	79f8      	ldrb	r0, [r7, #7]
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <CheckForFault+0xb8>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	f241 0103 	movw	r1, #4099	; 0x1003
 80040ca:	f7ff fe51 	bl	8003d70 <EPOS4_ReadObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, ERROR_HISTORY_INDEX, ERROR_HISTORY_2_SUBINDEX, &CM_epos4_errorHistory[1]);
 80040ce:	79f8      	ldrb	r0, [r7, #7]
 80040d0:	4b14      	ldr	r3, [pc, #80]	; (8004124 <CheckForFault+0xbc>)
 80040d2:	2202      	movs	r2, #2
 80040d4:	f241 0103 	movw	r1, #4099	; 0x1003
 80040d8:	f7ff fe4a 	bl	8003d70 <EPOS4_ReadObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, ERROR_HISTORY_INDEX, ERROR_HISTORY_3_SUBINDEX, &CM_epos4_errorHistory[2]);
 80040dc:	79f8      	ldrb	r0, [r7, #7]
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <CheckForFault+0xc0>)
 80040e0:	2203      	movs	r2, #3
 80040e2:	f241 0103 	movw	r1, #4099	; 0x1003
 80040e6:	f7ff fe43 	bl	8003d70 <EPOS4_ReadObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, ERROR_HISTORY_INDEX, ERROR_HISTORY_4_SUBINDEX, &CM_epos4_errorHistory[3]);
 80040ea:	79f8      	ldrb	r0, [r7, #7]
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <CheckForFault+0xc4>)
 80040ee:	2204      	movs	r2, #4
 80040f0:	f241 0103 	movw	r1, #4099	; 0x1003
 80040f4:	f7ff fe3c 	bl	8003d70 <EPOS4_ReadObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, ERROR_HISTORY_INDEX, ERROR_HISTORY_5_SUBINDEX, &CM_epos4_errorHistory[4]);
 80040f8:	79f8      	ldrb	r0, [r7, #7]
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <CheckForFault+0xc8>)
 80040fc:	2205      	movs	r2, #5
 80040fe:	f241 0103 	movw	r1, #4099	; 0x1003
 8004102:	f7ff fe35 	bl	8003d70 <EPOS4_ReadObjectValue>

		return EPOS4_FaultError;
 8004106:	2308      	movs	r3, #8
 8004108:	e000      	b.n	800410c <CheckForFault+0xa4>
	}

	return EPOS4_NoError;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000248 	.word	0x20000248
 8004118:	200002d0 	.word	0x200002d0
 800411c:	200002e8 	.word	0x200002e8
 8004120:	200002d4 	.word	0x200002d4
 8004124:	200002d8 	.word	0x200002d8
 8004128:	200002dc 	.word	0x200002dc
 800412c:	200002e0 	.word	0x200002e0
 8004130:	200002e4 	.word	0x200002e4

08004134 <CheckForAbort>:

static EPOS4_Error_e CheckForAbort(uint8_t deviceIndex, uint8_t *data)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	71fb      	strb	r3, [r7, #7]
	if(data[0] >> 7)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b25b      	sxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	da17      	bge.n	800417a <CheckForAbort+0x46>
	{
		CM_epos4_abortIndex = (uint16_t) ((data[2] << 8) + data[1]);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	3302      	adds	r3, #2
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	b29a      	uxth	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	4413      	add	r3, r2
 8004160:	b29a      	uxth	r2, r3
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <CheckForAbort+0x50>)
 8004164:	801a      	strh	r2, [r3, #0]
		CM_epos4_abortSubindex = data[3];
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	78da      	ldrb	r2, [r3, #3]
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <CheckForAbort+0x54>)
 800416c:	701a      	strb	r2, [r3, #0]
		ParseValueFromData(&CM_epos4_abortCode, data);
 800416e:	6839      	ldr	r1, [r7, #0]
 8004170:	4806      	ldr	r0, [pc, #24]	; (800418c <CheckForAbort+0x58>)
 8004172:	f7ff fe84 	bl	8003e7e <ParseValueFromData>

		return EPOS4_AbortError;
 8004176:	2309      	movs	r3, #9
 8004178:	e000      	b.n	800417c <CheckForAbort+0x48>
	}

	return EPOS4_NoError;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200002ca 	.word	0x200002ca
 8004188:	200002c8 	.word	0x200002c8
 800418c:	200002cc 	.word	0x200002cc

08004190 <WriteFirstStepObjects>:

static uint8_t WriteFirstStepObjects(uint8_t deviceIndex, EPOS4_FirstStep_t FirstStep)
{
 8004190:	b084      	sub	sp, #16
 8004192:	b590      	push	{r4, r7, lr}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	4604      	mov	r4, r0
 800419a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800419e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80041a2:	4623      	mov	r3, r4
 80041a4:	71fb      	strb	r3, [r7, #7]
	uint32_t value;

	WriteObjectValue(deviceIndex, CAN_BITRATE_INDEX, 0, FirstStep.CAN_BitRate);
 80041a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041aa:	79f8      	ldrb	r0, [r7, #7]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f242 0101 	movw	r1, #8193	; 0x2001
 80041b2:	f7ff fe33 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, CAN_BITRATE_INDEX, 0, &value);
 80041b6:	f107 030c 	add.w	r3, r7, #12
 80041ba:	79f8      	ldrb	r0, [r7, #7]
 80041bc:	2200      	movs	r2, #0
 80041be:	f242 0101 	movw	r1, #8193	; 0x2001
 80041c2:	f7ff fdf5 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.CAN_BitRate)
 80041c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d001      	beq.n	80041d6 <WriteFirstStepObjects+0x46>
		return 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e12d      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_TYPE_INDEX, 0, FirstStep.MotorType);
 80041d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80041da:	79f8      	ldrb	r0, [r7, #7]
 80041dc:	2200      	movs	r2, #0
 80041de:	f246 4102 	movw	r1, #25602	; 0x6402
 80041e2:	f7ff fe1b 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_TYPE_INDEX, 0, &value);
 80041e6:	f107 030c 	add.w	r3, r7, #12
 80041ea:	79f8      	ldrb	r0, [r7, #7]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f246 4102 	movw	r1, #25602	; 0x6402
 80041f2:	f7ff fddd 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.MotorType)
 80041f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <WriteFirstStepObjects+0x76>
		return 1;
 8004202:	2301      	movs	r3, #1
 8004204:	e115      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, NOMINAL_CURRENT_SUBINDEX, FirstStep.nominalCurrent);
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	79f8      	ldrb	r0, [r7, #7]
 800420a:	2201      	movs	r2, #1
 800420c:	f243 0101 	movw	r1, #12289	; 0x3001
 8004210:	f7ff fe04 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, NOMINAL_CURRENT_SUBINDEX, &value);
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	79f8      	ldrb	r0, [r7, #7]
 800421a:	2201      	movs	r2, #1
 800421c:	f243 0101 	movw	r1, #12289	; 0x3001
 8004220:	f7ff fdc6 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.nominalCurrent)
 8004224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <WriteFirstStepObjects+0xa0>
		return 1;
 800422c:	2301      	movs	r3, #1
 800422e:	e100      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, OUTPUT_CURRENT_LIMIT_SUBINDEX, FirstStep.outputCurrentLimit);
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	79f8      	ldrb	r0, [r7, #7]
 8004234:	2202      	movs	r2, #2
 8004236:	f243 0101 	movw	r1, #12289	; 0x3001
 800423a:	f7ff fdef 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, OUTPUT_CURRENT_LIMIT_SUBINDEX, &value);
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	79f8      	ldrb	r0, [r7, #7]
 8004244:	2202      	movs	r2, #2
 8004246:	f243 0101 	movw	r1, #12289	; 0x3001
 800424a:	f7ff fdb1 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.outputCurrentLimit)
 800424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	429a      	cmp	r2, r3
 8004254:	d001      	beq.n	800425a <WriteFirstStepObjects+0xca>
		return 1;
 8004256:	2301      	movs	r3, #1
 8004258:	e0eb      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, NUMBER_OF_POLE_PAIRS_SUBINDEX, FirstStep.numberOfPolePairs);
 800425a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800425e:	79f8      	ldrb	r0, [r7, #7]
 8004260:	2203      	movs	r2, #3
 8004262:	f243 0101 	movw	r1, #12289	; 0x3001
 8004266:	f7ff fdd9 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, NUMBER_OF_POLE_PAIRS_SUBINDEX, &value);
 800426a:	f107 030c 	add.w	r3, r7, #12
 800426e:	79f8      	ldrb	r0, [r7, #7]
 8004270:	2203      	movs	r2, #3
 8004272:	f243 0101 	movw	r1, #12289	; 0x3001
 8004276:	f7ff fd9b 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.numberOfPolePairs)
 800427a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <WriteFirstStepObjects+0xfa>
		return 1;
 8004286:	2301      	movs	r3, #1
 8004288:	e0d3      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, THERMAL_TIME_CONSTANT_WINDING_SUBINDEX, FirstStep.thermalTimeConstantWinding);
 800428a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800428c:	79f8      	ldrb	r0, [r7, #7]
 800428e:	2204      	movs	r2, #4
 8004290:	f243 0101 	movw	r1, #12289	; 0x3001
 8004294:	f7ff fdc2 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, THERMAL_TIME_CONSTANT_WINDING_SUBINDEX, &value);
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	79f8      	ldrb	r0, [r7, #7]
 800429e:	2204      	movs	r2, #4
 80042a0:	f243 0101 	movw	r1, #12289	; 0x3001
 80042a4:	f7ff fd84 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.thermalTimeConstantWinding)
 80042a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d001      	beq.n	80042b6 <WriteFirstStepObjects+0x126>
		return 1;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e0bd      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX,TORQUE_CONSTANT_SUBINDEX, FirstStep.torqueConstant);
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	79f8      	ldrb	r0, [r7, #7]
 80042ba:	2205      	movs	r2, #5
 80042bc:	f243 0101 	movw	r1, #12289	; 0x3001
 80042c0:	f7ff fdac 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX,TORQUE_CONSTANT_SUBINDEX, &value);
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	79f8      	ldrb	r0, [r7, #7]
 80042ca:	2205      	movs	r2, #5
 80042cc:	f243 0101 	movw	r1, #12289	; 0x3001
 80042d0:	f7ff fd6e 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.torqueConstant)
 80042d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <WriteFirstStepObjects+0x150>
		return 1;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0a8      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MAX_MOTOR_SPEED_INDEX, 0, FirstStep.maxMotorSpeed);
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	79f8      	ldrb	r0, [r7, #7]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 80042ea:	f7ff fd97 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, MAX_MOTOR_SPEED_INDEX, 0, &value);
 80042ee:	f107 030c 	add.w	r3, r7, #12
 80042f2:	79f8      	ldrb	r0, [r7, #7]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 80042fa:	f7ff fd59 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.maxMotorSpeed)
 80042fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	429a      	cmp	r2, r3
 8004304:	d001      	beq.n	800430a <WriteFirstStepObjects+0x17a>
		return 1;
 8004306:	2301      	movs	r3, #1
 8004308:	e093      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, GEAR_CONFIGURATION_INDEX, MAX_GEAR_INPUT_SPEED_SUBINDEX, FirstStep.maxGearInputSpeed);
 800430a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430c:	79f8      	ldrb	r0, [r7, #7]
 800430e:	2203      	movs	r2, #3
 8004310:	f243 0103 	movw	r1, #12291	; 0x3003
 8004314:	f7ff fd82 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, GEAR_CONFIGURATION_INDEX, MAX_GEAR_INPUT_SPEED_SUBINDEX, &value);
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	79f8      	ldrb	r0, [r7, #7]
 800431e:	2203      	movs	r2, #3
 8004320:	f243 0103 	movw	r1, #12291	; 0x3003
 8004324:	f7ff fd44 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.maxGearInputSpeed)
 8004328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <WriteFirstStepObjects+0x1a4>
		return 1;
 8004330:	2301      	movs	r3, #1
 8004332:	e07e      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, SENSOR_CONFIGURATION_SUBINDEX, FirstStep.sensorsConfiguration);
 8004334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004336:	79f8      	ldrb	r0, [r7, #7]
 8004338:	2201      	movs	r2, #1
 800433a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800433e:	f7ff fd6d 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, SENSOR_CONFIGURATION_SUBINDEX, &value);
 8004342:	f107 030c 	add.w	r3, r7, #12
 8004346:	79f8      	ldrb	r0, [r7, #7]
 8004348:	2201      	movs	r2, #1
 800434a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800434e:	f7ff fd2f 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.sensorsConfiguration)
 8004352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	429a      	cmp	r2, r3
 8004358:	d001      	beq.n	800435e <WriteFirstStepObjects+0x1ce>
		return 1;
 800435a:	2301      	movs	r3, #1
 800435c:	e069      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, CONTROL_STRUCTURE_SUBINDEX, FirstStep.controlStructure);
 800435e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004360:	79f8      	ldrb	r0, [r7, #7]
 8004362:	2202      	movs	r2, #2
 8004364:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004368:	f7ff fd58 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, CONTROL_STRUCTURE_SUBINDEX, &value);
 800436c:	f107 030c 	add.w	r3, r7, #12
 8004370:	79f8      	ldrb	r0, [r7, #7]
 8004372:	2202      	movs	r2, #2
 8004374:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004378:	f7ff fd1a 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.controlStructure)
 800437c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <WriteFirstStepObjects+0x1f8>
		return 1;
 8004384:	2301      	movs	r3, #1
 8004386:	e054      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, COMMUTATION_SENSORS_SUBINDEX, FirstStep.commutationSensors);
 8004388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438a:	79f8      	ldrb	r0, [r7, #7]
 800438c:	2203      	movs	r2, #3
 800438e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004392:	f7ff fd43 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, COMMUTATION_SENSORS_SUBINDEX, &value);
 8004396:	f107 030c 	add.w	r3, r7, #12
 800439a:	79f8      	ldrb	r0, [r7, #7]
 800439c:	2203      	movs	r2, #3
 800439e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80043a2:	f7ff fd05 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.commutationSensors)
 80043a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d001      	beq.n	80043b2 <WriteFirstStepObjects+0x222>
		return 1;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e03f      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, AXIS_CONFIG_MISCELLANEOUS_SUBINDEX, FirstStep.axisConfigMiscellaneous);
 80043b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b4:	79f8      	ldrb	r0, [r7, #7]
 80043b6:	2204      	movs	r2, #4
 80043b8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80043bc:	f7ff fd2e 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, AXIS_CONFIG_MISCELLANEOUS_SUBINDEX, &value);
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	79f8      	ldrb	r0, [r7, #7]
 80043c6:	2204      	movs	r2, #4
 80043c8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80043cc:	f7ff fcf0 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.axisConfigMiscellaneous)
 80043d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <WriteFirstStepObjects+0x24c>
		return 1;
 80043d8:	2301      	movs	r3, #1
 80043da:	e02a      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_P_GAIN_SUBINDEX, FirstStep.currentControllerP_Gain);
 80043dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043de:	79f8      	ldrb	r0, [r7, #7]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f243 01a0 	movw	r1, #12448	; 0x30a0
 80043e6:	f7ff fd19 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_P_GAIN_SUBINDEX, &value);
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	79f8      	ldrb	r0, [r7, #7]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f243 01a0 	movw	r1, #12448	; 0x30a0
 80043f6:	f7ff fcdb 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.currentControllerP_Gain)
 80043fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d001      	beq.n	8004406 <WriteFirstStepObjects+0x276>
		return 1;
 8004402:	2301      	movs	r3, #1
 8004404:	e015      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_I_GAIN_SUBINDEX, FirstStep.currentControllerI_Gain);
 8004406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004408:	79f8      	ldrb	r0, [r7, #7]
 800440a:	2202      	movs	r2, #2
 800440c:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004410:	f7ff fd04 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_I_GAIN_SUBINDEX, &value);
 8004414:	f107 030c 	add.w	r3, r7, #12
 8004418:	79f8      	ldrb	r0, [r7, #7]
 800441a:	2202      	movs	r2, #2
 800441c:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004420:	f7ff fcc6 	bl	8003db0 <ReadObjectValue>
	if(value != FirstStep.currentControllerI_Gain)
 8004424:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <WriteFirstStepObjects+0x2a0>
		return 1;
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <WriteFirstStepObjects+0x2a2>

	return 0;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800443c:	b004      	add	sp, #16
 800443e:	4770      	bx	lr

08004440 <WriteOptionCodes>:

static uint8_t WriteOptionCodes(uint8_t deviceIndex)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	WriteObjectValue(deviceIndex, ABORT_CONNECTION_OPTION_CODE_INDEX, 0, 2);
 800444a:	79f8      	ldrb	r0, [r7, #7]
 800444c:	2302      	movs	r3, #2
 800444e:	2200      	movs	r2, #0
 8004450:	f246 0107 	movw	r1, #24583	; 0x6007
 8004454:	f7ff fce2 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, ABORT_CONNECTION_OPTION_CODE_INDEX, 0, &value);
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	79f8      	ldrb	r0, [r7, #7]
 800445e:	2200      	movs	r2, #0
 8004460:	f246 0107 	movw	r1, #24583	; 0x6007
 8004464:	f7ff fca4 	bl	8003db0 <ReadObjectValue>
	if(value != 2)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d001      	beq.n	8004472 <WriteOptionCodes+0x32>
		return 1;
 800446e:	2301      	movs	r3, #1
 8004470:	e03c      	b.n	80044ec <WriteOptionCodes+0xac>

	WriteObjectValue(deviceIndex, SHUTDOWN_OPTION_CODE_INDEX, 0, 0);
 8004472:	79f8      	ldrb	r0, [r7, #7]
 8004474:	2300      	movs	r3, #0
 8004476:	2200      	movs	r2, #0
 8004478:	f246 015b 	movw	r1, #24667	; 0x605b
 800447c:	f7ff fcce 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, SHUTDOWN_OPTION_CODE_INDEX, 0, &value);
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	79f8      	ldrb	r0, [r7, #7]
 8004486:	2200      	movs	r2, #0
 8004488:	f246 015b 	movw	r1, #24667	; 0x605b
 800448c:	f7ff fc90 	bl	8003db0 <ReadObjectValue>
	if(value != 0)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <WriteOptionCodes+0x5a>
		return 1;
 8004496:	2301      	movs	r3, #1
 8004498:	e028      	b.n	80044ec <WriteOptionCodes+0xac>

	WriteObjectValue(deviceIndex, DISABLE_OPERATION_OPTION_CODE_INDEX, 0, 0);
 800449a:	79f8      	ldrb	r0, [r7, #7]
 800449c:	2300      	movs	r3, #0
 800449e:	2200      	movs	r2, #0
 80044a0:	f246 015c 	movw	r1, #24668	; 0x605c
 80044a4:	f7ff fcba 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, DISABLE_OPERATION_OPTION_CODE_INDEX, 0, &value);
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	79f8      	ldrb	r0, [r7, #7]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f246 015c 	movw	r1, #24668	; 0x605c
 80044b4:	f7ff fc7c 	bl	8003db0 <ReadObjectValue>
	if(value != 0)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <WriteOptionCodes+0x82>
		return 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	e014      	b.n	80044ec <WriteOptionCodes+0xac>

	WriteObjectValue(deviceIndex, FAULT_REACTION_OPTION_CODE_INDEX, 0, 0);
 80044c2:	79f8      	ldrb	r0, [r7, #7]
 80044c4:	2300      	movs	r3, #0
 80044c6:	2200      	movs	r2, #0
 80044c8:	f246 015e 	movw	r1, #24670	; 0x605e
 80044cc:	f7ff fca6 	bl	8003e1c <WriteObjectValue>
	ReadObjectValue(deviceIndex, FAULT_REACTION_OPTION_CODE_INDEX, 0, &value);
 80044d0:	f107 030c 	add.w	r3, r7, #12
 80044d4:	79f8      	ldrb	r0, [r7, #7]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f246 015e 	movw	r1, #24670	; 0x605e
 80044dc:	f7ff fc68 	bl	8003db0 <ReadObjectValue>
	if(value != 0)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <WriteOptionCodes+0xaa>
		return 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <WriteOptionCodes+0xac>

	return 0;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <WriteModeOfOperation>:

static uint8_t WriteModeOfOperation(uint8_t deviceIndex, EPOS4_ModeOfOperation_e modeOfOperation)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	460a      	mov	r2, r1
 80044fe:	71fb      	strb	r3, [r7, #7]
 8004500:	4613      	mov	r3, r2
 8004502:	71bb      	strb	r3, [r7, #6]
	uint32_t value;
	switch (modeOfOperation)
 8004504:	79bb      	ldrb	r3, [r7, #6]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d169      	bne.n	80045de <WriteModeOfOperation+0xea>
	{
	case EPOS4_CyclicSynchronousTorqueMode:
		WriteObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, 0);
 800450a:	79f8      	ldrb	r0, [r7, #7]
 800450c:	2300      	movs	r3, #0
 800450e:	2200      	movs	r2, #0
 8004510:	f246 0171 	movw	r1, #24689	; 0x6071
 8004514:	f7ff fc82 	bl	8003e1c <WriteObjectValue>
		ReadObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, &value);
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	79f8      	ldrb	r0, [r7, #7]
 800451e:	2200      	movs	r2, #0
 8004520:	f246 0171 	movw	r1, #24689	; 0x6071
 8004524:	f7ff fc44 	bl	8003db0 <ReadObjectValue>
		if(value != 0)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <WriteModeOfOperation+0x3e>
			return 1;
 800452e:	2301      	movs	r3, #1
 8004530:	e056      	b.n	80045e0 <WriteModeOfOperation+0xec>

		WriteObjectValue(deviceIndex, MODES_OF_OPERATION_INDEX, 0, CST_MODE);
 8004532:	79f8      	ldrb	r0, [r7, #7]
 8004534:	230a      	movs	r3, #10
 8004536:	2200      	movs	r2, #0
 8004538:	f246 0160 	movw	r1, #24672	; 0x6060
 800453c:	f7ff fc6e 	bl	8003e1c <WriteObjectValue>
		ReadObjectValue(deviceIndex, MODES_OF_OPERATION_INDEX, 0, &value);
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	79f8      	ldrb	r0, [r7, #7]
 8004546:	2200      	movs	r2, #0
 8004548:	f246 0160 	movw	r1, #24672	; 0x6060
 800454c:	f7ff fc30 	bl	8003db0 <ReadObjectValue>
		if(value != CST_MODE)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b0a      	cmp	r3, #10
 8004554:	d001      	beq.n	800455a <WriteModeOfOperation+0x66>
			return 1;
 8004556:	2301      	movs	r3, #1
 8004558:	e042      	b.n	80045e0 <WriteModeOfOperation+0xec>

		WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_SHUTDOWN);
 800455a:	79f8      	ldrb	r0, [r7, #7]
 800455c:	2306      	movs	r3, #6
 800455e:	2200      	movs	r2, #0
 8004560:	f246 0140 	movw	r1, #24640	; 0x6040
 8004564:	f7ff fc5a 	bl	8003e1c <WriteObjectValue>
		do
		{
			ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8004568:	f107 030c 	add.w	r3, r7, #12
 800456c:	79f8      	ldrb	r0, [r7, #7]
 800456e:	2200      	movs	r2, #0
 8004570:	f246 0141 	movw	r1, #24641	; 0x6041
 8004574:	f7ff fc1c 	bl	8003db0 <ReadObjectValue>
			value = value & STATE_MASK;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800457e:	60fb      	str	r3, [r7, #12]
		} while(value != STATE_READY_TO_SWITCH_ON);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b21      	cmp	r3, #33	; 0x21
 8004584:	d1f0      	bne.n	8004568 <WriteModeOfOperation+0x74>

		WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_SWITCH_ON_AND_ENABLE);
 8004586:	79f8      	ldrb	r0, [r7, #7]
 8004588:	230f      	movs	r3, #15
 800458a:	2200      	movs	r2, #0
 800458c:	f246 0140 	movw	r1, #24640	; 0x6040
 8004590:	f7ff fc44 	bl	8003e1c <WriteObjectValue>
		do
		{
			ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	79f8      	ldrb	r0, [r7, #7]
 800459a:	2200      	movs	r2, #0
 800459c:	f246 0141 	movw	r1, #24641	; 0x6041
 80045a0:	f7ff fc06 	bl	8003db0 <ReadObjectValue>
			value = value & STATE_MASK;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80045aa:	60fb      	str	r3, [r7, #12]
		} while(value != STATE_OPERATION_ENABLED);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b27      	cmp	r3, #39	; 0x27
 80045b0:	d1f0      	bne.n	8004594 <WriteModeOfOperation+0xa0>

		WriteObjectValue(deviceIndex, TORQUE_OFFSET_INDEX, 0, 0);
 80045b2:	79f8      	ldrb	r0, [r7, #7]
 80045b4:	2300      	movs	r3, #0
 80045b6:	2200      	movs	r2, #0
 80045b8:	f246 01b2 	movw	r1, #24754	; 0x60b2
 80045bc:	f7ff fc2e 	bl	8003e1c <WriteObjectValue>
		ReadObjectValue(deviceIndex, TORQUE_OFFSET_INDEX, 0, &value);
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	79f8      	ldrb	r0, [r7, #7]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f246 01b2 	movw	r1, #24754	; 0x60b2
 80045cc:	f7ff fbf0 	bl	8003db0 <ReadObjectValue>
		if(value != 0)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <WriteModeOfOperation+0xe6>
			return 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e002      	b.n	80045e0 <WriteModeOfOperation+0xec>

		return 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <WriteModeOfOperation+0xec>
	}

	return 1;
 80045de:	2301      	movs	r3, #1
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <LL_GPIO_SetOutputPin>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	619a      	str	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_GPIO_ResetOutputPin>:
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d101      	bne.n	800465e <LL_SPI_IsActiveFlag_TXE+0x18>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	330c      	adds	r3, #12
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b2db      	uxtb	r3, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	330c      	adds	r3, #12
 80046b4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <MCP25625_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

MCP25625_Error_e MCP25625_Init(uint8_t deviceIndex, MCP25625_Init_t *Device_Inits)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > MCP25625_NUMBER_OF_DEVICES)
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d900      	bls.n	80046dc <MCP25625_Init+0x14>
		while(1);
 80046da:	e7fe      	b.n	80046da <MCP25625_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Inits, sizeof(MCP25625_Init_t));
 80046dc:	79fa      	ldrb	r2, [r7, #7]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <MCP25625_Init+0x148>)
 80046e8:	4413      	add	r3, r2
 80046ea:	2210      	movs	r2, #16
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f002 fa0a 	bl	8006b08 <memcpy>

	ClearChipSelect(deviceIndex);
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fd06 	bl	8005108 <ClearChipSelect>
	ResetDevice(deviceIndex);
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fb40 	bl	8004d84 <ResetDevice>

	uint8_t canCtrlReg;
	ReadRegisterData(deviceIndex, CANCTRL_REG, &canCtrlReg, sizeof(canCtrlReg));
 8004704:	f107 0216 	add.w	r2, r7, #22
 8004708:	79f8      	ldrb	r0, [r7, #7]
 800470a:	2301      	movs	r3, #1
 800470c:	210f      	movs	r1, #15
 800470e:	f000 fa0f 	bl	8004b30 <ReadRegisterData>
	if(canCtrlReg != CANCTRL_RESET_VALUE)
 8004712:	7dbb      	ldrb	r3, [r7, #22]
 8004714:	2b87      	cmp	r3, #135	; 0x87
 8004716:	d001      	beq.n	800471c <MCP25625_Init+0x54>
		return MCP25625_ResetError;
 8004718:	2301      	movs	r3, #1
 800471a:	e074      	b.n	8004806 <MCP25625_Init+0x13e>

	InitRXBx(deviceIndex);
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fb1a 	bl	8004d58 <InitRXBx>

	uint8_t configRegs[3];
	uint8_t configRegValues[3] = {Device[deviceIndex].CNF3_Reg.value, Device[deviceIndex].CNF2_Reg.value, Device[deviceIndex].CNF1_Reg.value};
 8004724:	79fa      	ldrb	r2, [r7, #7]
 8004726:	493a      	ldr	r1, [pc, #232]	; (8004810 <MCP25625_Init+0x148>)
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	330d      	adds	r3, #13
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	733b      	strb	r3, [r7, #12]
 8004738:	79fa      	ldrb	r2, [r7, #7]
 800473a:	4935      	ldr	r1, [pc, #212]	; (8004810 <MCP25625_Init+0x148>)
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	330c      	adds	r3, #12
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	737b      	strb	r3, [r7, #13]
 800474c:	79fa      	ldrb	r2, [r7, #7]
 800474e:	4930      	ldr	r1, [pc, #192]	; (8004810 <MCP25625_Init+0x148>)
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	330b      	adds	r3, #11
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	73bb      	strb	r3, [r7, #14]
	WriteRegisterData(deviceIndex, CNF3_REG, configRegValues, sizeof(configRegValues));
 8004760:	f107 020c 	add.w	r2, r7, #12
 8004764:	79f8      	ldrb	r0, [r7, #7]
 8004766:	2303      	movs	r3, #3
 8004768:	2128      	movs	r1, #40	; 0x28
 800476a:	f000 fa71 	bl	8004c50 <WriteRegisterData>
	ReadRegisterData(deviceIndex, CNF3_REG, configRegs, sizeof(configRegs));
 800476e:	f107 0210 	add.w	r2, r7, #16
 8004772:	79f8      	ldrb	r0, [r7, #7]
 8004774:	2303      	movs	r3, #3
 8004776:	2128      	movs	r1, #40	; 0x28
 8004778:	f000 f9da 	bl	8004b30 <ReadRegisterData>
	for(uint8_t i = 0; i < sizeof(configRegs); i++)
 800477c:	2300      	movs	r3, #0
 800477e:	75fb      	strb	r3, [r7, #23]
 8004780:	e010      	b.n	80047a4 <MCP25625_Init+0xdc>
		if(configRegs[i] != configRegValues[i])
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	3318      	adds	r3, #24
 8004786:	443b      	add	r3, r7
 8004788:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	3318      	adds	r3, #24
 8004790:	443b      	add	r3, r7
 8004792:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004796:	429a      	cmp	r2, r3
 8004798:	d001      	beq.n	800479e <MCP25625_Init+0xd6>
			return MCP25625_ConfigError;
 800479a:	2302      	movs	r3, #2
 800479c:	e033      	b.n	8004806 <MCP25625_Init+0x13e>
	for(uint8_t i = 0; i < sizeof(configRegs); i++)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	3301      	adds	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d9eb      	bls.n	8004782 <MCP25625_Init+0xba>

	WriteRegisterData(deviceIndex, CANCTRL_REG, &Device[deviceIndex].CANCTRL_Reg.value, sizeof(Device[deviceIndex].CANCTRL_Reg.value));
 80047aa:	79fa      	ldrb	r2, [r7, #7]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	3308      	adds	r3, #8
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <MCP25625_Init+0x148>)
 80047b8:	4413      	add	r3, r2
 80047ba:	1c9a      	adds	r2, r3, #2
 80047bc:	79f8      	ldrb	r0, [r7, #7]
 80047be:	2301      	movs	r3, #1
 80047c0:	210f      	movs	r1, #15
 80047c2:	f000 fa45 	bl	8004c50 <WriteRegisterData>
	ReadRegisterData(deviceIndex, CANCTRL_REG, &canCtrlReg, sizeof(canCtrlReg));
 80047c6:	f107 0216 	add.w	r2, r7, #22
 80047ca:	79f8      	ldrb	r0, [r7, #7]
 80047cc:	2301      	movs	r3, #1
 80047ce:	210f      	movs	r1, #15
 80047d0:	f000 f9ae 	bl	8004b30 <ReadRegisterData>
	if(canCtrlReg != Device[deviceIndex].CANCTRL_Reg.value)
 80047d4:	79fa      	ldrb	r2, [r7, #7]
 80047d6:	490e      	ldr	r1, [pc, #56]	; (8004810 <MCP25625_Init+0x148>)
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	330a      	adds	r3, #10
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	7dbb      	ldrb	r3, [r7, #22]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <MCP25625_Init+0x128>
		return MCP25625_CANCTRL_Error;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e00a      	b.n	8004806 <MCP25625_Init+0x13e>

	Device[deviceIndex].isInit = 1;
 80047f0:	79fa      	ldrb	r2, [r7, #7]
 80047f2:	4907      	ldr	r1, [pc, #28]	; (8004810 <MCP25625_Init+0x148>)
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	3310      	adds	r3, #16
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]

	return MCP25625_NoError;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200002ec 	.word	0x200002ec

08004814 <MCP25625_LoadTxBufferAtSIDH>:

uint8_t MCP25625_LoadTxBufferAtSIDH(uint8_t deviceIndex, uint16_t id, uint8_t *data, uint8_t dataLength)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	603a      	str	r2, [r7, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
 8004822:	460b      	mov	r3, r1
 8004824:	80bb      	strh	r3, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 800482a:	79fa      	ldrb	r2, [r7, #7]
 800482c:	4970      	ldr	r1, [pc, #448]	; (80049f0 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	3310      	adds	r3, #16
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d100      	bne.n	8004842 <MCP25625_LoadTxBufferAtSIDH+0x2e>
		while(1);
 8004840:	e7fe      	b.n	8004840 <MCP25625_LoadTxBufferAtSIDH+0x2c>

	uint8_t rtsTx = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	77fb      	strb	r3, [r7, #31]
	uint8_t txbxDataAddress = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	77bb      	strb	r3, [r7, #30]
	uint8_t status = ReadStatus(deviceIndex);
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fbc9 	bl	8004fe4 <ReadStatus>
 8004852:	4603      	mov	r3, r0
 8004854:	76fb      	strb	r3, [r7, #27]
	if(!(status & TX2REQ_STATUS_MASK))
 8004856:	7efb      	ldrb	r3, [r7, #27]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d104      	bne.n	800486a <MCP25625_LoadTxBufferAtSIDH+0x56>
	{
		rtsTx = RTS_T2;
 8004860:	2384      	movs	r3, #132	; 0x84
 8004862:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_2_AT_SIDH;
 8004864:	2344      	movs	r3, #68	; 0x44
 8004866:	77bb      	strb	r3, [r7, #30]
 8004868:	e012      	b.n	8004890 <MCP25625_LoadTxBufferAtSIDH+0x7c>
	}
	else if(!(status & TX1REQ_STATUS_MASK))
 800486a:	7efb      	ldrb	r3, [r7, #27]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <MCP25625_LoadTxBufferAtSIDH+0x6a>
	{
		rtsTx = RTS_T1;
 8004874:	2382      	movs	r3, #130	; 0x82
 8004876:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_1_AT_SIDH;
 8004878:	2342      	movs	r3, #66	; 0x42
 800487a:	77bb      	strb	r3, [r7, #30]
 800487c:	e008      	b.n	8004890 <MCP25625_LoadTxBufferAtSIDH+0x7c>
	}
	else if(!(status & TX0REQ_STATUS_MASK))
 800487e:	7efb      	ldrb	r3, [r7, #27]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <MCP25625_LoadTxBufferAtSIDH+0x7c>
	{
		rtsTx = RTS_T0;
 8004888:	2381      	movs	r3, #129	; 0x81
 800488a:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_0_AT_SIDH;
 800488c:	2340      	movs	r3, #64	; 0x40
 800488e:	77bb      	strb	r3, [r7, #30]
	}

	if(txbxDataAddress)
 8004890:	7fbb      	ldrb	r3, [r7, #30]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80a6 	beq.w	80049e4 <MCP25625_LoadTxBufferAtSIDH+0x1d0>
	{
		MCP25625_TXBx_t TXBx;
		memset(&TXBx, 0, sizeof(TXBx));
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	220d      	movs	r2, #13
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f002 f93f 	bl	8006b24 <memset>
		TXBx.Struct.TXBxSIDH_Reg = id >> 3;
 80048a6:	88bb      	ldrh	r3, [r7, #4]
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	733b      	strb	r3, [r7, #12]
		TXBx.Struct.TXBxSIDL_Reg.Bits.EXIDE = MCP25625_TransmitStandardID;
 80048b0:	7b7b      	ldrb	r3, [r7, #13]
 80048b2:	f36f 03c3 	bfc	r3, #3, #1
 80048b6:	737b      	strb	r3, [r7, #13]
		TXBx.Struct.TXBxSIDL_Reg.Bits.SID = id & 0x07;
 80048b8:	88bb      	ldrh	r3, [r7, #4]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	7b7b      	ldrb	r3, [r7, #13]
 80048c2:	f362 1347 	bfi	r3, r2, #5, #3
 80048c6:	737b      	strb	r3, [r7, #13]
		TXBx.Struct.TXBxDLC_Reg.Bits.DLC = dataLength;
 80048c8:	79bb      	ldrb	r3, [r7, #6]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	7c3b      	ldrb	r3, [r7, #16]
 80048d2:	f362 0303 	bfi	r3, r2, #0, #4
 80048d6:	743b      	strb	r3, [r7, #16]
		for(uint8_t i = 0; i < dataLength; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	777b      	strb	r3, [r7, #29]
 80048dc:	e00b      	b.n	80048f6 <MCP25625_LoadTxBufferAtSIDH+0xe2>
			TXBx.Struct.TXBxDn_Reg[i] = data[i];
 80048de:	7f7b      	ldrb	r3, [r7, #29]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	441a      	add	r2, r3
 80048e4:	7f7b      	ldrb	r3, [r7, #29]
 80048e6:	7812      	ldrb	r2, [r2, #0]
 80048e8:	3320      	adds	r3, #32
 80048ea:	443b      	add	r3, r7
 80048ec:	f803 2c0f 	strb.w	r2, [r3, #-15]
		for(uint8_t i = 0; i < dataLength; i++)
 80048f0:	7f7b      	ldrb	r3, [r7, #29]
 80048f2:	3301      	adds	r3, #1
 80048f4:	777b      	strb	r3, [r7, #29]
 80048f6:	7f7a      	ldrb	r2, [r7, #29]
 80048f8:	79bb      	ldrb	r3, [r7, #6]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3ef      	bcc.n	80048de <MCP25625_LoadTxBufferAtSIDH+0xca>

		SetChipSelect(deviceIndex);
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fbe1 	bl	80050c8 <SetChipSelect>

		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, txbxDataAddress);
 8004906:	79fa      	ldrb	r2, [r7, #7]
 8004908:	4939      	ldr	r1, [pc, #228]	; (80049f0 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	7fba      	ldrb	r2, [r7, #30]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fec2 	bl	80046a4 <LL_SPI_TransmitData8>

		uint8_t nBytes = dataLength + 5;
 8004920:	79bb      	ldrb	r3, [r7, #6]
 8004922:	3305      	adds	r3, #5
 8004924:	76bb      	strb	r3, [r7, #26]
		for(uint8_t i = 0; i < nBytes; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	773b      	strb	r3, [r7, #28]
 800492a:	e022      	b.n	8004972 <MCP25625_LoadTxBufferAtSIDH+0x15e>
		{
			while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));
 800492c:	bf00      	nop
 800492e:	79fa      	ldrb	r2, [r7, #7]
 8004930:	492f      	ldr	r1, [pc, #188]	; (80049f0 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fe81 	bl	8004646 <LL_SPI_IsActiveFlag_TXE>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f1      	beq.n	800492e <MCP25625_LoadTxBufferAtSIDH+0x11a>
			LL_SPI_TransmitData8(Device[deviceIndex].SPIx, TXBx.array[i]);
 800494a:	79fa      	ldrb	r2, [r7, #7]
 800494c:	4928      	ldr	r1, [pc, #160]	; (80049f0 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	7f3b      	ldrb	r3, [r7, #28]
 800495c:	3320      	adds	r3, #32
 800495e:	443b      	add	r3, r7
 8004960:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f7ff fe9c 	bl	80046a4 <LL_SPI_TransmitData8>
		for(uint8_t i = 0; i < nBytes; i++)
 800496c:	7f3b      	ldrb	r3, [r7, #28]
 800496e:	3301      	adds	r3, #1
 8004970:	773b      	strb	r3, [r7, #28]
 8004972:	7f3a      	ldrb	r2, [r7, #28]
 8004974:	7ebb      	ldrb	r3, [r7, #26]
 8004976:	429a      	cmp	r2, r3
 8004978:	d3d8      	bcc.n	800492c <MCP25625_LoadTxBufferAtSIDH+0x118>
		}

		while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 800497a:	bf00      	nop
 800497c:	79fa      	ldrb	r2, [r7, #7]
 800497e:	491c      	ldr	r1, [pc, #112]	; (80049f0 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fe6d 	bl	800466c <LL_SPI_GetTxFIFOLevel>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f1      	bne.n	800497c <MCP25625_LoadTxBufferAtSIDH+0x168>
		while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004998:	e00a      	b.n	80049b0 <MCP25625_LoadTxBufferAtSIDH+0x19c>
			LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 800499a:	79fa      	ldrb	r2, [r7, #7]
 800499c:	4914      	ldr	r1, [pc, #80]	; (80049f0 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fe6c 	bl	8004688 <LL_SPI_ReceiveData8>
		while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 80049b0:	79fa      	ldrb	r2, [r7, #7]
 80049b2:	490f      	ldr	r1, [pc, #60]	; (80049f0 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fe2d 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <MCP25625_LoadTxBufferAtSIDH+0x186>

		ClearChipSelect(deviceIndex);
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fb9a 	bl	8005108 <ClearChipSelect>

		RequestToSend(deviceIndex, rtsTx);
 80049d4:	7ffa      	ldrb	r2, [r7, #31]
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 faa6 	bl	8004f2c <RequestToSend>

		return 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	e000      	b.n	80049e6 <MCP25625_LoadTxBufferAtSIDH+0x1d2>
	}

	return 1;
 80049e4:	2301      	movs	r3, #1
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200002ec 	.word	0x200002ec

080049f4 <MCP25625_ReadRxBufferAtSIDH>:

uint8_t MCP25625_ReadRxBufferAtSIDH(uint8_t deviceIndex, MCP25625_RXBx_t *RXBx, uint8_t dataLength)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	6039      	str	r1, [r7, #0]
 80049fe:	71fb      	strb	r3, [r7, #7]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8004a04:	79fa      	ldrb	r2, [r7, #7]
 8004a06:	4949      	ldr	r1, [pc, #292]	; (8004b2c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	3310      	adds	r3, #16
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d100      	bne.n	8004a1c <MCP25625_ReadRxBufferAtSIDH+0x28>
		while(1);
 8004a1a:	e7fe      	b.n	8004a1a <MCP25625_ReadRxBufferAtSIDH+0x26>

	uint8_t rxbxSIDH_Address = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
	uint8_t status = ReadStatus(deviceIndex);
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fade 	bl	8004fe4 <ReadStatus>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	737b      	strb	r3, [r7, #13]
	if(status & RX0IF_STATUS_MASK)
 8004a2c:	7b7b      	ldrb	r3, [r7, #13]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <MCP25625_ReadRxBufferAtSIDH+0x48>
		rxbxSIDH_Address = READ_RX_BUFFER_0_AT_SIDH;
 8004a36:	2390      	movs	r3, #144	; 0x90
 8004a38:	73fb      	strb	r3, [r7, #15]
 8004a3a:	e006      	b.n	8004a4a <MCP25625_ReadRxBufferAtSIDH+0x56>
	else if(status & RX1IF_STATUS_MASK)
 8004a3c:	7b7b      	ldrb	r3, [r7, #13]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MCP25625_ReadRxBufferAtSIDH+0x56>
		rxbxSIDH_Address = READ_RX_BUFFER_1_AT_SIDH;
 8004a46:	2394      	movs	r3, #148	; 0x94
 8004a48:	73fb      	strb	r3, [r7, #15]

	if(rxbxSIDH_Address)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d068      	beq.n	8004b22 <MCP25625_ReadRxBufferAtSIDH+0x12e>
	{
		SetChipSelect(deviceIndex);
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fb38 	bl	80050c8 <SetChipSelect>

		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, rxbxSIDH_Address);
 8004a58:	79fa      	ldrb	r2, [r7, #7]
 8004a5a:	4934      	ldr	r1, [pc, #208]	; (8004b2c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	7bfa      	ldrb	r2, [r7, #15]
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fe19 	bl	80046a4 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 8004a72:	bf00      	nop
 8004a74:	79fa      	ldrb	r2, [r7, #7]
 8004a76:	492d      	ldr	r1, [pc, #180]	; (8004b2c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fdcb 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f1      	beq.n	8004a74 <MCP25625_ReadRxBufferAtSIDH+0x80>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004a90:	79fa      	ldrb	r2, [r7, #7]
 8004a92:	4926      	ldr	r1, [pc, #152]	; (8004b2c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fdf1 	bl	8004688 <LL_SPI_ReceiveData8>

		uint8_t nBytes = dataLength + 5;						// data register + 5 registers in Rx buffer
 8004aa6:	79bb      	ldrb	r3, [r7, #6]
 8004aa8:	3305      	adds	r3, #5
 8004aaa:	733b      	strb	r3, [r7, #12]
		for(uint8_t i = 0; i < nBytes; i++)
 8004aac:	2300      	movs	r3, #0
 8004aae:	73bb      	strb	r3, [r7, #14]
 8004ab0:	e02d      	b.n	8004b0e <MCP25625_ReadRxBufferAtSIDH+0x11a>
		{
			LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 8004ab2:	79fa      	ldrb	r2, [r7, #7]
 8004ab4:	491d      	ldr	r1, [pc, #116]	; (8004b2c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fded 	bl	80046a4 <LL_SPI_TransmitData8>
			while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 8004aca:	bf00      	nop
 8004acc:	79fa      	ldrb	r2, [r7, #7]
 8004ace:	4917      	ldr	r1, [pc, #92]	; (8004b2c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fd9f 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f1      	beq.n	8004acc <MCP25625_ReadRxBufferAtSIDH+0xd8>
			RXBx->array[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004ae8:	79fa      	ldrb	r2, [r7, #7]
 8004aea:	4910      	ldr	r1, [pc, #64]	; (8004b2c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	7bbc      	ldrb	r4, [r7, #14]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fdc4 	bl	8004688 <LL_SPI_ReceiveData8>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	551a      	strb	r2, [r3, r4]
		for(uint8_t i = 0; i < nBytes; i++)
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	73bb      	strb	r3, [r7, #14]
 8004b0e:	7bba      	ldrb	r2, [r7, #14]
 8004b10:	7b3b      	ldrb	r3, [r7, #12]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3cd      	bcc.n	8004ab2 <MCP25625_ReadRxBufferAtSIDH+0xbe>
		}

		ClearChipSelect(deviceIndex);
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 faf5 	bl	8005108 <ClearChipSelect>

		return 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <MCP25625_ReadRxBufferAtSIDH+0x130>
	}

	return 1;
 8004b22:	2301      	movs	r3, #1
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd90      	pop	{r4, r7, pc}
 8004b2c:	200002ec 	.word	0x200002ec

08004b30 <ReadRegisterData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void ReadRegisterData(uint8_t deviceIndex, uint8_t startReg, uint8_t *data, uint8_t nDataBytes)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	603a      	str	r2, [r7, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	71bb      	strb	r3, [r7, #6]
 8004b42:	4613      	mov	r3, r2
 8004b44:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fabd 	bl	80050c8 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, READ);
 8004b4e:	79fa      	ldrb	r2, [r7, #7]
 8004b50:	493e      	ldr	r1, [pc, #248]	; (8004c4c <ReadRegisterData+0x11c>)
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2103      	movs	r1, #3
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fd9f 	bl	80046a4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, startReg);
 8004b66:	79fa      	ldrb	r2, [r7, #7]
 8004b68:	4938      	ldr	r1, [pc, #224]	; (8004c4c <ReadRegisterData+0x11c>)
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	79ba      	ldrb	r2, [r7, #6]
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fd92 	bl	80046a4 <LL_SPI_TransmitData8>
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8004b80:	bf00      	nop
 8004b82:	79fa      	ldrb	r2, [r7, #7]
 8004b84:	4931      	ldr	r1, [pc, #196]	; (8004c4c <ReadRegisterData+0x11c>)
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fd6a 	bl	800466c <LL_SPI_GetTxFIFOLevel>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f1      	bne.n	8004b82 <ReadRegisterData+0x52>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004b9e:	e00a      	b.n	8004bb6 <ReadRegisterData+0x86>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004ba0:	79fa      	ldrb	r2, [r7, #7]
 8004ba2:	492a      	ldr	r1, [pc, #168]	; (8004c4c <ReadRegisterData+0x11c>)
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fd69 	bl	8004688 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004bb6:	79fa      	ldrb	r2, [r7, #7]
 8004bb8:	4924      	ldr	r1, [pc, #144]	; (8004c4c <ReadRegisterData+0x11c>)
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fd2a 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e6      	bne.n	8004ba0 <ReadRegisterData+0x70>

	for(uint8_t i = 0; i < nDataBytes; i++)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
 8004bd6:	e02d      	b.n	8004c34 <ReadRegisterData+0x104>
	{
		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 8004bd8:	79fa      	ldrb	r2, [r7, #7]
 8004bda:	491c      	ldr	r1, [pc, #112]	; (8004c4c <ReadRegisterData+0x11c>)
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fd5a 	bl	80046a4 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 8004bf0:	bf00      	nop
 8004bf2:	79fa      	ldrb	r2, [r7, #7]
 8004bf4:	4915      	ldr	r1, [pc, #84]	; (8004c4c <ReadRegisterData+0x11c>)
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fd0c 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f1      	beq.n	8004bf2 <ReadRegisterData+0xc2>
		data[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004c0e:	79fa      	ldrb	r2, [r7, #7]
 8004c10:	490e      	ldr	r1, [pc, #56]	; (8004c4c <ReadRegisterData+0x11c>)
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	18d4      	adds	r4, r2, r3
 8004c24:	4608      	mov	r0, r1
 8004c26:	f7ff fd2f 	bl	8004688 <LL_SPI_ReceiveData8>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < nDataBytes; i++)
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	3301      	adds	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	7bfa      	ldrb	r2, [r7, #15]
 8004c36:	797b      	ldrb	r3, [r7, #5]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d3cd      	bcc.n	8004bd8 <ReadRegisterData+0xa8>
	}

	ClearChipSelect(deviceIndex);
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa62 	bl	8005108 <ClearChipSelect>
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd90      	pop	{r4, r7, pc}
 8004c4c:	200002ec 	.word	0x200002ec

08004c50 <WriteRegisterData>:

static void WriteRegisterData(uint8_t deviceIndex, uint8_t startReg, uint8_t *data, uint8_t nDataBytes)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	603a      	str	r2, [r7, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	71bb      	strb	r3, [r7, #6]
 8004c62:	4613      	mov	r3, r2
 8004c64:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fa2d 	bl	80050c8 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, WRITE);
 8004c6e:	79fa      	ldrb	r2, [r7, #7]
 8004c70:	4938      	ldr	r1, [pc, #224]	; (8004d54 <WriteRegisterData+0x104>)
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2102      	movs	r1, #2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fd0f 	bl	80046a4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, startReg);
 8004c86:	79fa      	ldrb	r2, [r7, #7]
 8004c88:	4932      	ldr	r1, [pc, #200]	; (8004d54 <WriteRegisterData+0x104>)
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	79ba      	ldrb	r2, [r7, #6]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fd02 	bl	80046a4 <LL_SPI_TransmitData8>

	for(uint8_t i = 0; i < nDataBytes; i++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]
 8004ca4:	e020      	b.n	8004ce8 <WriteRegisterData+0x98>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));
 8004ca6:	bf00      	nop
 8004ca8:	79fa      	ldrb	r2, [r7, #7]
 8004caa:	492a      	ldr	r1, [pc, #168]	; (8004d54 <WriteRegisterData+0x104>)
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fcc4 	bl	8004646 <LL_SPI_IsActiveFlag_TXE>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f1      	beq.n	8004ca8 <WriteRegisterData+0x58>
		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, data[i]);
 8004cc4:	79fa      	ldrb	r2, [r7, #7]
 8004cc6:	4923      	ldr	r1, [pc, #140]	; (8004d54 <WriteRegisterData+0x104>)
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	4413      	add	r3, r2
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f7ff fce1 	bl	80046a4 <LL_SPI_TransmitData8>
	for(uint8_t i = 0; i < nDataBytes; i++)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	7bfa      	ldrb	r2, [r7, #15]
 8004cea:	797b      	ldrb	r3, [r7, #5]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3da      	bcc.n	8004ca6 <WriteRegisterData+0x56>
	}

	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8004cf0:	bf00      	nop
 8004cf2:	79fa      	ldrb	r2, [r7, #7]
 8004cf4:	4917      	ldr	r1, [pc, #92]	; (8004d54 <WriteRegisterData+0x104>)
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fcb2 	bl	800466c <LL_SPI_GetTxFIFOLevel>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f1      	bne.n	8004cf2 <WriteRegisterData+0xa2>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004d0e:	e00a      	b.n	8004d26 <WriteRegisterData+0xd6>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004d10:	79fa      	ldrb	r2, [r7, #7]
 8004d12:	4910      	ldr	r1, [pc, #64]	; (8004d54 <WriteRegisterData+0x104>)
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fcb1 	bl	8004688 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004d26:	79fa      	ldrb	r2, [r7, #7]
 8004d28:	490a      	ldr	r1, [pc, #40]	; (8004d54 <WriteRegisterData+0x104>)
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff fc72 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e6      	bne.n	8004d10 <WriteRegisterData+0xc0>

	ClearChipSelect(deviceIndex);
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f9df 	bl	8005108 <ClearChipSelect>
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200002ec 	.word	0x200002ec

08004d58 <InitRXBx>:

static void InitRXBx(uint8_t deviceIndex)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
	// Set RXBx to receive any message
	ModifyRegisterBits(deviceIndex, RXB0CTRL_REG, 0b01100000, 0b01100000);
 8004d62:	79f8      	ldrb	r0, [r7, #7]
 8004d64:	2360      	movs	r3, #96	; 0x60
 8004d66:	2260      	movs	r2, #96	; 0x60
 8004d68:	2160      	movs	r1, #96	; 0x60
 8004d6a:	f000 f857 	bl	8004e1c <ModifyRegisterBits>
	ModifyRegisterBits(deviceIndex, RXB1CTRL_REG, 0b01100000, 0b01100000);
 8004d6e:	79f8      	ldrb	r0, [r7, #7]
 8004d70:	2360      	movs	r3, #96	; 0x60
 8004d72:	2260      	movs	r2, #96	; 0x60
 8004d74:	2170      	movs	r1, #112	; 0x70
 8004d76:	f000 f851 	bl	8004e1c <ModifyRegisterBits>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <ResetDevice>:

static void ResetDevice(uint8_t deviceIndex)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 f999 	bl	80050c8 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, RESET);
 8004d96:	79fa      	ldrb	r2, [r7, #7]
 8004d98:	491f      	ldr	r1, [pc, #124]	; (8004e18 <ResetDevice+0x94>)
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	21c0      	movs	r1, #192	; 0xc0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fc7b 	bl	80046a4 <LL_SPI_TransmitData8>
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8004dae:	bf00      	nop
 8004db0:	79fa      	ldrb	r2, [r7, #7]
 8004db2:	4919      	ldr	r1, [pc, #100]	; (8004e18 <ResetDevice+0x94>)
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fc53 	bl	800466c <LL_SPI_GetTxFIFOLevel>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f1      	bne.n	8004db0 <ResetDevice+0x2c>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004dcc:	e00a      	b.n	8004de4 <ResetDevice+0x60>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004dce:	79fa      	ldrb	r2, [r7, #7]
 8004dd0:	4911      	ldr	r1, [pc, #68]	; (8004e18 <ResetDevice+0x94>)
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fc52 	bl	8004688 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004de4:	79fa      	ldrb	r2, [r7, #7]
 8004de6:	490c      	ldr	r1, [pc, #48]	; (8004e18 <ResetDevice+0x94>)
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fc13 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e6      	bne.n	8004dce <ResetDevice+0x4a>

	ClearChipSelect(deviceIndex);
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f980 	bl	8005108 <ClearChipSelect>
	LL_mDelay(1);					// Minimum 2 us required (t_RL)
 8004e08:	2001      	movs	r0, #1
 8004e0a:	f001 fe21 	bl	8006a50 <LL_mDelay>
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200002ec 	.word	0x200002ec

08004e1c <ModifyRegisterBits>:

static void ModifyRegisterBits(uint8_t deviceIndex, uint8_t reg, uint8_t mask, uint8_t data)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	71fb      	strb	r3, [r7, #7]
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71bb      	strb	r3, [r7, #6]
 8004e32:	460b      	mov	r3, r1
 8004e34:	717b      	strb	r3, [r7, #5]
 8004e36:	4613      	mov	r3, r2
 8004e38:	713b      	strb	r3, [r7, #4]
	SetChipSelect(deviceIndex);
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f943 	bl	80050c8 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, BIT_MODIFY);
 8004e42:	79fa      	ldrb	r2, [r7, #7]
 8004e44:	4938      	ldr	r1, [pc, #224]	; (8004f28 <ModifyRegisterBits+0x10c>)
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2105      	movs	r1, #5
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fc25 	bl	80046a4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, reg);
 8004e5a:	79fa      	ldrb	r2, [r7, #7]
 8004e5c:	4932      	ldr	r1, [pc, #200]	; (8004f28 <ModifyRegisterBits+0x10c>)
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	79ba      	ldrb	r2, [r7, #6]
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fc18 	bl	80046a4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, mask);
 8004e74:	79fa      	ldrb	r2, [r7, #7]
 8004e76:	492c      	ldr	r1, [pc, #176]	; (8004f28 <ModifyRegisterBits+0x10c>)
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	797a      	ldrb	r2, [r7, #5]
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fc0b 	bl	80046a4 <LL_SPI_TransmitData8>

	while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));	// Tx FIFO can only hold 3 bytes for 8 bit transmission
 8004e8e:	bf00      	nop
 8004e90:	79fa      	ldrb	r2, [r7, #7]
 8004e92:	4925      	ldr	r1, [pc, #148]	; (8004f28 <ModifyRegisterBits+0x10c>)
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fbd0 	bl	8004646 <LL_SPI_IsActiveFlag_TXE>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f1      	beq.n	8004e90 <ModifyRegisterBits+0x74>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, data);
 8004eac:	79fa      	ldrb	r2, [r7, #7]
 8004eae:	491e      	ldr	r1, [pc, #120]	; (8004f28 <ModifyRegisterBits+0x10c>)
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	793a      	ldrb	r2, [r7, #4]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff fbef 	bl	80046a4 <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8004ec6:	bf00      	nop
 8004ec8:	79fa      	ldrb	r2, [r7, #7]
 8004eca:	4917      	ldr	r1, [pc, #92]	; (8004f28 <ModifyRegisterBits+0x10c>)
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fbc7 	bl	800466c <LL_SPI_GetTxFIFOLevel>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f1      	bne.n	8004ec8 <ModifyRegisterBits+0xac>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004ee4:	e00a      	b.n	8004efc <ModifyRegisterBits+0xe0>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004ee6:	79fa      	ldrb	r2, [r7, #7]
 8004ee8:	490f      	ldr	r1, [pc, #60]	; (8004f28 <ModifyRegisterBits+0x10c>)
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff fbc6 	bl	8004688 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004efc:	79fa      	ldrb	r2, [r7, #7]
 8004efe:	490a      	ldr	r1, [pc, #40]	; (8004f28 <ModifyRegisterBits+0x10c>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fb87 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e6      	bne.n	8004ee6 <ModifyRegisterBits+0xca>

	ClearChipSelect(deviceIndex);
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 f8f4 	bl	8005108 <ClearChipSelect>
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd90      	pop	{r4, r7, pc}
 8004f28:	200002ec 	.word	0x200002ec

08004f2c <RequestToSend>:

static void RequestToSend(uint8_t deviceIndex, uint8_t RTS_Tx)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	460a      	mov	r2, r1
 8004f36:	71fb      	strb	r3, [r7, #7]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	71bb      	strb	r3, [r7, #6]
	SetChipSelect(deviceIndex);
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f8c2 	bl	80050c8 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, RTS_Tx);
 8004f44:	79fa      	ldrb	r2, [r7, #7]
 8004f46:	4926      	ldr	r1, [pc, #152]	; (8004fe0 <RequestToSend+0xb4>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	79ba      	ldrb	r2, [r7, #6]
 8004f56:	4611      	mov	r1, r2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fba3 	bl	80046a4 <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8004f5e:	bf00      	nop
 8004f60:	79fa      	ldrb	r2, [r7, #7]
 8004f62:	491f      	ldr	r1, [pc, #124]	; (8004fe0 <RequestToSend+0xb4>)
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fb7b 	bl	800466c <LL_SPI_GetTxFIFOLevel>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f1      	bne.n	8004f60 <RequestToSend+0x34>
	while(!LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx));
 8004f7c:	bf00      	nop
 8004f7e:	79fa      	ldrb	r2, [r7, #7]
 8004f80:	4917      	ldr	r1, [pc, #92]	; (8004fe0 <RequestToSend+0xb4>)
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fb46 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f1      	beq.n	8004f7e <RequestToSend+0x52>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004f9a:	e00a      	b.n	8004fb2 <RequestToSend+0x86>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004f9c:	79fa      	ldrb	r2, [r7, #7]
 8004f9e:	4910      	ldr	r1, [pc, #64]	; (8004fe0 <RequestToSend+0xb4>)
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fb6b 	bl	8004688 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004fb2:	79fa      	ldrb	r2, [r7, #7]
 8004fb4:	490a      	ldr	r1, [pc, #40]	; (8004fe0 <RequestToSend+0xb4>)
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fb2c 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e6      	bne.n	8004f9c <RequestToSend+0x70>

	ClearChipSelect(deviceIndex);
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f899 	bl	8005108 <ClearChipSelect>
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200002ec 	.word	0x200002ec

08004fe4 <ReadStatus>:

static uint8_t ReadStatus(uint8_t deviceIndex)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 f869 	bl	80050c8 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, READ_STATUS);
 8004ff6:	79fa      	ldrb	r2, [r7, #7]
 8004ff8:	4932      	ldr	r1, [pc, #200]	; (80050c4 <ReadStatus+0xe0>)
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	21a0      	movs	r1, #160	; 0xa0
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fb4b 	bl	80046a4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 800500e:	79fa      	ldrb	r2, [r7, #7]
 8005010:	492c      	ldr	r1, [pc, #176]	; (80050c4 <ReadStatus+0xe0>)
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fb3f 	bl	80046a4 <LL_SPI_TransmitData8>
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8005026:	bf00      	nop
 8005028:	79fa      	ldrb	r2, [r7, #7]
 800502a:	4926      	ldr	r1, [pc, #152]	; (80050c4 <ReadStatus+0xe0>)
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fb17 	bl	800466c <LL_SPI_GetTxFIFOLevel>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f1      	bne.n	8005028 <ReadStatus+0x44>

	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 8005044:	bf00      	nop
 8005046:	79fa      	ldrb	r2, [r7, #7]
 8005048:	491e      	ldr	r1, [pc, #120]	; (80050c4 <ReadStatus+0xe0>)
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fae2 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f1      	beq.n	8005046 <ReadStatus+0x62>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8005062:	79fa      	ldrb	r2, [r7, #7]
 8005064:	4917      	ldr	r1, [pc, #92]	; (80050c4 <ReadStatus+0xe0>)
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fb08 	bl	8004688 <LL_SPI_ReceiveData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 8005078:	bf00      	nop
 800507a:	79fa      	ldrb	r2, [r7, #7]
 800507c:	4911      	ldr	r1, [pc, #68]	; (80050c4 <ReadStatus+0xe0>)
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fac8 	bl	8004620 <LL_SPI_IsActiveFlag_RXNE>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f1      	beq.n	800507a <ReadStatus+0x96>
	uint8_t status = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8005096:	79fa      	ldrb	r2, [r7, #7]
 8005098:	490a      	ldr	r1, [pc, #40]	; (80050c4 <ReadStatus+0xe0>)
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff faee 	bl	8004688 <LL_SPI_ReceiveData8>
 80050ac:	4603      	mov	r3, r0
 80050ae:	73fb      	strb	r3, [r7, #15]

	ClearChipSelect(deviceIndex);
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f828 	bl	8005108 <ClearChipSelect>

	return status;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	200002ec 	.word	0x200002ec

080050c8 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CS_Port, Device[deviceIndex].csPin);
 80050d2:	79fa      	ldrb	r2, [r7, #7]
 80050d4:	490b      	ldr	r1, [pc, #44]	; (8005104 <SetChipSelect+0x3c>)
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	3304      	adds	r3, #4
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	79fa      	ldrb	r2, [r7, #7]
 80050e6:	4907      	ldr	r1, [pc, #28]	; (8005104 <SetChipSelect+0x3c>)
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	3308      	adds	r3, #8
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	4619      	mov	r1, r3
 80050f8:	f7ff fa84 	bl	8004604 <LL_GPIO_ResetOutputPin>
}
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	200002ec 	.word	0x200002ec

08005108 <ClearChipSelect>:

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CS_Port, Device[deviceIndex].csPin);
 8005112:	79fa      	ldrb	r2, [r7, #7]
 8005114:	490b      	ldr	r1, [pc, #44]	; (8005144 <ClearChipSelect+0x3c>)
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	3304      	adds	r3, #4
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	79fa      	ldrb	r2, [r7, #7]
 8005126:	4907      	ldr	r1, [pc, #28]	; (8005144 <ClearChipSelect+0x3c>)
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	3308      	adds	r3, #8
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	4619      	mov	r1, r3
 8005138:	f7ff fa56 	bl	80045e8 <LL_GPIO_SetOutputPin>
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	200002ec 	.word	0x200002ec

08005148 <LL_SPI_IsActiveFlag_RXNE>:
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <LL_SPI_IsActiveFlag_TXE>:
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d101      	bne.n	8005186 <LL_SPI_IsActiveFlag_TXE+0x18>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <LL_SPI_ReceiveData8>:
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	330c      	adds	r3, #12
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	b2db      	uxtb	r3, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <LL_SPI_TransmitData8>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	330c      	adds	r3, #12
 80051c0:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	701a      	strb	r2, [r3, #0]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <LL_GPIO_SetOutputPin>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	619a      	str	r2, [r3, #24]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <LL_GPIO_ResetOutputPin>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

MPU925x_Error_e MPU925x_Init(uint8_t deviceIndex, MPU925x_Init_t *Device_Init)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	6039      	str	r1, [r7, #0]
 8005216:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > MPU925X_NUMBER_OF_DEVICES)
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d000      	beq.n	8005220 <MPU925x_Init+0x14>
		while(1);
 800521e:	e7fe      	b.n	800521e <MPU925x_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(MPU925x_Init_t));
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	4a12      	ldr	r2, [pc, #72]	; (8005270 <MPU925x_Init+0x64>)
 8005226:	4413      	add	r3, r2
 8005228:	220c      	movs	r2, #12
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f001 fc6b 	bl	8006b08 <memcpy>

	ClearChipSelect(deviceIndex);
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fb07 	bl	8005848 <ClearChipSelect>

	uint8_t whoAmI;
	ReadRegData(deviceIndex, MPU925X_REG_WHO_AM_I, &whoAmI, sizeof(whoAmI));
 800523a:	f107 020f 	add.w	r2, r7, #15
 800523e:	79f8      	ldrb	r0, [r7, #7]
 8005240:	2301      	movs	r3, #1
 8005242:	2175      	movs	r1, #117	; 0x75
 8005244:	f000 fa0c 	bl	8005660 <ReadRegData>
	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b71      	cmp	r3, #113	; 0x71
 800524c:	d004      	beq.n	8005258 <MPU925x_Init+0x4c>
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	2b73      	cmp	r3, #115	; 0x73
 8005252:	d001      	beq.n	8005258 <MPU925x_Init+0x4c>
		return MPU925x_WhoAmI_Error;
 8005254:	2301      	movs	r3, #1
 8005256:	e007      	b.n	8005268 <MPU925x_Init+0x5c>

	Device[deviceIndex].isInit = 1;
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	4a05      	ldr	r2, [pc, #20]	; (8005270 <MPU925x_Init+0x64>)
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	4413      	add	r3, r2
 8005260:	330c      	adds	r3, #12
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]

	return MPU925x_NoError;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000314 	.word	0x20000314

08005274 <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(uint8_t deviceIndex, MPU925x_AccelSensitivity_e sensitivity)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	460a      	mov	r2, r1
 800527e:	71fb      	strb	r3, [r7, #7]
 8005280:	4613      	mov	r3, r2
 8005282:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	4a42      	ldr	r2, [pc, #264]	; (8005390 <MPU925x_SetAccelSensitivity+0x11c>)
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	4413      	add	r3, r2
 800528c:	330c      	adds	r3, #12
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d100      	bne.n	8005296 <MPU925x_SetAccelSensitivity+0x22>
		while(1);
 8005294:	e7fe      	b.n	8005294 <MPU925x_SetAccelSensitivity+0x20>

	uint8_t data;
	switch(sensitivity)
 8005296:	79bb      	ldrb	r3, [r7, #6]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d875      	bhi.n	8005388 <MPU925x_SetAccelSensitivity+0x114>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <MPU925x_SetAccelSensitivity+0x30>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052e5 	.word	0x080052e5
 80052ac:	0800531f 	.word	0x0800531f
 80052b0:	08005359 	.word	0x08005359
	{
	case MPU925x_AccelSensitivity_2g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80052b4:	f107 020f 	add.w	r2, r7, #15
 80052b8:	79f8      	ldrb	r0, [r7, #7]
 80052ba:	2301      	movs	r3, #1
 80052bc:	211c      	movs	r1, #28
 80052be:	f000 f9cf 	bl	8005660 <ReadRegData>
		data = data & ~0x18;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	f023 0318 	bic.w	r3, r3, #24
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80052cc:	f107 020f 	add.w	r2, r7, #15
 80052d0:	79f8      	ldrb	r0, [r7, #7]
 80052d2:	2301      	movs	r3, #1
 80052d4:	211c      	movs	r1, #28
 80052d6:	f000 fa41 	bl	800575c <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 80052da:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <MPU925x_SetAccelSensitivity+0x120>)
 80052dc:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80052e0:	601a      	str	r2, [r3, #0]
		break;
 80052e2:	e051      	b.n	8005388 <MPU925x_SetAccelSensitivity+0x114>

	case MPU925x_AccelSensitivity_4g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80052e4:	f107 020f 	add.w	r2, r7, #15
 80052e8:	79f8      	ldrb	r0, [r7, #7]
 80052ea:	2301      	movs	r3, #1
 80052ec:	211c      	movs	r1, #28
 80052ee:	f000 f9b7 	bl	8005660 <ReadRegData>
		data = (data & ~0x18) | 0x08;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	b25b      	sxtb	r3, r3
 80052f6:	f023 0318 	bic.w	r3, r3, #24
 80052fa:	b25b      	sxtb	r3, r3
 80052fc:	f043 0308 	orr.w	r3, r3, #8
 8005300:	b25b      	sxtb	r3, r3
 8005302:	b2db      	uxtb	r3, r3
 8005304:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005306:	f107 020f 	add.w	r2, r7, #15
 800530a:	79f8      	ldrb	r0, [r7, #7]
 800530c:	2301      	movs	r3, #1
 800530e:	211c      	movs	r1, #28
 8005310:	f000 fa24 	bl	800575c <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 8005314:	4b1f      	ldr	r3, [pc, #124]	; (8005394 <MPU925x_SetAccelSensitivity+0x120>)
 8005316:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800531a:	601a      	str	r2, [r3, #0]
		break;
 800531c:	e034      	b.n	8005388 <MPU925x_SetAccelSensitivity+0x114>

	case MPU925x_AccelSensitivity_8g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 800531e:	f107 020f 	add.w	r2, r7, #15
 8005322:	79f8      	ldrb	r0, [r7, #7]
 8005324:	2301      	movs	r3, #1
 8005326:	211c      	movs	r1, #28
 8005328:	f000 f99a 	bl	8005660 <ReadRegData>
		data = (data & ~0x18) | 0x10;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	b25b      	sxtb	r3, r3
 8005330:	f023 0318 	bic.w	r3, r3, #24
 8005334:	b25b      	sxtb	r3, r3
 8005336:	f043 0310 	orr.w	r3, r3, #16
 800533a:	b25b      	sxtb	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005340:	f107 020f 	add.w	r2, r7, #15
 8005344:	79f8      	ldrb	r0, [r7, #7]
 8005346:	2301      	movs	r3, #1
 8005348:	211c      	movs	r1, #28
 800534a:	f000 fa07 	bl	800575c <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <MPU925x_SetAccelSensitivity+0x120>)
 8005350:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005354:	601a      	str	r2, [r3, #0]
		break;
 8005356:	e017      	b.n	8005388 <MPU925x_SetAccelSensitivity+0x114>

	case MPU925x_AccelSensitivity_16g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005358:	f107 020f 	add.w	r2, r7, #15
 800535c:	79f8      	ldrb	r0, [r7, #7]
 800535e:	2301      	movs	r3, #1
 8005360:	211c      	movs	r1, #28
 8005362:	f000 f97d 	bl	8005660 <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	f043 0318 	orr.w	r3, r3, #24
 800536c:	b2db      	uxtb	r3, r3
 800536e:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005370:	f107 020f 	add.w	r2, r7, #15
 8005374:	79f8      	ldrb	r0, [r7, #7]
 8005376:	2301      	movs	r3, #1
 8005378:	211c      	movs	r1, #28
 800537a:	f000 f9ef 	bl	800575c <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <MPU925x_SetAccelSensitivity+0x120>)
 8005380:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8005384:	601a      	str	r2, [r3, #0]
		break;
 8005386:	bf00      	nop
	}
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000314 	.word	0x20000314
 8005394:	20000008 	.word	0x20000008

08005398 <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(uint8_t deviceIndex, MPU925x_GyroSensitivity_e sensitivity)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	460a      	mov	r2, r1
 80053a2:	71fb      	strb	r3, [r7, #7]
 80053a4:	4613      	mov	r3, r2
 80053a6:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	4a40      	ldr	r2, [pc, #256]	; (80054ac <MPU925x_SetGyroSensitivity+0x114>)
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	4413      	add	r3, r2
 80053b0:	330c      	adds	r3, #12
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d100      	bne.n	80053ba <MPU925x_SetGyroSensitivity+0x22>
		while(1);
 80053b8:	e7fe      	b.n	80053b8 <MPU925x_SetGyroSensitivity+0x20>

	uint8_t data;
	switch(sensitivity)
 80053ba:	79bb      	ldrb	r3, [r7, #6]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d871      	bhi.n	80054a4 <MPU925x_SetGyroSensitivity+0x10c>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <MPU925x_SetGyroSensitivity+0x30>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053d9 	.word	0x080053d9
 80053cc:	08005407 	.word	0x08005407
 80053d0:	0800543f 	.word	0x0800543f
 80053d4:	08005477 	.word	0x08005477
	{
	case MPU925x_GyroSensitivity_250dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 80053d8:	f107 020f 	add.w	r2, r7, #15
 80053dc:	79f8      	ldrb	r0, [r7, #7]
 80053de:	2301      	movs	r3, #1
 80053e0:	211b      	movs	r1, #27
 80053e2:	f000 f93d 	bl	8005660 <ReadRegData>
		data = data & ~0x18;
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	f023 0318 	bic.w	r3, r3, #24
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 80053f0:	f107 020f 	add.w	r2, r7, #15
 80053f4:	79f8      	ldrb	r0, [r7, #7]
 80053f6:	2301      	movs	r3, #1
 80053f8:	211b      	movs	r1, #27
 80053fa:	f000 f9af 	bl	800575c <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 80053fe:	4b2c      	ldr	r3, [pc, #176]	; (80054b0 <MPU925x_SetGyroSensitivity+0x118>)
 8005400:	4a2c      	ldr	r2, [pc, #176]	; (80054b4 <MPU925x_SetGyroSensitivity+0x11c>)
 8005402:	601a      	str	r2, [r3, #0]
		break;
 8005404:	e04e      	b.n	80054a4 <MPU925x_SetGyroSensitivity+0x10c>

	case MPU925x_GyroSensitivity_500dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005406:	f107 020f 	add.w	r2, r7, #15
 800540a:	79f8      	ldrb	r0, [r7, #7]
 800540c:	2301      	movs	r3, #1
 800540e:	211b      	movs	r1, #27
 8005410:	f000 f926 	bl	8005660 <ReadRegData>
		data = (data & ~0x18) | 0x08;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	b25b      	sxtb	r3, r3
 8005418:	f023 0318 	bic.w	r3, r3, #24
 800541c:	b25b      	sxtb	r3, r3
 800541e:	f043 0308 	orr.w	r3, r3, #8
 8005422:	b25b      	sxtb	r3, r3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005428:	f107 020f 	add.w	r2, r7, #15
 800542c:	79f8      	ldrb	r0, [r7, #7]
 800542e:	2301      	movs	r3, #1
 8005430:	211b      	movs	r1, #27
 8005432:	f000 f993 	bl	800575c <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 8005436:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <MPU925x_SetGyroSensitivity+0x118>)
 8005438:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <MPU925x_SetGyroSensitivity+0x120>)
 800543a:	601a      	str	r2, [r3, #0]
		break;
 800543c:	e032      	b.n	80054a4 <MPU925x_SetGyroSensitivity+0x10c>

	case MPU925x_GyroSensitivity_1000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 800543e:	f107 020f 	add.w	r2, r7, #15
 8005442:	79f8      	ldrb	r0, [r7, #7]
 8005444:	2301      	movs	r3, #1
 8005446:	211b      	movs	r1, #27
 8005448:	f000 f90a 	bl	8005660 <ReadRegData>
		data = (data & ~0x18) | 0x10;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	b25b      	sxtb	r3, r3
 8005450:	f023 0318 	bic.w	r3, r3, #24
 8005454:	b25b      	sxtb	r3, r3
 8005456:	f043 0310 	orr.w	r3, r3, #16
 800545a:	b25b      	sxtb	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005460:	f107 020f 	add.w	r2, r7, #15
 8005464:	79f8      	ldrb	r0, [r7, #7]
 8005466:	2301      	movs	r3, #1
 8005468:	211b      	movs	r1, #27
 800546a:	f000 f977 	bl	800575c <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 800546e:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <MPU925x_SetGyroSensitivity+0x118>)
 8005470:	4a12      	ldr	r2, [pc, #72]	; (80054bc <MPU925x_SetGyroSensitivity+0x124>)
 8005472:	601a      	str	r2, [r3, #0]
		break;
 8005474:	e016      	b.n	80054a4 <MPU925x_SetGyroSensitivity+0x10c>

	case MPU925x_GyroSensitivity_2000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005476:	f107 020f 	add.w	r2, r7, #15
 800547a:	79f8      	ldrb	r0, [r7, #7]
 800547c:	2301      	movs	r3, #1
 800547e:	211b      	movs	r1, #27
 8005480:	f000 f8ee 	bl	8005660 <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	f043 0318 	orr.w	r3, r3, #24
 800548a:	b2db      	uxtb	r3, r3
 800548c:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 800548e:	f107 020f 	add.w	r2, r7, #15
 8005492:	79f8      	ldrb	r0, [r7, #7]
 8005494:	2301      	movs	r3, #1
 8005496:	211b      	movs	r1, #27
 8005498:	f000 f960 	bl	800575c <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 800549c:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <MPU925x_SetGyroSensitivity+0x118>)
 800549e:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <MPU925x_SetGyroSensitivity+0x128>)
 80054a0:	601a      	str	r2, [r3, #0]
		break;
 80054a2:	bf00      	nop
	}
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000314 	.word	0x20000314
 80054b0:	2000000c 	.word	0x2000000c
 80054b4:	43030000 	.word	0x43030000
 80054b8:	42830000 	.word	0x42830000
 80054bc:	42033333 	.word	0x42033333
 80054c0:	41833333 	.word	0x41833333

080054c4 <MPU925x_ReadIMU>:

	WriteRegData(deviceIndex, MPU925X_REG_SMPLRT_DIV, &divider, 1);
}

MPU925x_IMU_Data_t MPU925x_ReadIMU(uint8_t deviceIndex)
{
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b096      	sub	sp, #88	; 0x58
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	70fb      	strb	r3, [r7, #3]
	if(!Device[deviceIndex].isInit)
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	4a60      	ldr	r2, [pc, #384]	; (8005654 <MPU925x_ReadIMU+0x190>)
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	4413      	add	r3, r2
 80054d8:	330c      	adds	r3, #12
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d100      	bne.n	80054e2 <MPU925x_ReadIMU+0x1e>
		while(1);
 80054e0:	e7fe      	b.n	80054e0 <MPU925x_ReadIMU+0x1c>

	MPU925x_IMU_Data_t IMU_Data;
	uint8_t data[14];
	ReadRegData(deviceIndex, MPU925X_REG_ACCEL_XOUT_H, data, 14);
 80054e2:	f107 0208 	add.w	r2, r7, #8
 80054e6:	78f8      	ldrb	r0, [r7, #3]
 80054e8:	230e      	movs	r3, #14
 80054ea:	213b      	movs	r1, #59	; 0x3b
 80054ec:	f000 f8b8 	bl	8005660 <ReadRegData>

	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 80054f0:	7a3b      	ldrb	r3, [r7, #8]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	b21a      	sxth	r2, r3
 80054f6:	7a7b      	ldrb	r3, [r7, #9]
 80054f8:	b21b      	sxth	r3, r3
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 8005500:	7abb      	ldrb	r3, [r7, #10]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	b21a      	sxth	r2, r3
 8005506:	7afb      	ldrb	r3, [r7, #11]
 8005508:	b21b      	sxth	r3, r3
 800550a:	4313      	orrs	r3, r2
 800550c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 8005510:	7b3b      	ldrb	r3, [r7, #12]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	b21a      	sxth	r2, r3
 8005516:	7b7b      	ldrb	r3, [r7, #13]
 8005518:	b21b      	sxth	r3, r3
 800551a:	4313      	orrs	r3, r2
 800551c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8005520:	7c3b      	ldrb	r3, [r7, #16]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	b21a      	sxth	r2, r3
 8005526:	7c7b      	ldrb	r3, [r7, #17]
 8005528:	b21b      	sxth	r3, r3
 800552a:	4313      	orrs	r3, r2
 800552c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8005530:	7cbb      	ldrb	r3, [r7, #18]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	b21a      	sxth	r2, r3
 8005536:	7cfb      	ldrb	r3, [r7, #19]
 8005538:	b21b      	sxth	r3, r3
 800553a:	4313      	orrs	r3, r2
 800553c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 8005540:	7d3b      	ldrb	r3, [r7, #20]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	b21a      	sxth	r2, r3
 8005546:	7d7b      	ldrb	r3, [r7, #21]
 8005548:	b21b      	sxth	r3, r3
 800554a:	4313      	orrs	r3, r2
 800554c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	IMU_Data.Struct.ax = ax / accelSensitivity;
 8005550:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8005554:	ee07 3a90 	vmov	s15, r3
 8005558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800555c:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <MPU925x_ReadIMU+0x194>)
 800555e:	edd3 7a00 	vldr	s15, [r3]
 8005562:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005566:	ee16 0a90 	vmov	r0, s13
 800556a:	f7fa ff91 	bl	8000490 <__aeabi_f2d>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMU_Data.Struct.ay = ay / accelSensitivity;
 8005576:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005582:	4b35      	ldr	r3, [pc, #212]	; (8005658 <MPU925x_ReadIMU+0x194>)
 8005584:	edd3 7a00 	vldr	s15, [r3]
 8005588:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800558c:	ee16 0a90 	vmov	r0, s13
 8005590:	f7fa ff7e 	bl	8000490 <__aeabi_f2d>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMU_Data.Struct.az = az / accelSensitivity;
 800559c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80055a0:	ee07 3a90 	vmov	s15, r3
 80055a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055a8:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <MPU925x_ReadIMU+0x194>)
 80055aa:	edd3 7a00 	vldr	s15, [r3]
 80055ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055b2:	ee16 0a90 	vmov	r0, s13
 80055b6:	f7fa ff6b 	bl	8000490 <__aeabi_f2d>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMU_Data.Struct.gx = gx / gyroSensitivity;
 80055c2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ce:	4b23      	ldr	r3, [pc, #140]	; (800565c <MPU925x_ReadIMU+0x198>)
 80055d0:	edd3 7a00 	vldr	s15, [r3]
 80055d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055d8:	ee16 0a90 	vmov	r0, s13
 80055dc:	f7fa ff58 	bl	8000490 <__aeabi_f2d>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	IMU_Data.Struct.gy = gy / gyroSensitivity;
 80055e8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055f4:	4b19      	ldr	r3, [pc, #100]	; (800565c <MPU925x_ReadIMU+0x198>)
 80055f6:	edd3 7a00 	vldr	s15, [r3]
 80055fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055fe:	ee16 0a90 	vmov	r0, s13
 8005602:	f7fa ff45 	bl	8000490 <__aeabi_f2d>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMU_Data.Struct.gz = gz / gyroSensitivity;
 800560e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <MPU925x_ReadIMU+0x198>)
 800561c:	edd3 7a00 	vldr	s15, [r3]
 8005620:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005624:	ee16 0a90 	vmov	r0, s13
 8005628:	f7fa ff32 	bl	8000490 <__aeabi_f2d>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	return IMU_Data;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	461d      	mov	r5, r3
 8005638:	f107 0418 	add.w	r4, r7, #24
 800563c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800563e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005644:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005648:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	3758      	adds	r7, #88	; 0x58
 8005650:	46bd      	mov	sp, r7
 8005652:	bdb0      	pop	{r4, r5, r7, pc}
 8005654:	20000314 	.word	0x20000314
 8005658:	20000008 	.word	0x20000008
 800565c:	2000000c 	.word	0x2000000c

08005660 <ReadRegData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void ReadRegData(uint8_t deviceIndex, uint8_t startAddress, uint8_t *data, uint8_t nBytes)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	603a      	str	r2, [r7, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	4603      	mov	r3, r0
 800566c:	71fb      	strb	r3, [r7, #7]
 800566e:	460b      	mov	r3, r1
 8005670:	71bb      	strb	r3, [r7, #6]
 8005672:	4613      	mov	r3, r2
 8005674:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f901 	bl	8005880 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPI_Handle)));
 800567e:	bf00      	nop
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	4a35      	ldr	r2, [pc, #212]	; (8005758 <ReadRegData+0xf8>)
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	4413      	add	r3, r2
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fd6f 	bl	800516e <LL_SPI_IsActiveFlag_TXE>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f4      	beq.n	8005680 <ReadRegData+0x20>
	LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, (startAddress | 0x80));
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	4a2f      	ldr	r2, [pc, #188]	; (8005758 <ReadRegData+0xf8>)
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	4413      	add	r3, r2
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	79bb      	ldrb	r3, [r7, #6]
 80056a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7ff fd80 	bl	80051b0 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPI_Handle)));
 80056b0:	bf00      	nop
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	4a28      	ldr	r2, [pc, #160]	; (8005758 <ReadRegData+0xf8>)
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4413      	add	r3, r2
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff fd43 	bl	8005148 <LL_SPI_IsActiveFlag_RXNE>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f4      	beq.n	80056b2 <ReadRegData+0x52>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	4a23      	ldr	r2, [pc, #140]	; (8005758 <ReadRegData+0xf8>)
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	4413      	add	r3, r2
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fd5e 	bl	8005194 <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i < nBytes; i++)
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e030      	b.n	8005740 <ReadRegData+0xe0>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPI_Handle)));
 80056de:	bf00      	nop
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <ReadRegData+0xf8>)
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	4413      	add	r3, r2
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fd3f 	bl	800516e <LL_SPI_IsActiveFlag_TXE>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f4      	beq.n	80056e0 <ReadRegData+0x80>
		LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, 0x00);
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	4a17      	ldr	r2, [pc, #92]	; (8005758 <ReadRegData+0xf8>)
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	4413      	add	r3, r2
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fd54 	bl	80051b0 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPI_Handle)));
 8005708:	bf00      	nop
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	4a12      	ldr	r2, [pc, #72]	; (8005758 <ReadRegData+0xf8>)
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	4413      	add	r3, r2
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fd17 	bl	8005148 <LL_SPI_IsActiveFlag_RXNE>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f4      	beq.n	800570a <ReadRegData+0xaa>
		data[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	4a0d      	ldr	r2, [pc, #52]	; (8005758 <ReadRegData+0xf8>)
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	4413      	add	r3, r2
 8005728:	6819      	ldr	r1, [r3, #0]
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	18d4      	adds	r4, r2, r3
 8005730:	4608      	mov	r0, r1
 8005732:	f7ff fd2f 	bl	8005194 <LL_SPI_ReceiveData8>
 8005736:	4603      	mov	r3, r0
 8005738:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < nBytes; i++)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	3301      	adds	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	797b      	ldrb	r3, [r7, #5]
 8005744:	429a      	cmp	r2, r3
 8005746:	d3ca      	bcc.n	80056de <ReadRegData+0x7e>
	}

	ClearChipSelect(deviceIndex);
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f87c 	bl	8005848 <ClearChipSelect>
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	bd90      	pop	{r4, r7, pc}
 8005758:	20000314 	.word	0x20000314

0800575c <WriteRegData>:

static void WriteRegData(uint8_t deviceIndex, uint8_t startAdress, uint8_t *data, uint8_t nBytes)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	603a      	str	r2, [r7, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	4603      	mov	r3, r0
 8005768:	71fb      	strb	r3, [r7, #7]
 800576a:	460b      	mov	r3, r1
 800576c:	71bb      	strb	r3, [r7, #6]
 800576e:	4613      	mov	r3, r2
 8005770:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 f883 	bl	8005880 <SetChipSelect>

	while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_TXE));
 800577a:	bf00      	nop
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	4a31      	ldr	r2, [pc, #196]	; (8005844 <WriteRegData+0xe8>)
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	4413      	add	r3, r2
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f5      	beq.n	800577c <WriteRegData+0x20>
	LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, startAdress);
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <WriteRegData+0xe8>)
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	4413      	add	r3, r2
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	79ba      	ldrb	r2, [r7, #6]
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fd06 	bl	80051b0 <LL_SPI_TransmitData8>
	while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_RXNE));
 80057a4:	bf00      	nop
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	4a26      	ldr	r2, [pc, #152]	; (8005844 <WriteRegData+0xe8>)
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	4413      	add	r3, r2
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f5      	beq.n	80057a6 <WriteRegData+0x4a>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	4a21      	ldr	r2, [pc, #132]	; (8005844 <WriteRegData+0xe8>)
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	4413      	add	r3, r2
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff fce5 	bl	8005194 <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i <nBytes; i++)
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
 80057ce:	e02c      	b.n	800582a <WriteRegData+0xce>
	{
		while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_TXE));
 80057d0:	bf00      	nop
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <WriteRegData+0xe8>)
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	4413      	add	r3, r2
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f5      	beq.n	80057d2 <WriteRegData+0x76>
		LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, data[i]);
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <WriteRegData+0xe8>)
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	4413      	add	r3, r2
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	4619      	mov	r1, r3
 80057fa:	f7ff fcd9 	bl	80051b0 <LL_SPI_TransmitData8>
		while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_RXNE));
 80057fe:	bf00      	nop
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	4a10      	ldr	r2, [pc, #64]	; (8005844 <WriteRegData+0xe8>)
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	4413      	add	r3, r2
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f5      	beq.n	8005800 <WriteRegData+0xa4>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <WriteRegData+0xe8>)
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	4413      	add	r3, r2
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fcb8 	bl	8005194 <LL_SPI_ReceiveData8>
	for(uint8_t i = 0; i <nBytes; i++)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	3301      	adds	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
 800582a:	7bfa      	ldrb	r2, [r7, #15]
 800582c:	797b      	ldrb	r3, [r7, #5]
 800582e:	429a      	cmp	r2, r3
 8005830:	d3ce      	bcc.n	80057d0 <WriteRegData+0x74>
	}

	ClearChipSelect(deviceIndex);
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f807 	bl	8005848 <ClearChipSelect>
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000314 	.word	0x20000314

08005848 <ClearChipSelect>:

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	4a09      	ldr	r2, [pc, #36]	; (800587c <ClearChipSelect+0x34>)
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	4413      	add	r3, r2
 800585a:	3304      	adds	r3, #4
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	4906      	ldr	r1, [pc, #24]	; (800587c <ClearChipSelect+0x34>)
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	440b      	add	r3, r1
 8005866:	3308      	adds	r3, #8
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	4610      	mov	r0, r2
 800586e:	f7ff fcb1 	bl	80051d4 <LL_GPIO_SetOutputPin>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000314 	.word	0x20000314

08005880 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	4a09      	ldr	r2, [pc, #36]	; (80058b4 <SetChipSelect+0x34>)
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	4413      	add	r3, r2
 8005892:	3304      	adds	r3, #4
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	4906      	ldr	r1, [pc, #24]	; (80058b4 <SetChipSelect+0x34>)
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	440b      	add	r3, r1
 800589e:	3308      	adds	r3, #8
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f7ff fca3 	bl	80051f0 <LL_GPIO_ResetOutputPin>
}
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000314 	.word	0x20000314

080058b8 <LL_ADC_REG_SetSequencerLength>:
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	f023 020f 	bic.w	r2, r3, #15
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <LL_ADC_IsEnabled>:
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <LL_ADC_IsEnabled+0x18>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <LL_ADC_IsEnabled+0x1a>
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8005912:	481c      	ldr	r0, [pc, #112]	; (8005984 <LL_ADC_CommonInit+0x80>)
 8005914:	f7ff ffe3 	bl	80058de <LL_ADC_IsEnabled>
 8005918:	4604      	mov	r4, r0
 800591a:	481b      	ldr	r0, [pc, #108]	; (8005988 <LL_ADC_CommonInit+0x84>)
 800591c:	f7ff ffdf 	bl	80058de <LL_ADC_IsEnabled>
 8005920:	4603      	mov	r3, r0
 8005922:	431c      	orrs	r4, r3
 8005924:	4819      	ldr	r0, [pc, #100]	; (800598c <LL_ADC_CommonInit+0x88>)
 8005926:	f7ff ffda 	bl	80058de <LL_ADC_IsEnabled>
 800592a:	4603      	mov	r3, r0
 800592c:	4323      	orrs	r3, r4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d120      	bne.n	8005974 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d012      	beq.n	8005960 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <LL_ADC_CommonInit+0x8c>)
 8005940:	4013      	ands	r3, r2
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	6811      	ldr	r1, [r2, #0]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	6852      	ldr	r2, [r2, #4]
 800594a:	4311      	orrs	r1, r2
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	6892      	ldr	r2, [r2, #8]
 8005950:	4311      	orrs	r1, r2
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	68d2      	ldr	r2, [r2, #12]
 8005956:	430a      	orrs	r2, r1
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	609a      	str	r2, [r3, #8]
 800595e:	e00b      	b.n	8005978 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <LL_ADC_CommonInit+0x8c>)
 8005966:	4013      	ands	r3, r2
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	609a      	str	r2, [r3, #8]
 8005972:	e001      	b.n	8005978 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bd90      	pop	{r4, r7, pc}
 8005982:	bf00      	nop
 8005984:	50040000 	.word	0x50040000
 8005988:	50040100 	.word	0x50040100
 800598c:	50040200 	.word	0x50040200
 8005990:	ffc030e0 	.word	0xffc030e0

08005994 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff ff9b 	bl	80058de <LL_ADC_IsEnabled>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d111      	bne.n	80059d2 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	6811      	ldr	r1, [r2, #0]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	6852      	ldr	r2, [r2, #4]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	6892      	ldr	r2, [r2, #8]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	e001      	b.n	80059d6 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff ff75 	bl	80058de <LL_ADC_IsEnabled>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d132      	bne.n	8005a60 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d015      	beq.n	8005a2e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <LL_ADC_REG_Init+0x90>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	6811      	ldr	r1, [r2, #0]
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	6892      	ldr	r2, [r2, #8]
 8005a12:	4311      	orrs	r1, r2
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	68d2      	ldr	r2, [r2, #12]
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	6912      	ldr	r2, [r2, #16]
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	6952      	ldr	r2, [r2, #20]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60da      	str	r2, [r3, #12]
 8005a2c:	e011      	b.n	8005a52 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <LL_ADC_REG_Init+0x90>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	6811      	ldr	r1, [r2, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	68d2      	ldr	r2, [r2, #12]
 8005a3e:	4311      	orrs	r1, r2
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	6912      	ldr	r2, [r2, #16]
 8005a44:	4311      	orrs	r1, r2
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	6952      	ldr	r2, [r2, #20]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ff2d 	bl	80058b8 <LL_ADC_REG_SetSequencerLength>
 8005a5e:	e001      	b.n	8005a64 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	fff0c03c 	.word	0xfff0c03c

08005a74 <LL_GPIO_SetPinMode>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b08b      	sub	sp, #44	; 0x2c
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	fa93 f3a3 	rbit	r3, r3
 8005a8e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8005a9a:	2320      	movs	r3, #32
 8005a9c:	e003      	b.n	8005aa6 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	2103      	movs	r1, #3
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	fa93 f3a3 	rbit	r3, r3
 8005abc:	61fb      	str	r3, [r7, #28]
  return result;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005ac8:	2320      	movs	r3, #32
 8005aca:	e003      	b.n	8005ad4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	fab3 f383 	clz	r3, r3
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	372c      	adds	r7, #44	; 0x2c
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <LL_GPIO_SetPinOutputType>:
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	605a      	str	r2, [r3, #4]
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <LL_GPIO_SetPinSpeed>:
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b08b      	sub	sp, #44	; 0x2c
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	fa93 f3a3 	rbit	r3, r3
 8005b38:	613b      	str	r3, [r7, #16]
  return result;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005b44:	2320      	movs	r3, #32
 8005b46:	e003      	b.n	8005b50 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	fab3 f383 	clz	r3, r3
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	2103      	movs	r1, #3
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	fa93 f3a3 	rbit	r3, r3
 8005b66:	61fb      	str	r3, [r7, #28]
  return result;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005b72:	2320      	movs	r3, #32
 8005b74:	e003      	b.n	8005b7e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	fab3 f383 	clz	r3, r3
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	fa01 f303 	lsl.w	r3, r1, r3
 8005b86:	431a      	orrs	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	372c      	adds	r7, #44	; 0x2c
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <LL_GPIO_SetPinPull>:
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b08b      	sub	sp, #44	; 0x2c
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	fa93 f3a3 	rbit	r3, r3
 8005bb2:	613b      	str	r3, [r7, #16]
  return result;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005bbe:	2320      	movs	r3, #32
 8005bc0:	e003      	b.n	8005bca <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	fab3 f383 	clz	r3, r3
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	2103      	movs	r1, #3
 8005bce:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	401a      	ands	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	61fb      	str	r3, [r7, #28]
  return result;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005bec:	2320      	movs	r3, #32
 8005bee:	e003      	b.n	8005bf8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	431a      	orrs	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	60da      	str	r2, [r3, #12]
}
 8005c06:	bf00      	nop
 8005c08:	372c      	adds	r7, #44	; 0x2c
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <LL_GPIO_SetAFPin_0_7>:
{
 8005c12:	b480      	push	{r7}
 8005c14:	b08b      	sub	sp, #44	; 0x2c
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	fa93 f3a3 	rbit	r3, r3
 8005c2c:	613b      	str	r3, [r7, #16]
  return result;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005c38:	2320      	movs	r3, #32
 8005c3a:	e003      	b.n	8005c44 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	fab3 f383 	clz	r3, r3
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	210f      	movs	r1, #15
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	61fb      	str	r3, [r7, #28]
  return result;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005c66:	2320      	movs	r3, #32
 8005c68:	e003      	b.n	8005c72 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	fab3 f383 	clz	r3, r3
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	372c      	adds	r7, #44	; 0x2c
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_GPIO_SetAFPin_8_15>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b08b      	sub	sp, #44	; 0x2c
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	fa93 f3a3 	rbit	r3, r3
 8005ca8:	613b      	str	r3, [r7, #16]
  return result;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	e003      	b.n	8005cc0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	fab3 f383 	clz	r3, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	210f      	movs	r1, #15
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	401a      	ands	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	fa93 f3a3 	rbit	r3, r3
 8005cd8:	61fb      	str	r3, [r7, #28]
  return result;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005ce4:	2320      	movs	r3, #32
 8005ce6:	e003      	b.n	8005cf0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	fab3 f383 	clz	r3, r3
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005cfe:	bf00      	nop
 8005d00:	372c      	adds	r7, #44	; 0x2c
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b088      	sub	sp, #32
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	fa93 f3a3 	rbit	r3, r3
 8005d20:	60fb      	str	r3, [r7, #12]
  return result;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <LL_GPIO_Init+0x26>
    return 32U;
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	e003      	b.n	8005d38 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005d3a:	e048      	b.n	8005dce <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	2101      	movs	r1, #1
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03a      	beq.n	8005dc8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d003      	beq.n	8005d62 <LL_GPIO_Init+0x58>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d10e      	bne.n	8005d80 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	461a      	mov	r2, r3
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fed7 	bl	8005b1e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff feb7 	bl	8005aee <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	461a      	mov	r2, r3
 8005d86:	69b9      	ldr	r1, [r7, #24]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ff05 	bl	8005b98 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d111      	bne.n	8005dba <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2bff      	cmp	r3, #255	; 0xff
 8005d9a:	d807      	bhi.n	8005dac <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	461a      	mov	r2, r3
 8005da2:	69b9      	ldr	r1, [r7, #24]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff ff34 	bl	8005c12 <LL_GPIO_SetAFPin_0_7>
 8005daa:	e006      	b.n	8005dba <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	461a      	mov	r2, r3
 8005db2:	69b9      	ldr	r1, [r7, #24]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ff69 	bl	8005c8c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fe56 	bl	8005a74 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1af      	bne.n	8005d3c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3720      	adds	r7, #32
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <LL_RCC_HSI_IsReady>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005dec:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <LL_RCC_HSI_IsReady+0x24>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df8:	d101      	bne.n	8005dfe <LL_RCC_HSI_IsReady+0x16>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <LL_RCC_HSI_IsReady+0x18>
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000

08005e10 <LL_RCC_LSE_IsReady>:
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005e14:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <LL_RCC_LSE_IsReady+0x24>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d101      	bne.n	8005e26 <LL_RCC_LSE_IsReady+0x16>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <LL_RCC_LSE_IsReady+0x18>
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000

08005e38 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d101      	bne.n	8005e4c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	40021000 	.word	0x40021000

08005e5c <LL_RCC_MSI_GetRange>:
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <LL_RCC_MSI_GetRange+0x18>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40021000 	.word	0x40021000

08005e78 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8005e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e82:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40021000 	.word	0x40021000

08005e94 <LL_RCC_GetSysClkSource>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e98:	4b04      	ldr	r3, [pc, #16]	; (8005eac <LL_RCC_GetSysClkSource+0x18>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 030c 	and.w	r3, r3, #12
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40021000 	.word	0x40021000

08005eb0 <LL_RCC_GetAHBPrescaler>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <LL_RCC_GetAHBPrescaler+0x18>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40021000 	.word	0x40021000

08005ecc <LL_RCC_GetAPB1Prescaler>:
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000

08005ee8 <LL_RCC_GetAPB2Prescaler>:
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40021000 	.word	0x40021000

08005f04 <LL_RCC_GetUSARTClockSource>:
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <LL_RCC_GetUSARTClockSource+0x24>)
 8005f0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	401a      	ands	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	041b      	lsls	r3, r3, #16
 8005f1a:	4313      	orrs	r3, r2
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	40021000 	.word	0x40021000

08005f2c <LL_RCC_GetUARTClockSource>:
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <LL_RCC_GetUARTClockSource+0x24>)
 8005f36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	401a      	ands	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	041b      	lsls	r3, r3, #16
 8005f42:	4313      	orrs	r3, r2
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40021000 	.word	0x40021000

08005f54 <LL_RCC_PLL_GetMainSource>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <LL_RCC_PLL_GetMainSource+0x18>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40021000 	.word	0x40021000

08005f70 <LL_RCC_PLL_GetN>:
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <LL_RCC_PLL_GetN+0x18>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40021000 	.word	0x40021000

08005f8c <LL_RCC_PLL_GetR>:
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f90:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <LL_RCC_PLL_GetR+0x18>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40021000 	.word	0x40021000

08005fa8 <LL_RCC_PLL_GetDivider>:
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005fac:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <LL_RCC_PLL_GetDivider+0x18>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40021000 	.word	0x40021000

08005fc4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d137      	bne.n	8006046 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff ff94 	bl	8005f04 <LL_RCC_GetUSARTClockSource>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	f200 80b3 	bhi.w	800614e <LL_RCC_GetUSARTClockFreq+0x18a>
 8005fe8:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	0800602f 	.word	0x0800602f
 8005ff4:	08006001 	.word	0x08006001
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	0800601b 	.word	0x0800601b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006000:	f000 f95c 	bl	80062bc <RCC_GetSystemClockFreq>
 8006004:	60f8      	str	r0, [r7, #12]
        break;
 8006006:	e0b5      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006008:	f7ff feee 	bl	8005de8 <LL_RCC_HSI_IsReady>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 809f 	beq.w	8006152 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8006014:	4b5a      	ldr	r3, [pc, #360]	; (8006180 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006016:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006018:	e09b      	b.n	8006152 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800601a:	f7ff fef9 	bl	8005e10 <LL_RCC_LSE_IsReady>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8098 	beq.w	8006156 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8006026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800602c:	e093      	b.n	8006156 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800602e:	f000 f945 	bl	80062bc <RCC_GetSystemClockFreq>
 8006032:	4603      	mov	r3, r0
 8006034:	4618      	mov	r0, r3
 8006036:	f000 f9d1 	bl	80063dc <RCC_GetHCLKClockFreq>
 800603a:	4603      	mov	r3, r0
 800603c:	4618      	mov	r0, r3
 800603e:	f000 f9f7 	bl	8006430 <RCC_GetPCLK2ClockFreq>
 8006042:	60f8      	str	r0, [r7, #12]
        break;
 8006044:	e096      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d146      	bne.n	80060da <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff ff59 	bl	8005f04 <LL_RCC_GetUSARTClockSource>
 8006052:	4603      	mov	r3, r0
 8006054:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006058:	2b0c      	cmp	r3, #12
 800605a:	d87e      	bhi.n	800615a <LL_RCC_GetUSARTClockFreq+0x196>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	080060c3 	.word	0x080060c3
 8006068:	0800615b 	.word	0x0800615b
 800606c:	0800615b 	.word	0x0800615b
 8006070:	0800615b 	.word	0x0800615b
 8006074:	08006099 	.word	0x08006099
 8006078:	0800615b 	.word	0x0800615b
 800607c:	0800615b 	.word	0x0800615b
 8006080:	0800615b 	.word	0x0800615b
 8006084:	080060a1 	.word	0x080060a1
 8006088:	0800615b 	.word	0x0800615b
 800608c:	0800615b 	.word	0x0800615b
 8006090:	0800615b 	.word	0x0800615b
 8006094:	080060b1 	.word	0x080060b1
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006098:	f000 f910 	bl	80062bc <RCC_GetSystemClockFreq>
 800609c:	60f8      	str	r0, [r7, #12]
        break;
 800609e:	e069      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80060a0:	f7ff fea2 	bl	8005de8 <LL_RCC_HSI_IsReady>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d059      	beq.n	800615e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80060aa:	4b35      	ldr	r3, [pc, #212]	; (8006180 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80060ac:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060ae:	e056      	b.n	800615e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80060b0:	f7ff feae 	bl	8005e10 <LL_RCC_LSE_IsReady>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d053      	beq.n	8006162 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060c0:	e04f      	b.n	8006162 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80060c2:	f000 f8fb 	bl	80062bc <RCC_GetSystemClockFreq>
 80060c6:	4603      	mov	r3, r0
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f987 	bl	80063dc <RCC_GetHCLKClockFreq>
 80060ce:	4603      	mov	r3, r0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 f999 	bl	8006408 <RCC_GetPCLK1ClockFreq>
 80060d6:	60f8      	str	r0, [r7, #12]
        break;
 80060d8:	e04c      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b30      	cmp	r3, #48	; 0x30
 80060de:	d142      	bne.n	8006166 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff ff0f 	bl	8005f04 <LL_RCC_GetUSARTClockSource>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80060ec:	d01a      	beq.n	8006124 <LL_RCC_GetUSARTClockFreq+0x160>
 80060ee:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80060f2:	d83a      	bhi.n	800616a <LL_RCC_GetUSARTClockFreq+0x1a6>
 80060f4:	4a23      	ldr	r2, [pc, #140]	; (8006184 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00c      	beq.n	8006114 <LL_RCC_GetUSARTClockFreq+0x150>
 80060fa:	4a22      	ldr	r2, [pc, #136]	; (8006184 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d834      	bhi.n	800616a <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006104:	d017      	beq.n	8006136 <LL_RCC_GetUSARTClockFreq+0x172>
 8006106:	4a20      	ldr	r2, [pc, #128]	; (8006188 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d12e      	bne.n	800616a <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800610c:	f000 f8d6 	bl	80062bc <RCC_GetSystemClockFreq>
 8006110:	60f8      	str	r0, [r7, #12]
          break;
 8006112:	e02f      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8006114:	f7ff fe68 	bl	8005de8 <LL_RCC_HSI_IsReady>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d027      	beq.n	800616e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800611e:	4b18      	ldr	r3, [pc, #96]	; (8006180 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006120:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006122:	e024      	b.n	800616e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006124:	f7ff fe74 	bl	8005e10 <LL_RCC_LSE_IsReady>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d021      	beq.n	8006172 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800612e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006132:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006134:	e01d      	b.n	8006172 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006136:	f000 f8c1 	bl	80062bc <RCC_GetSystemClockFreq>
 800613a:	4603      	mov	r3, r0
 800613c:	4618      	mov	r0, r3
 800613e:	f000 f94d 	bl	80063dc <RCC_GetHCLKClockFreq>
 8006142:	4603      	mov	r3, r0
 8006144:	4618      	mov	r0, r3
 8006146:	f000 f95f 	bl	8006408 <RCC_GetPCLK1ClockFreq>
 800614a:	60f8      	str	r0, [r7, #12]
          break;
 800614c:	e012      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800614e:	bf00      	nop
 8006150:	e010      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006152:	bf00      	nop
 8006154:	e00e      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006156:	bf00      	nop
 8006158:	e00c      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800615a:	bf00      	nop
 800615c:	e00a      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800615e:	bf00      	nop
 8006160:	e008      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006162:	bf00      	nop
 8006164:	e006      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006166:	bf00      	nop
 8006168:	e004      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006172:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006174:	68fb      	ldr	r3, [r7, #12]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	00f42400 	.word	0x00f42400
 8006184:	00300020 	.word	0x00300020
 8006188:	00300010 	.word	0x00300010

0800618c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2bc0      	cmp	r3, #192	; 0xc0
 800619c:	d136      	bne.n	800620c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fec4 	bl	8005f2c <LL_RCC_GetUARTClockSource>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80061aa:	d01a      	beq.n	80061e2 <LL_RCC_GetUARTClockFreq+0x56>
 80061ac:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80061b0:	d82e      	bhi.n	8006210 <LL_RCC_GetUARTClockFreq+0x84>
 80061b2:	4a3d      	ldr	r2, [pc, #244]	; (80062a8 <LL_RCC_GetUARTClockFreq+0x11c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00c      	beq.n	80061d2 <LL_RCC_GetUARTClockFreq+0x46>
 80061b8:	4a3b      	ldr	r2, [pc, #236]	; (80062a8 <LL_RCC_GetUARTClockFreq+0x11c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d828      	bhi.n	8006210 <LL_RCC_GetUARTClockFreq+0x84>
 80061be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061c2:	d017      	beq.n	80061f4 <LL_RCC_GetUARTClockFreq+0x68>
 80061c4:	4a39      	ldr	r2, [pc, #228]	; (80062ac <LL_RCC_GetUARTClockFreq+0x120>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d122      	bne.n	8006210 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80061ca:	f000 f877 	bl	80062bc <RCC_GetSystemClockFreq>
 80061ce:	60f8      	str	r0, [r7, #12]
        break;
 80061d0:	e023      	b.n	800621a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80061d2:	f7ff fe09 	bl	8005de8 <LL_RCC_HSI_IsReady>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 80061dc:	4b34      	ldr	r3, [pc, #208]	; (80062b0 <LL_RCC_GetUARTClockFreq+0x124>)
 80061de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80061e0:	e018      	b.n	8006214 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80061e2:	f7ff fe15 	bl	8005e10 <LL_RCC_LSE_IsReady>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d015      	beq.n	8006218 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 80061ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80061f2:	e011      	b.n	8006218 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80061f4:	f000 f862 	bl	80062bc <RCC_GetSystemClockFreq>
 80061f8:	4603      	mov	r3, r0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f8ee 	bl	80063dc <RCC_GetHCLKClockFreq>
 8006200:	4603      	mov	r3, r0
 8006202:	4618      	mov	r0, r3
 8006204:	f000 f900 	bl	8006408 <RCC_GetPCLK1ClockFreq>
 8006208:	60f8      	str	r0, [r7, #12]
        break;
 800620a:	e006      	b.n	800621a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 800620c:	bf00      	nop
 800620e:	e004      	b.n	800621a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006210:	bf00      	nop
 8006212:	e002      	b.n	800621a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006214:	bf00      	nop
 8006216:	e000      	b.n	800621a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006218:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006220:	d136      	bne.n	8006290 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff fe82 	bl	8005f2c <LL_RCC_GetUARTClockSource>
 8006228:	4603      	mov	r3, r0
 800622a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800622e:	d01a      	beq.n	8006266 <LL_RCC_GetUARTClockFreq+0xda>
 8006230:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006234:	d82e      	bhi.n	8006294 <LL_RCC_GetUARTClockFreq+0x108>
 8006236:	4a1f      	ldr	r2, [pc, #124]	; (80062b4 <LL_RCC_GetUARTClockFreq+0x128>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00c      	beq.n	8006256 <LL_RCC_GetUARTClockFreq+0xca>
 800623c:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <LL_RCC_GetUARTClockFreq+0x128>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d828      	bhi.n	8006294 <LL_RCC_GetUARTClockFreq+0x108>
 8006242:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006246:	d017      	beq.n	8006278 <LL_RCC_GetUARTClockFreq+0xec>
 8006248:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <LL_RCC_GetUARTClockFreq+0x12c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d122      	bne.n	8006294 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800624e:	f000 f835 	bl	80062bc <RCC_GetSystemClockFreq>
 8006252:	60f8      	str	r0, [r7, #12]
        break;
 8006254:	e023      	b.n	800629e <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006256:	f7ff fdc7 	bl	8005de8 <LL_RCC_HSI_IsReady>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01b      	beq.n	8006298 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006260:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <LL_RCC_GetUARTClockFreq+0x124>)
 8006262:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006264:	e018      	b.n	8006298 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006266:	f7ff fdd3 	bl	8005e10 <LL_RCC_LSE_IsReady>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d015      	beq.n	800629c <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006274:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006276:	e011      	b.n	800629c <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006278:	f000 f820 	bl	80062bc <RCC_GetSystemClockFreq>
 800627c:	4603      	mov	r3, r0
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f8ac 	bl	80063dc <RCC_GetHCLKClockFreq>
 8006284:	4603      	mov	r3, r0
 8006286:	4618      	mov	r0, r3
 8006288:	f000 f8be 	bl	8006408 <RCC_GetPCLK1ClockFreq>
 800628c:	60f8      	str	r0, [r7, #12]
        break;
 800628e:	e006      	b.n	800629e <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006290:	bf00      	nop
 8006292:	e004      	b.n	800629e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006294:	bf00      	nop
 8006296:	e002      	b.n	800629e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006298:	bf00      	nop
 800629a:	e000      	b.n	800629e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800629c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800629e:	68fb      	ldr	r3, [r7, #12]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	00c00080 	.word	0x00c00080
 80062ac:	00c00040 	.word	0x00c00040
 80062b0:	00f42400 	.word	0x00f42400
 80062b4:	03000200 	.word	0x03000200
 80062b8:	03000100 	.word	0x03000100

080062bc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80062c2:	f7ff fde7 	bl	8005e94 <LL_RCC_GetSysClkSource>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b0c      	cmp	r3, #12
 80062ca:	d851      	bhi.n	8006370 <RCC_GetSystemClockFreq+0xb4>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <RCC_GetSystemClockFreq+0x18>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	08006309 	.word	0x08006309
 80062d8:	08006371 	.word	0x08006371
 80062dc:	08006371 	.word	0x08006371
 80062e0:	08006371 	.word	0x08006371
 80062e4:	0800635d 	.word	0x0800635d
 80062e8:	08006371 	.word	0x08006371
 80062ec:	08006371 	.word	0x08006371
 80062f0:	08006371 	.word	0x08006371
 80062f4:	08006363 	.word	0x08006363
 80062f8:	08006371 	.word	0x08006371
 80062fc:	08006371 	.word	0x08006371
 8006300:	08006371 	.word	0x08006371
 8006304:	08006369 	.word	0x08006369
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006308:	f7ff fd96 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d111      	bne.n	8006336 <RCC_GetSystemClockFreq+0x7a>
 8006312:	f7ff fd91 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d004      	beq.n	8006326 <RCC_GetSystemClockFreq+0x6a>
 800631c:	f7ff fd9e 	bl	8005e5c <LL_RCC_MSI_GetRange>
 8006320:	4603      	mov	r3, r0
 8006322:	0a1b      	lsrs	r3, r3, #8
 8006324:	e003      	b.n	800632e <RCC_GetSystemClockFreq+0x72>
 8006326:	f7ff fda7 	bl	8005e78 <LL_RCC_MSI_GetRangeAfterStandby>
 800632a:	4603      	mov	r3, r0
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	4a28      	ldr	r2, [pc, #160]	; (80063d0 <RCC_GetSystemClockFreq+0x114>)
 8006330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006334:	e010      	b.n	8006358 <RCC_GetSystemClockFreq+0x9c>
 8006336:	f7ff fd7f 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <RCC_GetSystemClockFreq+0x8e>
 8006340:	f7ff fd8c 	bl	8005e5c <LL_RCC_MSI_GetRange>
 8006344:	4603      	mov	r3, r0
 8006346:	091b      	lsrs	r3, r3, #4
 8006348:	e003      	b.n	8006352 <RCC_GetSystemClockFreq+0x96>
 800634a:	f7ff fd95 	bl	8005e78 <LL_RCC_MSI_GetRangeAfterStandby>
 800634e:	4603      	mov	r3, r0
 8006350:	091b      	lsrs	r3, r3, #4
 8006352:	4a1f      	ldr	r2, [pc, #124]	; (80063d0 <RCC_GetSystemClockFreq+0x114>)
 8006354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006358:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800635a:	e033      	b.n	80063c4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800635c:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <RCC_GetSystemClockFreq+0x118>)
 800635e:	607b      	str	r3, [r7, #4]
      break;
 8006360:	e030      	b.n	80063c4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006362:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <RCC_GetSystemClockFreq+0x11c>)
 8006364:	607b      	str	r3, [r7, #4]
      break;
 8006366:	e02d      	b.n	80063c4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006368:	f000 f876 	bl	8006458 <RCC_PLL_GetFreqDomain_SYS>
 800636c:	6078      	str	r0, [r7, #4]
      break;
 800636e:	e029      	b.n	80063c4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006370:	f7ff fd62 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d111      	bne.n	800639e <RCC_GetSystemClockFreq+0xe2>
 800637a:	f7ff fd5d 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <RCC_GetSystemClockFreq+0xd2>
 8006384:	f7ff fd6a 	bl	8005e5c <LL_RCC_MSI_GetRange>
 8006388:	4603      	mov	r3, r0
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	e003      	b.n	8006396 <RCC_GetSystemClockFreq+0xda>
 800638e:	f7ff fd73 	bl	8005e78 <LL_RCC_MSI_GetRangeAfterStandby>
 8006392:	4603      	mov	r3, r0
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	4a0e      	ldr	r2, [pc, #56]	; (80063d0 <RCC_GetSystemClockFreq+0x114>)
 8006398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639c:	e010      	b.n	80063c0 <RCC_GetSystemClockFreq+0x104>
 800639e:	f7ff fd4b 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <RCC_GetSystemClockFreq+0xf6>
 80063a8:	f7ff fd58 	bl	8005e5c <LL_RCC_MSI_GetRange>
 80063ac:	4603      	mov	r3, r0
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	e003      	b.n	80063ba <RCC_GetSystemClockFreq+0xfe>
 80063b2:	f7ff fd61 	bl	8005e78 <LL_RCC_MSI_GetRangeAfterStandby>
 80063b6:	4603      	mov	r3, r0
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	4a05      	ldr	r2, [pc, #20]	; (80063d0 <RCC_GetSystemClockFreq+0x114>)
 80063bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80063c2:	bf00      	nop
  }

  return frequency;
 80063c4:	687b      	ldr	r3, [r7, #4]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	08006b70 	.word	0x08006b70
 80063d4:	00f42400 	.word	0x00f42400
 80063d8:	007a1200 	.word	0x007a1200

080063dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80063e4:	f7ff fd64 	bl	8005eb0 <LL_RCC_GetAHBPrescaler>
 80063e8:	4603      	mov	r3, r0
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	4a04      	ldr	r2, [pc, #16]	; (8006404 <RCC_GetHCLKClockFreq+0x28>)
 80063f2:	5cd3      	ldrb	r3, [r2, r3]
 80063f4:	461a      	mov	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	40d3      	lsrs	r3, r2
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	08006b58 	.word	0x08006b58

08006408 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006410:	f7ff fd5c 	bl	8005ecc <LL_RCC_GetAPB1Prescaler>
 8006414:	4603      	mov	r3, r0
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	4a04      	ldr	r2, [pc, #16]	; (800642c <RCC_GetPCLK1ClockFreq+0x24>)
 800641a:	5cd3      	ldrb	r3, [r2, r3]
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	40d3      	lsrs	r3, r2
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	08006b68 	.word	0x08006b68

08006430 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006438:	f7ff fd56 	bl	8005ee8 <LL_RCC_GetAPB2Prescaler>
 800643c:	4603      	mov	r3, r0
 800643e:	0adb      	lsrs	r3, r3, #11
 8006440:	4a04      	ldr	r2, [pc, #16]	; (8006454 <RCC_GetPCLK2ClockFreq+0x24>)
 8006442:	5cd3      	ldrb	r3, [r2, r3]
 8006444:	461a      	mov	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	40d3      	lsrs	r3, r2
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	08006b68 	.word	0x08006b68

08006458 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006458:	b590      	push	{r4, r7, lr}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800645e:	f7ff fd79 	bl	8005f54 <LL_RCC_PLL_GetMainSource>
 8006462:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d036      	beq.n	80064d8 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d836      	bhi.n	80064de <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d003      	beq.n	800647e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d02a      	beq.n	80064d2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 800647c:	e02f      	b.n	80064de <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800647e:	f7ff fcdb 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d111      	bne.n	80064ac <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006488:	f7ff fcd6 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006492:	f7ff fce3 	bl	8005e5c <LL_RCC_MSI_GetRange>
 8006496:	4603      	mov	r3, r0
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	e003      	b.n	80064a4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800649c:	f7ff fcec 	bl	8005e78 <LL_RCC_MSI_GetRangeAfterStandby>
 80064a0:	4603      	mov	r3, r0
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	4a2f      	ldr	r2, [pc, #188]	; (8006564 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80064a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064aa:	e010      	b.n	80064ce <RCC_PLL_GetFreqDomain_SYS+0x76>
 80064ac:	f7ff fcc4 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80064b6:	f7ff fcd1 	bl	8005e5c <LL_RCC_MSI_GetRange>
 80064ba:	4603      	mov	r3, r0
 80064bc:	091b      	lsrs	r3, r3, #4
 80064be:	e003      	b.n	80064c8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80064c0:	f7ff fcda 	bl	8005e78 <LL_RCC_MSI_GetRangeAfterStandby>
 80064c4:	4603      	mov	r3, r0
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	4a26      	ldr	r2, [pc, #152]	; (8006564 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80064ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ce:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80064d0:	e02f      	b.n	8006532 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80064d2:	4b25      	ldr	r3, [pc, #148]	; (8006568 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80064d4:	607b      	str	r3, [r7, #4]
      break;
 80064d6:	e02c      	b.n	8006532 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80064d8:	4b24      	ldr	r3, [pc, #144]	; (800656c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80064da:	607b      	str	r3, [r7, #4]
      break;
 80064dc:	e029      	b.n	8006532 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80064de:	f7ff fcab 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d111      	bne.n	800650c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80064e8:	f7ff fca6 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80064f2:	f7ff fcb3 	bl	8005e5c <LL_RCC_MSI_GetRange>
 80064f6:	4603      	mov	r3, r0
 80064f8:	0a1b      	lsrs	r3, r3, #8
 80064fa:	e003      	b.n	8006504 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80064fc:	f7ff fcbc 	bl	8005e78 <LL_RCC_MSI_GetRangeAfterStandby>
 8006500:	4603      	mov	r3, r0
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	4a17      	ldr	r2, [pc, #92]	; (8006564 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650a:	e010      	b.n	800652e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800650c:	f7ff fc94 	bl	8005e38 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8006516:	f7ff fca1 	bl	8005e5c <LL_RCC_MSI_GetRange>
 800651a:	4603      	mov	r3, r0
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	e003      	b.n	8006528 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006520:	f7ff fcaa 	bl	8005e78 <LL_RCC_MSI_GetRangeAfterStandby>
 8006524:	4603      	mov	r3, r0
 8006526:	091b      	lsrs	r3, r3, #4
 8006528:	4a0e      	ldr	r2, [pc, #56]	; (8006564 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800652a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006530:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006532:	f7ff fd39 	bl	8005fa8 <LL_RCC_PLL_GetDivider>
 8006536:	4603      	mov	r3, r0
 8006538:	091b      	lsrs	r3, r3, #4
 800653a:	3301      	adds	r3, #1
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	fbb2 f4f3 	udiv	r4, r2, r3
 8006542:	f7ff fd15 	bl	8005f70 <LL_RCC_PLL_GetN>
 8006546:	4603      	mov	r3, r0
 8006548:	fb03 f404 	mul.w	r4, r3, r4
 800654c:	f7ff fd1e 	bl	8005f8c <LL_RCC_PLL_GetR>
 8006550:	4603      	mov	r3, r0
 8006552:	0e5b      	lsrs	r3, r3, #25
 8006554:	3301      	adds	r3, #1
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	bd90      	pop	{r4, r7, pc}
 8006564:	08006b70 	.word	0x08006b70
 8006568:	00f42400 	.word	0x00f42400
 800656c:	007a1200 	.word	0x007a1200

08006570 <LL_SPI_IsEnabled>:
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d101      	bne.n	8006588 <LL_SPI_IsEnabled+0x18>
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <LL_SPI_IsEnabled+0x1a>
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <LL_SPI_SetRxFIFOThreshold>:
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	605a      	str	r2, [r3, #4]
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_SPI_SetCRCPolynomial>:
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	611a      	str	r2, [r3, #16]
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff ffc0 	bl	8006570 <LL_SPI_IsEnabled>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d145      	bne.n	8006682 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065fe:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	6811      	ldr	r1, [r2, #0]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	6852      	ldr	r2, [r2, #4]
 800660a:	4311      	orrs	r1, r2
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	68d2      	ldr	r2, [r2, #12]
 8006610:	4311      	orrs	r1, r2
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	6912      	ldr	r2, [r2, #16]
 8006616:	4311      	orrs	r1, r2
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	6952      	ldr	r2, [r2, #20]
 800661c:	4311      	orrs	r1, r2
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	6992      	ldr	r2, [r2, #24]
 8006622:	4311      	orrs	r1, r2
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	69d2      	ldr	r2, [r2, #28]
 8006628:	4311      	orrs	r1, r2
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	6a12      	ldr	r2, [r2, #32]
 800662e:	430a      	orrs	r2, r1
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800663e:	f023 0304 	bic.w	r3, r3, #4
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	6891      	ldr	r1, [r2, #8]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	6952      	ldr	r2, [r2, #20]
 800664a:	0c12      	lsrs	r2, r2, #16
 800664c:	430a      	orrs	r2, r1
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800665c:	d204      	bcs.n	8006668 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800665e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff ff97 	bl	8006596 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006670:	d105      	bne.n	800667e <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff ff9f 	bl	80065bc <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800667e:	2300      	movs	r3, #0
 8006680:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <LL_TIM_SetPrescaler>:
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <LL_TIM_SetAutoReload>:
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <LL_TIM_SetRepetitionCounter>:
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f043 0201 	orr.w	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	615a      	str	r2, [r3, #20]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a3d      	ldr	r2, [pc, #244]	; (8006808 <LL_TIM_Init+0x108>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <LL_TIM_Init+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d00f      	beq.n	8006740 <LL_TIM_Init+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3a      	ldr	r2, [pc, #232]	; (800680c <LL_TIM_Init+0x10c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <LL_TIM_Init+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a39      	ldr	r2, [pc, #228]	; (8006810 <LL_TIM_Init+0x110>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <LL_TIM_Init+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a38      	ldr	r2, [pc, #224]	; (8006814 <LL_TIM_Init+0x114>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <LL_TIM_Init+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a37      	ldr	r2, [pc, #220]	; (8006818 <LL_TIM_Init+0x118>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d106      	bne.n	800674e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a2d      	ldr	r2, [pc, #180]	; (8006808 <LL_TIM_Init+0x108>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d01f      	beq.n	8006796 <LL_TIM_Init+0x96>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675c:	d01b      	beq.n	8006796 <LL_TIM_Init+0x96>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a2a      	ldr	r2, [pc, #168]	; (800680c <LL_TIM_Init+0x10c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d017      	beq.n	8006796 <LL_TIM_Init+0x96>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a29      	ldr	r2, [pc, #164]	; (8006810 <LL_TIM_Init+0x110>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <LL_TIM_Init+0x96>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a28      	ldr	r2, [pc, #160]	; (8006814 <LL_TIM_Init+0x114>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00f      	beq.n	8006796 <LL_TIM_Init+0x96>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a27      	ldr	r2, [pc, #156]	; (8006818 <LL_TIM_Init+0x118>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00b      	beq.n	8006796 <LL_TIM_Init+0x96>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a26      	ldr	r2, [pc, #152]	; (800681c <LL_TIM_Init+0x11c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d007      	beq.n	8006796 <LL_TIM_Init+0x96>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a25      	ldr	r2, [pc, #148]	; (8006820 <LL_TIM_Init+0x120>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <LL_TIM_Init+0x96>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a24      	ldr	r2, [pc, #144]	; (8006824 <LL_TIM_Init+0x124>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d106      	bne.n	80067a4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff79 	bl	80066a8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ff65 	bl	800668c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a10      	ldr	r2, [pc, #64]	; (8006808 <LL_TIM_Init+0x108>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00f      	beq.n	80067ea <LL_TIM_Init+0xea>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a12      	ldr	r2, [pc, #72]	; (8006818 <LL_TIM_Init+0x118>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <LL_TIM_Init+0xea>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a11      	ldr	r2, [pc, #68]	; (800681c <LL_TIM_Init+0x11c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <LL_TIM_Init+0xea>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a10      	ldr	r2, [pc, #64]	; (8006820 <LL_TIM_Init+0x120>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <LL_TIM_Init+0xea>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a0f      	ldr	r2, [pc, #60]	; (8006824 <LL_TIM_Init+0x124>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d105      	bne.n	80067f6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff67 	bl	80066c4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff ff72 	bl	80066e0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800

08006828 <LL_USART_IsEnabled>:
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <LL_USART_IsEnabled+0x18>
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <LL_USART_IsEnabled+0x1a>
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <LL_USART_SetStopBitsLength>:
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	605a      	str	r2, [r3, #4]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <LL_USART_SetHWFlowCtrl>:
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	609a      	str	r2, [r3, #8]
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <LL_USART_SetBaudRate>:
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
 80068a6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ae:	d11a      	bne.n	80068e6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	005a      	lsls	r2, r3, #1
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	441a      	add	r2, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80068ca:	4013      	ands	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	60da      	str	r2, [r3, #12]
}
 80068e4:	e00a      	b.n	80068fc <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	085a      	lsrs	r2, r3, #1
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	441a      	add	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	60da      	str	r2, [r3, #12]
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006916:	2300      	movs	r3, #0
 8006918:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff ff84 	bl	8006828 <LL_USART_IsEnabled>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d15b      	bne.n	80069de <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b2f      	ldr	r3, [pc, #188]	; (80069e8 <LL_USART_Init+0xe0>)
 800692c:	4013      	ands	r3, r2
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	6851      	ldr	r1, [r2, #4]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	68d2      	ldr	r2, [r2, #12]
 8006936:	4311      	orrs	r1, r2
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	6912      	ldr	r2, [r2, #16]
 800693c:	4311      	orrs	r1, r2
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	6992      	ldr	r2, [r2, #24]
 8006942:	430a      	orrs	r2, r1
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff7c 	bl	800684e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff ff89 	bl	8006874 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a21      	ldr	r2, [pc, #132]	; (80069ec <LL_USART_Init+0xe4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d104      	bne.n	8006974 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800696a:	2003      	movs	r0, #3
 800696c:	f7ff fb2a 	bl	8005fc4 <LL_RCC_GetUSARTClockFreq>
 8006970:	60b8      	str	r0, [r7, #8]
 8006972:	e023      	b.n	80069bc <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a1e      	ldr	r2, [pc, #120]	; (80069f0 <LL_USART_Init+0xe8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d104      	bne.n	8006986 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800697c:	200c      	movs	r0, #12
 800697e:	f7ff fb21 	bl	8005fc4 <LL_RCC_GetUSARTClockFreq>
 8006982:	60b8      	str	r0, [r7, #8]
 8006984:	e01a      	b.n	80069bc <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <LL_USART_Init+0xec>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d104      	bne.n	8006998 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800698e:	2030      	movs	r0, #48	; 0x30
 8006990:	f7ff fb18 	bl	8005fc4 <LL_RCC_GetUSARTClockFreq>
 8006994:	60b8      	str	r0, [r7, #8]
 8006996:	e011      	b.n	80069bc <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <LL_USART_Init+0xf0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d104      	bne.n	80069aa <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80069a0:	20c0      	movs	r0, #192	; 0xc0
 80069a2:	f7ff fbf3 	bl	800618c <LL_RCC_GetUARTClockFreq>
 80069a6:	60b8      	str	r0, [r7, #8]
 80069a8:	e008      	b.n	80069bc <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a13      	ldr	r2, [pc, #76]	; (80069fc <LL_USART_Init+0xf4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d104      	bne.n	80069bc <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80069b2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80069b6:	f7ff fbe9 	bl	800618c <LL_RCC_GetUARTClockFreq>
 80069ba:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00d      	beq.n	80069de <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff ff5e 	bl	800689a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	efff69f3 	.word	0xefff69f3
 80069ec:	40013800 	.word	0x40013800
 80069f0:	40004400 	.word	0x40004400
 80069f4:	40004800 	.word	0x40004800
 80069f8:	40004c00 	.word	0x40004c00
 80069fc:	40005000 	.word	0x40005000

08006a00 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a12:	4a07      	ldr	r2, [pc, #28]	; (8006a30 <LL_InitTick+0x30>)
 8006a14:	3b01      	subs	r3, #1
 8006a16:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <LL_InitTick+0x30>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <LL_InitTick+0x30>)
 8006a20:	2205      	movs	r2, #5
 8006a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	e000e010 	.word	0xe000e010

08006a34 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006a3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff ffdd 	bl	8006a00 <LL_InitTick>
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006a58:	4b10      	ldr	r3, [pc, #64]	; (8006a9c <LL_mDelay+0x4c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006a62:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d00c      	beq.n	8006a86 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8006a72:	e008      	b.n	8006a86 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006a74:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <LL_mDelay+0x4c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f3      	bne.n	8006a74 <LL_mDelay+0x24>
    }
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	e000e010 	.word	0xe000e010

08006aa0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006aa8:	4a04      	ldr	r2, [pc, #16]	; (8006abc <LL_SetSystemCoreClock+0x1c>)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6013      	str	r3, [r2, #0]
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000004 	.word	0x20000004

08006ac0 <__libc_init_array>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	4d0d      	ldr	r5, [pc, #52]	; (8006af8 <__libc_init_array+0x38>)
 8006ac4:	4c0d      	ldr	r4, [pc, #52]	; (8006afc <__libc_init_array+0x3c>)
 8006ac6:	1b64      	subs	r4, r4, r5
 8006ac8:	10a4      	asrs	r4, r4, #2
 8006aca:	2600      	movs	r6, #0
 8006acc:	42a6      	cmp	r6, r4
 8006ace:	d109      	bne.n	8006ae4 <__libc_init_array+0x24>
 8006ad0:	4d0b      	ldr	r5, [pc, #44]	; (8006b00 <__libc_init_array+0x40>)
 8006ad2:	4c0c      	ldr	r4, [pc, #48]	; (8006b04 <__libc_init_array+0x44>)
 8006ad4:	f000 f82e 	bl	8006b34 <_init>
 8006ad8:	1b64      	subs	r4, r4, r5
 8006ada:	10a4      	asrs	r4, r4, #2
 8006adc:	2600      	movs	r6, #0
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	d105      	bne.n	8006aee <__libc_init_array+0x2e>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae8:	4798      	blx	r3
 8006aea:	3601      	adds	r6, #1
 8006aec:	e7ee      	b.n	8006acc <__libc_init_array+0xc>
 8006aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af2:	4798      	blx	r3
 8006af4:	3601      	adds	r6, #1
 8006af6:	e7f2      	b.n	8006ade <__libc_init_array+0x1e>
 8006af8:	08006ba0 	.word	0x08006ba0
 8006afc:	08006ba0 	.word	0x08006ba0
 8006b00:	08006ba0 	.word	0x08006ba0
 8006b04:	08006ba4 	.word	0x08006ba4

08006b08 <memcpy>:
 8006b08:	440a      	add	r2, r1
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b10:	d100      	bne.n	8006b14 <memcpy+0xc>
 8006b12:	4770      	bx	lr
 8006b14:	b510      	push	{r4, lr}
 8006b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b1e:	4291      	cmp	r1, r2
 8006b20:	d1f9      	bne.n	8006b16 <memcpy+0xe>
 8006b22:	bd10      	pop	{r4, pc}

08006b24 <memset>:
 8006b24:	4402      	add	r2, r0
 8006b26:	4603      	mov	r3, r0
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d100      	bne.n	8006b2e <memset+0xa>
 8006b2c:	4770      	bx	lr
 8006b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b32:	e7f9      	b.n	8006b28 <memset+0x4>

08006b34 <_init>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	bf00      	nop
 8006b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3a:	bc08      	pop	{r3}
 8006b3c:	469e      	mov	lr, r3
 8006b3e:	4770      	bx	lr

08006b40 <_fini>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	bf00      	nop
 8006b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b46:	bc08      	pop	{r3}
 8006b48:	469e      	mov	lr, r3
 8006b4a:	4770      	bx	lr
