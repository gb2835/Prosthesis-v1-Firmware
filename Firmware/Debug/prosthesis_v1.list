
prosthesis_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006224  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006400  08006400  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006400  08006400  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006400  08006400  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006408  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000018  08006420  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08006420  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f25a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002abc  00000000  00000000  0002f2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00031d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00032c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025509  00000000  00000000  000339a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc1a  00000000  00000000  00058eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c94ee  00000000  00000000  00066acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ffb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d30  00000000  00000000  0013000c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006394 	.word	0x08006394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08006394 	.word	0x08006394

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b087      	sub	sp, #28
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3330      	adds	r3, #48	; 0x30
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	f003 030c 	and.w	r3, r3, #12
 8000a46:	4413      	add	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	f003 031f 	and.w	r3, r3, #31
 8000a54:	211f      	movs	r1, #31
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0e9b      	lsrs	r3, r3, #26
 8000a62:	f003 011f 	and.w	r1, r3, #31
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	431a      	orrs	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a76:	bf00      	nop
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b087      	sub	sp, #28
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3314      	adds	r3, #20
 8000a92:	461a      	mov	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	0e5b      	lsrs	r3, r3, #25
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	4413      	add	r3, r2
 8000aa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	0d1b      	lsrs	r3, r3, #20
 8000aaa:	f003 031f 	and.w	r3, r3, #31
 8000aae:	2107      	movs	r1, #7
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	0d1b      	lsrs	r3, r3, #20
 8000abc:	f003 031f 	and.w	r3, r3, #31
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000acc:	bf00      	nop
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000af0:	43db      	mvns	r3, r3
 8000af2:	401a      	ands	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0318 	and.w	r3, r3, #24
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000afc:	40d9      	lsrs	r1, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	400b      	ands	r3, r1
 8000b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b06:	431a      	orrs	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	0007ffff 	.word	0x0007ffff

08000b20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6093      	str	r3, [r2, #8]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <LL_RCC_SetADCClockSource+0x28>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000b7e:	4905      	ldr	r1, [pc, #20]	; (8000b94 <LL_RCC_SetADCClockSource+0x28>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000

08000b98 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba4:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	; 0x50
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000c2e:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000c32:	f7ff ff9b 	bl	8000b6c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000c36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c3a:	f7ff ffad 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c3e:	2004      	movs	r0, #4
 8000c40:	f7ff ffaa 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000c44:	2304      	movs	r3, #4
 8000c46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000c50:	463b      	mov	r3, r7
 8000c52:	4619      	mov	r1, r3
 8000c54:	4831      	ldr	r0, [pc, #196]	; (8000d1c <MX_ADC1_Init+0x130>)
 8000c56:	f004 fc88 	bl	800556a <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	482f      	ldr	r0, [pc, #188]	; (8000d1c <MX_ADC1_Init+0x130>)
 8000c5e:	f7ff ffb3 	bl	8000bc8 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c62:	2300      	movs	r3, #0
 8000c64:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c72:	4619      	mov	r1, r3
 8000c74:	482a      	ldr	r0, [pc, #168]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000c76:	f004 fabd 	bl	80051f4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4821      	ldr	r0, [pc, #132]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000c9a:	f004 fad1 	bl	8005240 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	4619      	mov	r1, r3
 8000cac:	481d      	ldr	r0, [pc, #116]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000cae:	f004 fa59 	bl	8005164 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	481b      	ldr	r0, [pc, #108]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000cb6:	f7ff fea5 	bl	8000a04 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000cba:	4819      	ldr	r0, [pc, #100]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000cbc:	f7ff ff30 	bl	8000b20 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000cc2:	f7ff ff3f 	bl	8000b44 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_ADC1_Init+0x13c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	099b      	lsrs	r3, r3, #6
 8000ccc:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <MX_ADC1_Init+0x140>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	099a      	lsrs	r2, r3, #6
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_ADC1_Init+0x144>)
 8000ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ce8:	e002      	b.n	8000cf0 <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cec:	3b01      	subs	r3, #1
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f9      	bne.n	8000cea <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <MX_ADC1_Init+0x148>)
 8000cf8:	2106      	movs	r1, #6
 8000cfa:	4809      	ldr	r0, [pc, #36]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000cfc:	f7ff fe95 	bl	8000a2a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000d00:	2200      	movs	r2, #0
 8000d02:	490c      	ldr	r1, [pc, #48]	; (8000d34 <MX_ADC1_Init+0x148>)
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000d06:	f7ff febc 	bl	8000a82 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000d0a:	227f      	movs	r2, #127	; 0x7f
 8000d0c:	4909      	ldr	r1, [pc, #36]	; (8000d34 <MX_ADC1_Init+0x148>)
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000d10:	f7ff fee2 	bl	8000ad8 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3750      	adds	r7, #80	; 0x50
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	50040000 	.word	0x50040000
 8000d24:	50040300 	.word	0x50040300
 8000d28:	2000000c 	.word	0x2000000c
 8000d2c:	053e2d63 	.word	0x053e2d63
 8000d30:	cccccccd 	.word	0xcccccccd
 8000d34:	0c900008 	.word	0x0c900008

08000d38 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	; 0x50
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d7a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d7e:	f7ff fef5 	bl	8000b6c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d82:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d86:	f7ff ff07 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f7ff ff04 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000d90:	2308      	movs	r3, #8
 8000d92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d94:	2303      	movs	r3, #3
 8000d96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4830      	ldr	r0, [pc, #192]	; (8000e64 <MX_ADC2_Init+0x12c>)
 8000da2:	f004 fbe2 	bl	800556a <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 8000da6:	2108      	movs	r1, #8
 8000da8:	482e      	ldr	r0, [pc, #184]	; (8000e64 <MX_ADC2_Init+0x12c>)
 8000daa:	f7ff ff0d 	bl	8000bc8 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000dae:	2300      	movs	r3, #0
 8000db0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000dba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4829      	ldr	r0, [pc, #164]	; (8000e68 <MX_ADC2_Init+0x130>)
 8000dc2:	f004 fa17 	bl	80051f4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4820      	ldr	r0, [pc, #128]	; (8000e68 <MX_ADC2_Init+0x130>)
 8000de6:	f004 fa2b 	bl	8005240 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	4619      	mov	r1, r3
 8000df4:	481d      	ldr	r0, [pc, #116]	; (8000e6c <MX_ADC2_Init+0x134>)
 8000df6:	f004 f9b5 	bl	8005164 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	481b      	ldr	r0, [pc, #108]	; (8000e6c <MX_ADC2_Init+0x134>)
 8000dfe:	f7ff fe01 	bl	8000a04 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000e02:	4819      	ldr	r0, [pc, #100]	; (8000e68 <MX_ADC2_Init+0x130>)
 8000e04:	f7ff fe8c 	bl	8000b20 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_ADC2_Init+0x130>)
 8000e0a:	f7ff fe9b 	bl	8000b44 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_ADC2_Init+0x138>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	099b      	lsrs	r3, r3, #6
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <MX_ADC2_Init+0x13c>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	099a      	lsrs	r2, r3, #6
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_ADC2_Init+0x140>)
 8000e28:	fba3 2302 	umull	r2, r3, r3, r2
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e30:	e002      	b.n	8000e38 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e34:	3b01      	subs	r3, #1
 8000e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f9      	bne.n	8000e32 <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <MX_ADC2_Init+0x144>)
 8000e40:	2106      	movs	r1, #6
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <MX_ADC2_Init+0x130>)
 8000e44:	f7ff fdf1 	bl	8000a2a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	490c      	ldr	r1, [pc, #48]	; (8000e7c <MX_ADC2_Init+0x144>)
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_ADC2_Init+0x130>)
 8000e4e:	f7ff fe18 	bl	8000a82 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000e52:	227f      	movs	r2, #127	; 0x7f
 8000e54:	4909      	ldr	r1, [pc, #36]	; (8000e7c <MX_ADC2_Init+0x144>)
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_ADC2_Init+0x130>)
 8000e58:	f7ff fe3e 	bl	8000ad8 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	; 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	48000800 	.word	0x48000800
 8000e68:	50040100 	.word	0x50040100
 8000e6c:	50040300 	.word	0x50040300
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	053e2d63 	.word	0x053e2d63
 8000e78:	cccccccd 	.word	0xcccccccd
 8000e7c:	10c00010 	.word	0x10c00010

08000e80 <ErrorHandler_AS5145B>:
} LED_Code_e;

static LED_Code_e CM_ledCode = NoError;

void ErrorHandler_AS5145B(EncoderIndex_e deviceIndex, AS5145B_Error_e error)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
	if(deviceIndex == AnkleEncoderIndex)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <ErrorHandler_AS5145B+0x1e>
		CM_ledCode = AnkleEncoderInitError;
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <ErrorHandler_AS5145B+0x28>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e002      	b.n	8000ea4 <ErrorHandler_AS5145B+0x24>
	else
		CM_ledCode = KneeEncoderInitError;
 8000e9e:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <ErrorHandler_AS5145B+0x28>)
 8000ea0:	2206      	movs	r2, #6
 8000ea2:	701a      	strb	r2, [r3, #0]

	while(1);
 8000ea4:	e7fe      	b.n	8000ea4 <ErrorHandler_AS5145B+0x24>
 8000ea6:	bf00      	nop
 8000ea8:	20000034 	.word	0x20000034

08000eac <ErrorHandler_EPOS4>:
}

void ErrorHandler_EPOS4(MotorControllerIndex_e deviceIndex, EPOS4_Error_e error)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
	if(deviceIndex == AnkleMotorControllerIndex)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d111      	bne.n	8000ee6 <ErrorHandler_EPOS4+0x3a>
	{
		if(error == EPOS4_FaultError)
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d103      	bne.n	8000ed0 <ErrorHandler_EPOS4+0x24>
			CM_ledCode = AnkleMotorControllerFaultError;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <ErrorHandler_EPOS4+0x8c>)
 8000eca:	2203      	movs	r2, #3
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e01b      	b.n	8000f08 <ErrorHandler_EPOS4+0x5c>
		else if(error == EPOS4_AbortError)
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b09      	cmp	r3, #9
 8000ed4:	d103      	bne.n	8000ede <ErrorHandler_EPOS4+0x32>
			CM_ledCode = AnkleMotorControllerAbortError;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <ErrorHandler_EPOS4+0x8c>)
 8000ed8:	2204      	movs	r2, #4
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e014      	b.n	8000f08 <ErrorHandler_EPOS4+0x5c>
		else
			CM_ledCode = AnkleMotorControllerInitError;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <ErrorHandler_EPOS4+0x8c>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e010      	b.n	8000f08 <ErrorHandler_EPOS4+0x5c>
	}
	else
	{
		if(error == EPOS4_FaultError)
 8000ee6:	79bb      	ldrb	r3, [r7, #6]
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d103      	bne.n	8000ef4 <ErrorHandler_EPOS4+0x48>
			CM_ledCode = KneeMotorControllerFaultError;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <ErrorHandler_EPOS4+0x8c>)
 8000eee:	2208      	movs	r2, #8
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	e009      	b.n	8000f08 <ErrorHandler_EPOS4+0x5c>
		else if(error == EPOS4_AbortError)
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	d103      	bne.n	8000f02 <ErrorHandler_EPOS4+0x56>
			CM_ledCode = KneeMotorControllerAbortError;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <ErrorHandler_EPOS4+0x8c>)
 8000efc:	2209      	movs	r2, #9
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e002      	b.n	8000f08 <ErrorHandler_EPOS4+0x5c>
		else
			CM_ledCode = KneeMotorControllerInitError;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <ErrorHandler_EPOS4+0x8c>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	701a      	strb	r2, [r3, #0]
	}

	if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <ErrorHandler_EPOS4+0x90>)
 8000f0a:	785b      	ldrb	r3, [r3, #1]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <ErrorHandler_EPOS4+0x6c>
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <ErrorHandler_EPOS4+0x90>)
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d102      	bne.n	8000f1e <ErrorHandler_EPOS4+0x72>
		EPOS4_DisableVoltage(AnkleMotorControllerIndex);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f002 fbb5 	bl	8003688 <EPOS4_DisableVoltage>

	if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <ErrorHandler_EPOS4+0x90>)
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d003      	beq.n	8000f2e <ErrorHandler_EPOS4+0x82>
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <ErrorHandler_EPOS4+0x90>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d102      	bne.n	8000f34 <ErrorHandler_EPOS4+0x88>
		EPOS4_DisableVoltage(KneeMotorControllerIndex);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f002 fbaa 	bl	8003688 <EPOS4_DisableVoltage>

	while(1);
 8000f34:	e7fe      	b.n	8000f34 <ErrorHandler_EPOS4+0x88>
 8000f36:	bf00      	nop
 8000f38:	20000034 	.word	0x20000034
 8000f3c:	20000038 	.word	0x20000038

08000f40 <ErrorHandler_MCP25625>:
}

void ErrorHandler_MCP25625(uint8_t deviceIndex, MCP25625_Error_e error)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	if(deviceIndex == AnkleCAN_ControllerIndex)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <ErrorHandler_MCP25625+0x1e>
		CM_ledCode = AnkleCAN_ControllerInitError;
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <ErrorHandler_MCP25625+0x28>)
 8000f58:	2205      	movs	r2, #5
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e002      	b.n	8000f64 <ErrorHandler_MCP25625+0x24>
	else
		CM_ledCode = KneeCAN_ControllerInitError;
 8000f5e:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <ErrorHandler_MCP25625+0x28>)
 8000f60:	220a      	movs	r2, #10
 8000f62:	701a      	strb	r2, [r3, #0]

	while(1);
 8000f64:	e7fe      	b.n	8000f64 <ErrorHandler_MCP25625+0x24>
 8000f66:	bf00      	nop
 8000f68:	20000034 	.word	0x20000034

08000f6c <ErrorHandler_MPU925x>:
}

void ErrorHandler_MPU925x(MPU925x_Error_e error)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	CM_ledCode = IMU_InitError;
 8000f76:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <ErrorHandler_MPU925x+0x14>)
 8000f78:	220b      	movs	r2, #11
 8000f7a:	701a      	strb	r2, [r3, #0]
	while(1);
 8000f7c:	e7fe      	b.n	8000f7c <ErrorHandler_MPU925x+0x10>
 8000f7e:	bf00      	nop
 8000f80:	20000034 	.word	0x20000034

08000f84 <LL_AHB2_GRP1_EnableClock>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000fe6:	2004      	movs	r0, #4
 8000fe8:	f7ff ffcc 	bl	8000f84 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff ffc9 	bl	8000f84 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f7ff ffc6 	bl	8000f84 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, ANKLE_ENCODER_CSn_Pin|ANKLE_CAN_CONTROLLER_CS_Pin|KNEE_ENCODER_CSn_Pin);
 8000ff8:	f242 0150 	movw	r1, #8272	; 0x2050
 8000ffc:	4826      	ldr	r0, [pc, #152]	; (8001098 <MX_GPIO_Init+0xc8>)
 8000ffe:	f7ff ffd9 	bl	8000fb4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|KNEE_CAN_CONTROLLER_CS_Pin|ENCODER_CLK_Pin);
 8001002:	f241 0184 	movw	r1, #4228	; 0x1084
 8001006:	4825      	ldr	r0, [pc, #148]	; (800109c <MX_GPIO_Init+0xcc>)
 8001008:	f7ff ffd4 	bl	8000fb4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 800100c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001014:	f7ff ffce 	bl	8000fb4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ANKLE_ENCODER_CSn_Pin|ANKLE_CAN_CONTROLLER_CS_Pin|KNEE_ENCODER_CSn_Pin;
 8001018:	f242 0350 	movw	r3, #8272	; 0x2050
 800101c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800101e:	2301      	movs	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4819      	ldr	r0, [pc, #100]	; (8001098 <MX_GPIO_Init+0xc8>)
 8001034:	f004 fa99 	bl	800556a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|KNEE_CAN_CONTROLLER_CS_Pin|ENCODER_CLK_Pin;
 8001038:	f241 0384 	movw	r3, #4228	; 0x1084
 800103c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800103e:	2301      	movs	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4812      	ldr	r0, [pc, #72]	; (800109c <MX_GPIO_Init+0xcc>)
 8001054:	f004 fa89 	bl	800556a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENCODER_DO_Pin;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENCODER_DO_GPIO_Port, &GPIO_InitStruct);
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xc8>)
 800106a:	f004 fa7e 	bl	800556a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001074:	2301      	movs	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f004 fa6d 	bl	800556a <LL_GPIO_Init>

}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	48000800 	.word	0x48000800
 800109c:	48000400 	.word	0x48000400

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4907      	ldr	r1, [pc, #28]	; (80010f4 <__NVIC_EnableIRQ+0x38>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60da      	str	r2, [r3, #12]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60da      	str	r2, [r3, #12]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60da      	str	r2, [r3, #12]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f023 0203 	bic.w	r2, r3, #3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	621a      	str	r2, [r3, #32]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	60da      	str	r2, [r3, #12]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f023 0201 	bic.w	r2, r3, #1
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60da      	str	r2, [r3, #12]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <LL_RCC_SetLPTIMClockSource>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80012c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000

080012ec <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <LL_APB1_GRP2_EnableClock+0x2c>)
 80012f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <LL_APB1_GRP2_EnableClock+0x2c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001302:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8001320:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001324:	f7ff ffc8 	bl	80012b8 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001328:	2020      	movs	r0, #32
 800132a:	f7ff ffdf 	bl	80012ec <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800132e:	f7ff feb7 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 8001332:	4603      	mov	r3, r0
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff07 	bl	800114c <NVIC_EncodePriority>
 800133e:	4603      	mov	r3, r0
 8001340:	4619      	mov	r1, r3
 8001342:	2042      	movs	r0, #66	; 0x42
 8001344:	f7ff fed8 	bl	80010f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8001348:	2042      	movs	r0, #66	; 0x42
 800134a:	f7ff feb7 	bl	80010bc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 800134e:	2100      	movs	r1, #0
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_LPTIM2_Init+0x6c>)
 8001352:	f7ff ff9d 	bl	8001290 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001356:	2100      	movs	r1, #0
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <MX_LPTIM2_Init+0x6c>)
 800135a:	f7ff ff63 	bl	8001224 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 800135e:	2100      	movs	r1, #0
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <MX_LPTIM2_Init+0x6c>)
 8001362:	f7ff ff4c 	bl	80011fe <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001366:	2100      	movs	r1, #0
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_LPTIM2_Init+0x6c>)
 800136a:	f7ff ff22 	bl	80011b2 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 800136e:	2100      	movs	r1, #0
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_LPTIM2_Init+0x6c>)
 8001372:	f7ff ff31 	bl	80011d8 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_LPTIM2_Init+0x6c>)
 8001378:	f7ff ff7a 	bl	8001270 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800137c:	2100      	movs	r1, #0
 800137e:	4802      	ldr	r0, [pc, #8]	; (8001388 <MX_LPTIM2_Init+0x6c>)
 8001380:	f7ff ff63 	bl	800124a <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40009400 	.word	0x40009400

0800138c <__NVIC_SetPriorityGrouping>:
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_LPTIM_Enable>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	f043 0201 	orr.w	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	611a      	str	r2, [r3, #16]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_LPTIM_StartCounter>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f023 0206 	bic.w	r2, r3, #6
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	611a      	str	r2, [r3, #16]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_LPTIM_SetAutoReload>:
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f043 0202 	orr.w	r2, r3, #2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_RCC_LSE_Enable>:
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <LL_RCC_LSE_Enable+0x20>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <LL_RCC_LSE_Enable+0x20>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <LL_RCC_LSE_SetDriveCapability>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ba:	f023 0218 	bic.w	r2, r3, #24
 80014be:	4905      	ldr	r1, [pc, #20]	; (80014d4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000

080014d8 <LL_RCC_LSE_IsReady>:
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <LL_RCC_LSE_IsReady+0x24>)
 80014de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d101      	bne.n	80014ee <LL_RCC_LSE_IsReady+0x16>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_RCC_LSE_IsReady+0x18>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <LL_RCC_MSI_Enable>:
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <LL_RCC_MSI_Enable+0x1c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <LL_RCC_MSI_Enable+0x1c>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <LL_RCC_MSI_IsReady>:
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <LL_RCC_MSI_IsReady+0x20>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b02      	cmp	r3, #2
 800152e:	d101      	bne.n	8001534 <LL_RCC_MSI_IsReady+0x14>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_RCC_MSI_IsReady+0x16>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000

08001544 <LL_RCC_MSI_EnablePLLMode>:
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_MSI_EnableRangeSelection>:
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000

08001584 <LL_RCC_MSI_SetRange>:
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <LL_RCC_MSI_SetRange+0x24>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	4904      	ldr	r1, [pc, #16]	; (80015a8 <LL_RCC_MSI_SetRange+0x24>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40021000 	.word	0x40021000

080015ac <LL_RCC_MSI_SetCalibTrimming>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	4904      	ldr	r1, [pc, #16]	; (80015d4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <LL_RCC_SetSysClkSource>:
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <LL_RCC_SetSysClkSource+0x24>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 0203 	bic.w	r2, r3, #3
 80015e8:	4904      	ldr	r1, [pc, #16]	; (80015fc <LL_RCC_SetSysClkSource+0x24>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000

08001600 <LL_RCC_GetSysClkSource>:
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <LL_RCC_GetSysClkSource+0x18>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 030c 	and.w	r3, r3, #12
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <LL_RCC_SetAHBPrescaler>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <LL_RCC_SetAHBPrescaler+0x24>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162c:	4904      	ldr	r1, [pc, #16]	; (8001640 <LL_RCC_SetAHBPrescaler+0x24>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000

08001644 <LL_RCC_SetAPB1Prescaler>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <LL_RCC_SetAPB1Prescaler+0x24>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000

0800166c <LL_RCC_SetAPB2Prescaler>:
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800167c:	4904      	ldr	r1, [pc, #16]	; (8001690 <LL_RCC_SetAPB2Prescaler+0x24>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000

08001694 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <LL_RCC_PLL_Enable+0x1c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <LL_RCC_PLL_Enable+0x1c>)
 800169e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <LL_RCC_PLL_IsReady+0x24>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016c4:	d101      	bne.n	80016ca <LL_RCC_PLL_IsReady+0x16>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <LL_RCC_PLL_IsReady+0x18>
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	68f9      	ldr	r1, [r7, #12]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	4311      	orrs	r1, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	0212      	lsls	r2, r2, #8
 80016fc:	4311      	orrs	r1, r2
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	4904      	ldr	r1, [pc, #16]	; (8001714 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001704:	4313      	orrs	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	f9ff808c 	.word	0xf9ff808c

0800171c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <LL_APB1_GRP1_EnableClock>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001746:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <LL_APB1_GRP1_EnableClock+0x2c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001752:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000

0800176c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001776:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <LL_APB2_GRP1_EnableClock+0x2c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001782:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4013      	ands	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000

0800179c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <LL_FLASH_SetLatency+0x24>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 0207 	bic.w	r2, r3, #7
 80017ac:	4904      	ldr	r1, [pc, #16]	; (80017c0 <LL_FLASH_SetLatency+0x24>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40022000 	.word	0x40022000

080017c4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <LL_FLASH_GetLatency+0x18>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000

080017e0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <LL_SYSTICK_EnableIT+0x1c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <LL_SYSTICK_EnableIT+0x1c>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001810:	4904      	ldr	r1, [pc, #16]	; (8001824 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40007000 	.word	0x40007000

08001828 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <LL_PWR_EnableBkUpAccess+0x1c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40007000 	.word	0x40007000

08001848 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f043 0201 	orr.w	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b0ba      	sub	sp, #232	; 0xe8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff ff6c 	bl	800176c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001894:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001898:	f7ff ff50 	bl	800173c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f7ff fd75 	bl	800138c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a2:	f000 f9db 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a6:	f7ff fb93 	bl	8000fd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018aa:	f001 fb47 	bl	8002f3c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80018ae:	f001 f8e7 	bl	8002a80 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 80018b2:	f7ff fd33 	bl	800131c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 80018b6:	f001 f939 	bl	8002b2c <MX_SPI2_Init>
  MX_ADC2_Init();
 80018ba:	f7ff fa3d 	bl	8000d38 <MX_ADC2_Init>
  MX_ADC1_Init();
 80018be:	f7ff f995 	bl	8000bec <MX_ADC1_Init>
  MX_TIM6_Init();
 80018c2:	f001 faa1 	bl	8002e08 <MX_TIM6_Init>
  MX_SPI3_Init();
 80018c6:	f001 f989 	bl	8002bdc <MX_SPI3_Init>
/*******************************************************************************
* USER ADDED DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t Encoder_Init[AS5145B_NUMBER_OF_DEVICES];
	Encoder_Init[AnkleEncoderIndex].DO_GPIOx = ENCODER_DO_GPIO_Port;
 80018ca:	4bd0      	ldr	r3, [pc, #832]	; (8001c0c <main+0x384>)
 80018cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	Encoder_Init[AnkleEncoderIndex].CLK_GPIOx = ENCODER_CLK_GPIO_Port;
 80018d0:	4bcf      	ldr	r3, [pc, #828]	; (8001c10 <main+0x388>)
 80018d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	Encoder_Init[AnkleEncoderIndex].CSn_GPIOx = ANKLE_ENCODER_CSn_GPIO_Port;
 80018d6:	4bcd      	ldr	r3, [pc, #820]	; (8001c0c <main+0x384>)
 80018d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	Encoder_Init[AnkleEncoderIndex].DO_Pin = ENCODER_DO_Pin;
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	Encoder_Init[AnkleEncoderIndex].CLK_Pin = ENCODER_CLK_Pin;
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	Encoder_Init[AnkleEncoderIndex].CSn_Pin = ANKLE_ENCODER_CSn_Pin;
 80018e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ec:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
	Encoder_Init[AnkleEncoderIndex].TIMx = TIM6;
 80018f0:	4bc8      	ldr	r3, [pc, #800]	; (8001c14 <main+0x38c>)
 80018f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	Encoder_Init[AnkleEncoderIndex].timerRateMHz = 10;
 80018f6:	230a      	movs	r3, #10
 80018f8:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0

	memcpy(&Encoder_Init[KneeEncoderIndex], &Encoder_Init[AnkleEncoderIndex], sizeof(Encoder_Init[AnkleEncoderIndex]));
 80018fc:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001900:	f107 05a8 	add.w	r5, r7, #168	; 0xa8
 8001904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800190c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Encoder_Init[KneeEncoderIndex].CSn_GPIOx = KNEE_ENCODER_CSn_GPIO_Port;
 8001910:	4bbe      	ldr	r3, [pc, #760]	; (8001c0c <main+0x384>)
 8001912:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	Encoder_Init[KneeEncoderIndex].CSn_Pin = KNEE_ENCODER_CSn_Pin;
 8001916:	2340      	movs	r3, #64	; 0x40
 8001918:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

	EPOS4_Init_t MotorController_Init[EPOS4_NUMBER_OF_DEVICES];
	MotorController_Init[AnkleMotorControllerIndex].nodeId = 2;
 800191c:	2302      	movs	r3, #2
 800191e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	MotorController_Init[AnkleMotorControllerIndex].mcpIndex = AnkleCAN_ControllerIndex;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MotorController_Init[AnkleMotorControllerIndex].Requirements.isFirstStepRequired = 1;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	MotorController_Init[AnkleMotorControllerIndex].Requirements.isModeOfOperationRequired = 1;
 800192e:	2301      	movs	r3, #1
 8001930:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.CAN_BitRate = EPOS4_Rate1000Kbps;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.MotorType = EPOS4_TrapezoidalPmBlMotor;
 800193a:	230b      	movs	r3, #11
 800193c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.nominalCurrent = 6600;
 8001940:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.outputCurrentLimit = 29300;
 8001946:	f247 2374 	movw	r3, #29300	; 0x7274
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.numberOfPolePairs = 21;
 800194c:	2315      	movs	r3, #21
 800194e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.thermalTimeConstantWinding = 400;
 8001952:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001956:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.torqueConstant = 95000;
 800195a:	4baf      	ldr	r3, [pc, #700]	; (8001c18 <main+0x390>)
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.maxMotorSpeed = 2384;
 800195e:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.maxGearInputSpeed = 100000;
 8001964:	4bad      	ldr	r3, [pc, #692]	; (8001c1c <main+0x394>)
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.sensorsConfiguration = 0x00100000;
 8001968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800196c:	653b      	str	r3, [r7, #80]	; 0x50
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.controlStructure = 0x00030111;
 800196e:	4bac      	ldr	r3, [pc, #688]	; (8001c20 <main+0x398>)
 8001970:	657b      	str	r3, [r7, #84]	; 0x54
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.commutationSensors = 0x00000030;
 8001972:	2330      	movs	r3, #48	; 0x30
 8001974:	65bb      	str	r3, [r7, #88]	; 0x58
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.axisConfigMiscellaneous = 0x00000000;
 8001976:	2300      	movs	r3, #0
 8001978:	65fb      	str	r3, [r7, #92]	; 0x5c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.currentControllerP_Gain = 643609;
 800197a:	4baa      	ldr	r3, [pc, #680]	; (8001c24 <main+0x39c>)
 800197c:	663b      	str	r3, [r7, #96]	; 0x60
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.currentControllerI_Gain = 2791837;
 800197e:	4baa      	ldr	r3, [pc, #680]	; (8001c28 <main+0x3a0>)
 8001980:	667b      	str	r3, [r7, #100]	; 0x64
	MotorController_Init[AnkleMotorControllerIndex].ModeOfOperation = EPOS4_CyclicSynchronousTorqueMode;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

	memcpy(&MotorController_Init[KneeMotorControllerIndex], &MotorController_Init[AnkleMotorControllerIndex], sizeof(MotorController_Init[AnkleMotorControllerIndex]));
 8001988:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800198c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MotorController_Init[KneeMotorControllerIndex].nodeId = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	MotorController_Init[KneeMotorControllerIndex].mcpIndex = KneeCAN_ControllerIndex;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

  	MCP25625_Init_t CAN_Controller_Init[MCP25625_NUMBER_OF_DEVICES];
  	memset(&CAN_Controller_Init, 0, sizeof(CAN_Controller_Init));
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2220      	movs	r2, #32
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fce3 	bl	8006384 <memset>
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].SPIx = SPI3;
 80019be:	4b9b      	ldr	r3, [pc, #620]	; (8001c2c <main+0x3a4>)
 80019c0:	613b      	str	r3, [r7, #16]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CS_Port = ANKLE_CAN_CONTROLLER_CS_GPIO_Port;
 80019c2:	4b92      	ldr	r3, [pc, #584]	; (8001c0c <main+0x384>)
 80019c4:	617b      	str	r3, [r7, #20]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].csPin = ANKLE_CAN_CONTROLLER_CS_Pin;
 80019c6:	2310      	movs	r3, #16
 80019c8:	833b      	strh	r3, [r7, #24]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.CLKEN = MCP25625_ClockoutDisabled;
 80019ca:	7ebb      	ldrb	r3, [r7, #26]
 80019cc:	f36f 0382 	bfc	r3, #2, #1
 80019d0:	76bb      	strb	r3, [r7, #26]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.OSM = MCP25625_OneShotModeEnabled;
 80019d2:	7ebb      	ldrb	r3, [r7, #26]
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	76bb      	strb	r3, [r7, #26]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.ABAT = MCP25625_AbortAllTransmissions;
 80019da:	7ebb      	ldrb	r3, [r7, #26]
 80019dc:	f36f 1304 	bfc	r3, #4, #1
 80019e0:	76bb      	strb	r3, [r7, #26]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.REQOP = MCP25625_NormalOperationMode;
 80019e2:	7ebb      	ldrb	r3, [r7, #26]
 80019e4:	f36f 1347 	bfc	r3, #5, #3
 80019e8:	76bb      	strb	r3, [r7, #26]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF1_Reg.Bits.BRP = 0;
 80019ea:	7efb      	ldrb	r3, [r7, #27]
 80019ec:	f36f 0305 	bfc	r3, #0, #6
 80019f0:	76fb      	strb	r3, [r7, #27]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF1_Reg.Bits.SJW = MCP25625_Length1xT_Q;
 80019f2:	7efb      	ldrb	r3, [r7, #27]
 80019f4:	f36f 1387 	bfc	r3, #6, #2
 80019f8:	76fb      	strb	r3, [r7, #27]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.PRSEG = 4;
 80019fa:	7f3b      	ldrb	r3, [r7, #28]
 80019fc:	2204      	movs	r2, #4
 80019fe:	f362 0302 	bfi	r3, r2, #0, #3
 8001a02:	773b      	strb	r3, [r7, #28]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.PHSEG1 = 1;
 8001a04:	7f3b      	ldrb	r3, [r7, #28]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f362 03c5 	bfi	r3, r2, #3, #3
 8001a0c:	773b      	strb	r3, [r7, #28]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.SAM = MCP25625_BusSampledOnceAtSamplePoint;
 8001a0e:	7f3b      	ldrb	r3, [r7, #28]
 8001a10:	f36f 1386 	bfc	r3, #6, #1
 8001a14:	773b      	strb	r3, [r7, #28]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.BLTMODE = MCP25625_PS2LengthDeterminedByCNF3;
 8001a16:	7f3b      	ldrb	r3, [r7, #28]
 8001a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1c:	773b      	strb	r3, [r7, #28]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.PHSEG2 = 1;
 8001a1e:	7f7b      	ldrb	r3, [r7, #29]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f362 0302 	bfi	r3, r2, #0, #3
 8001a26:	777b      	strb	r3, [r7, #29]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.WAKFIL = MCP25625_WakeUpFilterIsDisabled;
 8001a28:	7f7b      	ldrb	r3, [r7, #29]
 8001a2a:	f36f 1386 	bfc	r3, #6, #1
 8001a2e:	777b      	strb	r3, [r7, #29]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.SOF = MCP25625_ClockoutPinIsEnabledForClockOutFunction;
 8001a30:	7f7b      	ldrb	r3, [r7, #29]
 8001a32:	f36f 13c7 	bfc	r3, #7, #1
 8001a36:	777b      	strb	r3, [r7, #29]

  	memcpy(&CAN_Controller_Init[KneeCAN_ControllerIndex], &CAN_Controller_Init[AnkleCAN_ControllerIndex], sizeof(CAN_Controller_Init[AnkleCAN_ControllerIndex]));
 8001a38:	f107 0420 	add.w	r4, r7, #32
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	CAN_Controller_Init[KneeCAN_ControllerIndex].SPIx = SPI2;
 8001a46:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <main+0x3a8>)
 8001a48:	623b      	str	r3, [r7, #32]
  	CAN_Controller_Init[KneeCAN_ControllerIndex].CS_Port = KNEE_CAN_CONTROLLER_CS_GPIO_Port;
 8001a4a:	4b71      	ldr	r3, [pc, #452]	; (8001c10 <main+0x388>)
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  	CAN_Controller_Init[KneeCAN_ControllerIndex].csPin = KNEE_CAN_CONTROLLER_CS_Pin;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	853b      	strh	r3, [r7, #40]	; 0x28

  	MPU925x_Init_t IMU_Init;
  	IMU_Init.SPI_Handle = SPI1;
 8001a54:	4b77      	ldr	r3, [pc, #476]	; (8001c34 <main+0x3ac>)
 8001a56:	607b      	str	r3, [r7, #4]
  	IMU_Init.CS_GPIOx = IMU_CS_GPIO_Port;
 8001a58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a5c:	60bb      	str	r3, [r7, #8]
  	IMU_Init.csPin = IMU_CS_Pin;
 8001a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a62:	81bb      	strh	r3, [r7, #12]

  	Prosthesis_Init.Joint = Ankle;
 8001a64:	4b74      	ldr	r3, [pc, #464]	; (8001c38 <main+0x3b0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	705a      	strb	r2, [r3, #1]
  	Prosthesis_Init.Side = Left;
 8001a6a:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <main+0x3b0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]

/*******************************************************************************
* USER ADDED INITIALIZATIONS
*******************************************************************************/

	LL_SYSTICK_EnableIT();
 8001a70:	f7ff feb6 	bl	80017e0 <LL_SYSTICK_EnableIT>

	LL_LPTIM_Enable(LPTIM2);
 8001a74:	4871      	ldr	r0, [pc, #452]	; (8001c3c <main+0x3b4>)
 8001a76:	f7ff fcc1 	bl	80013fc <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001a7a:	4870      	ldr	r0, [pc, #448]	; (8001c3c <main+0x3b4>)
 8001a7c:	f7ff fcf4 	bl	8001468 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001a80:	213f      	movs	r1, #63	; 0x3f
 8001a82:	486e      	ldr	r0, [pc, #440]	; (8001c3c <main+0x3b4>)
 8001a84:	f7ff fcdd 	bl	8001442 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001a88:	2104      	movs	r1, #4
 8001a8a:	486c      	ldr	r0, [pc, #432]	; (8001c3c <main+0x3b4>)
 8001a8c:	f7ff fcc6 	bl	800141c <LL_LPTIM_StartCounter>

	LL_TIM_EnableCounter(TIM6);
 8001a90:	4860      	ldr	r0, [pc, #384]	; (8001c14 <main+0x38c>)
 8001a92:	f7ff fee9 	bl	8001868 <LL_TIM_EnableCounter>

	LL_SPI_Enable(SPI1);
 8001a96:	4867      	ldr	r0, [pc, #412]	; (8001c34 <main+0x3ac>)
 8001a98:	f7ff fed6 	bl	8001848 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001a9c:	4864      	ldr	r0, [pc, #400]	; (8001c30 <main+0x3a8>)
 8001a9e:	f7ff fed3 	bl	8001848 <LL_SPI_Enable>
	LL_SPI_Enable(SPI3);
 8001aa2:	4862      	ldr	r0, [pc, #392]	; (8001c2c <main+0x3a4>)
 8001aa4:	f7ff fed0 	bl	8001848 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001aa8:	4865      	ldr	r0, [pc, #404]	; (8001c40 <main+0x3b8>)
 8001aaa:	f7ff fc93 	bl	80013d4 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001aae:	4865      	ldr	r0, [pc, #404]	; (8001c44 <main+0x3bc>)
 8001ab0:	f7ff fc90 	bl	80013d4 <LL_ADC_Enable>

	LL_mDelay(10);	// Allow startup delays for devices
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f004 fbfb 	bl	80062b0 <LL_mDelay>

	MPU925x_Error_e imuError = MPU925x_Init(0, &IMU_Init);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f002 ffd4 	bl	8004a6c <MPU925x_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	if(imuError)
 8001aca:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <main+0x254>
		ErrorHandler_MPU925x(imuError);
 8001ad2:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fa48 	bl	8000f6c <ErrorHandler_MPU925x>
	MPU925x_SetAccelSensitivity(0, MPU925x_AccelSensitivity_8g);
 8001adc:	2102      	movs	r1, #2
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f002 fff8 	bl	8004ad4 <MPU925x_SetAccelSensitivity>
	MPU925x_SetGyroSensitivity(0, MPU925x_GyroSensitivity_1000dps);
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f003 f886 	bl	8004bf8 <MPU925x_SetGyroSensitivity>

	if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8001aec:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <main+0x3b0>)
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <main+0x274>
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <main+0x3b0>)
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d138      	bne.n	8001b6e <main+0x2e6>
	{
		AS5145B_Error_e encoderError = AS5145B_Init(AnkleEncoderIndex, &Encoder_Init[AnkleEncoderIndex]);
 8001afc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b00:	4619      	mov	r1, r3
 8001b02:	2000      	movs	r0, #0
 8001b04:	f001 fae6 	bl	80030d4 <AS5145B_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		if(encoderError)
 8001b0e:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <main+0x29a>
			ErrorHandler_AS5145B(AnkleEncoderIndex, encoderError);
 8001b16:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff f9af 	bl	8000e80 <ErrorHandler_AS5145B>

		MCP25625_Error_e canControllerError = MCP25625_Init(AnkleCAN_ControllerIndex, &CAN_Controller_Init[AnkleCAN_ControllerIndex]);
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	4619      	mov	r1, r3
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f002 f9fd 	bl	8003f28 <MCP25625_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
		if(canControllerError)
 8001b34:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <main+0x2c0>
			ErrorHandler_MCP25625(AnkleCAN_ControllerIndex, canControllerError);
 8001b3c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001b40:	4619      	mov	r1, r3
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff f9fc 	bl	8000f40 <ErrorHandler_MCP25625>

		EPOS4_Error_e motorControllerError = EPOS4_Init(AnkleMotorControllerIndex, &MotorController_Init[AnkleMotorControllerIndex]);
 8001b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f001 fca6 	bl	80034a0 <EPOS4_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
		if(motorControllerError)
 8001b5a:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <main+0x2e6>
			ErrorHandler_EPOS4(AnkleMotorControllerIndex, motorControllerError);
 8001b62:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001b66:	4619      	mov	r1, r3
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff f99f 	bl	8000eac <ErrorHandler_EPOS4>
	}

	if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <main+0x3b0>)
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d003      	beq.n	8001b7e <main+0x2f6>
 8001b76:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <main+0x3b0>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d13b      	bne.n	8001bf6 <main+0x36e>
	{
		AS5145B_Error_e encoderError = AS5145B_Init(KneeEncoderIndex, &Encoder_Init[KneeEncoderIndex]);
 8001b7e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b82:	331c      	adds	r3, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	2001      	movs	r0, #1
 8001b88:	f001 faa4 	bl	80030d4 <AS5145B_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		if(encoderError)
 8001b92:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <main+0x31e>
			ErrorHandler_AS5145B(KneeEncoderIndex, encoderError);
 8001b9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff f96d 	bl	8000e80 <ErrorHandler_AS5145B>

		MCP25625_Error_e canControllerError = MCP25625_Init(KneeCAN_ControllerIndex, &CAN_Controller_Init[KneeCAN_ControllerIndex]);
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	3310      	adds	r3, #16
 8001bac:	4619      	mov	r1, r3
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f002 f9ba 	bl	8003f28 <MCP25625_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
		if(canControllerError)
 8001bba:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <main+0x346>
			ErrorHandler_MCP25625(KneeCAN_ControllerIndex, canControllerError);
 8001bc2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff f9b9 	bl	8000f40 <ErrorHandler_MCP25625>

		EPOS4_Error_e motorControllerError = EPOS4_Init(KneeMotorControllerIndex, &MotorController_Init[KneeMotorControllerIndex]);
 8001bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd2:	333c      	adds	r3, #60	; 0x3c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f001 fc62 	bl	80034a0 <EPOS4_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
		if(motorControllerError)
 8001be2:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <main+0x36e>
			ErrorHandler_EPOS4(KneeMotorControllerIndex, motorControllerError);
 8001bea:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff f95b 	bl	8000eac <ErrorHandler_EPOS4>
	}

	InitProsthesisControl(&Prosthesis_Init);
 8001bf6:	4810      	ldr	r0, [pc, #64]	; (8001c38 <main+0x3b0>)
 8001bf8:	f000 f8c2 	bl	8001d80 <InitProsthesisControl>

/*******************************************************************************
* USER ADDED TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ImpedanceControl);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f90d 	bl	8001e1c <RequireTestProgram>
* USER ADDED MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if(isProsthesisControlRequired)
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <main+0x3c0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0fb      	beq.n	8001c02 <main+0x37a>
 8001c0a:	e01f      	b.n	8001c4c <main+0x3c4>
 8001c0c:	48000800 	.word	0x48000800
 8001c10:	48000400 	.word	0x48000400
 8001c14:	40001000 	.word	0x40001000
 8001c18:	00017318 	.word	0x00017318
 8001c1c:	000186a0 	.word	0x000186a0
 8001c20:	00030111 	.word	0x00030111
 8001c24:	0009d219 	.word	0x0009d219
 8001c28:	002a999d 	.word	0x002a999d
 8001c2c:	40003c00 	.word	0x40003c00
 8001c30:	40003800 	.word	0x40003800
 8001c34:	40013000 	.word	0x40013000
 8001c38:	20000038 	.word	0x20000038
 8001c3c:	40009400 	.word	0x40009400
 8001c40:	50040000 	.word	0x50040000
 8001c44:	50040100 	.word	0x50040100
 8001c48:	2000003a 	.word	0x2000003a
	  {
		  RunProsthesisControl();
 8001c4c:	f000 f900 	bl	8001e50 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001c50:	4b01      	ldr	r3, [pc, #4]	; (8001c58 <main+0x3d0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 8001c56:	e7d4      	b.n	8001c02 <main+0x37a>
 8001c58:	2000003a 	.word	0x2000003a

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001c60:	2004      	movs	r0, #4
 8001c62:	f7ff fd9b 	bl	800179c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001c66:	bf00      	nop
 8001c68:	f7ff fdac 	bl	80017c4 <LL_FLASH_GetLatency>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d1fa      	bne.n	8001c68 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001c72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c76:	f7ff fdc3 	bl	8001800 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001c7a:	f7ff fc41 	bl	8001500 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001c7e:	bf00      	nop
 8001c80:	f7ff fc4e 	bl	8001520 <LL_RCC_MSI_IsReady>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d1fa      	bne.n	8001c80 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001c8a:	f7ff fc6b 	bl	8001564 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001c8e:	20b0      	movs	r0, #176	; 0xb0
 8001c90:	f7ff fc78 	bl	8001584 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff fc89 	bl	80015ac <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001c9a:	f7ff fdc5 	bl	8001828 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fc04 	bl	80014ac <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001ca4:	f7ff fbf0 	bl	8001488 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001ca8:	bf00      	nop
 8001caa:	f7ff fc15 	bl	80014d8 <LL_RCC_LSE_IsReady>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d1fa      	bne.n	8001caa <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001cb4:	f7ff fc46 	bl	8001544 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cbc:	2228      	movs	r2, #40	; 0x28
 8001cbe:	2150      	movs	r1, #80	; 0x50
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fd0b 	bl	80016dc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001cc6:	f7ff fd29 	bl	800171c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001cca:	f7ff fce3 	bl	8001694 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001cce:	bf00      	nop
 8001cd0:	f7ff fcf0 	bl	80016b4 <LL_RCC_PLL_IsReady>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d1fa      	bne.n	8001cd0 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f7ff fc7c 	bl	80015d8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001ce0:	bf00      	nop
 8001ce2:	f7ff fc8d 	bl	8001600 <LL_RCC_GetSysClkSource>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d1fa      	bne.n	8001ce2 <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff fc95 	bl	800161c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001cf2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cf6:	f7ff fca5 	bl	8001644 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001cfa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cfe:	f7ff fcb5 	bl	800166c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001d02:	4804      	ldr	r0, [pc, #16]	; (8001d14 <SystemClock_Config+0xb8>)
 8001d04:	f004 fac6 	bl	8006294 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <SystemClock_Config+0xb8>)
 8001d0a:	f004 faf9 	bl	8006300 <LL_SetSystemCoreClock>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	04c4b400 	.word	0x04c4b400

08001d18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d2c:	f043 0204 	orr.w	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	b29b      	uxth	r3, r3
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <InitProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	memcpy(&Device, Device_Init, sizeof(&Device_Init));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4819      	ldr	r0, [pc, #100]	; (8001df4 <InitProsthesisControl+0x74>)
 8001d90:	f004 faea 	bl	8006368 <memcpy>

	CM_Ankle.encoderBias = 1325 * AS5145B_RAW2DEG;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <InitProsthesisControl+0x78>)
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <InitProsthesisControl+0x7c>)
 8001d98:	621a      	str	r2, [r3, #32]

	CM_Ankle.EarlyStanceCtrl.eqPoint = -7.0f;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <InitProsthesisControl+0x78>)
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <InitProsthesisControl+0x80>)
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38
	CM_Ankle.EarlyStanceCtrl.kp = 5;
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <InitProsthesisControl+0x78>)
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <InitProsthesisControl+0x84>)
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
	CM_Ankle.MidStanceCtrl.eqPoint = -7.0f;
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <InitProsthesisControl+0x78>)
 8001da8:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <InitProsthesisControl+0x80>)
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
	CM_Ankle.MidStanceCtrl.kp = 5;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <InitProsthesisControl+0x78>)
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <InitProsthesisControl+0x84>)
 8001db0:	64da      	str	r2, [r3, #76]	; 0x4c
	CM_Ankle.LateStanceCtrl.eqPoint = -7.0f;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <InitProsthesisControl+0x78>)
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <InitProsthesisControl+0x80>)
 8001db6:	651a      	str	r2, [r3, #80]	; 0x50
	CM_Ankle.LateStanceCtrl.kp = 5;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <InitProsthesisControl+0x78>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <InitProsthesisControl+0x84>)
 8001dbc:	659a      	str	r2, [r3, #88]	; 0x58
	CM_Ankle.SwingExtCtrl.eqPoint = -7.0f;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <InitProsthesisControl+0x78>)
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <InitProsthesisControl+0x80>)
 8001dc2:	669a      	str	r2, [r3, #104]	; 0x68
	CM_Ankle.SwingExtCtrl.kp = 5;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <InitProsthesisControl+0x78>)
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <InitProsthesisControl+0x84>)
 8001dc8:	671a      	str	r2, [r3, #112]	; 0x70

	CM_Knee.encoderBias = 2244 * AS5145B_RAW2DEG;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <InitProsthesisControl+0x88>)
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <InitProsthesisControl+0x8c>)
 8001dce:	621a      	str	r2, [r3, #32]

	CM_LoadCell.intoStanceThreshold = 1300;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <InitProsthesisControl+0x90>)
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <InitProsthesisControl+0x94>)
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
	CM_LoadCell.outOfStanceThreshold = CM_LoadCell.intoStanceThreshold + 50;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <InitProsthesisControl+0x90>)
 8001dd8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ddc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001e18 <InitProsthesisControl+0x98>
 8001de0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <InitProsthesisControl+0x90>)
 8001de6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2000003c 	.word	0x2000003c
 8001df8:	20000078 	.word	0x20000078
 8001dfc:	42e8e900 	.word	0x42e8e900
 8001e00:	c0e00000 	.word	0xc0e00000
 8001e04:	40a00000 	.word	0x40a00000
 8001e08:	200000f0 	.word	0x200000f0
 8001e0c:	43453a00 	.word	0x43453a00
 8001e10:	20000168 	.word	0x20000168
 8001e14:	44a28000 	.word	0x44a28000
 8001e18:	42480000 	.word	0x42480000

08001e1c <RequireTestProgram>:

void RequireTestProgram(TestProgram_e option)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <RequireTestProgram+0x2c>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	7013      	strb	r3, [r2, #0]
	if(testProgram != None)
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <RequireTestProgram+0x2c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <RequireTestProgram+0x30>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000003e 	.word	0x2000003e
 8001e4c:	20000071 	.word	0x20000071

08001e50 <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	GetInputs();
 8001e54:	f000 f824 	bl	8001ea0 <GetInputs>
	ProcessInputs();
 8001e58:	f000 f8ae 	bl	8001fb8 <ProcessInputs>

	if(isTestProgramRequired)
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <RunProsthesisControl+0x44>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <RunProsthesisControl+0x18>
		RunTestProgram();
 8001e64:	f000 fcaa 	bl	80027bc <RunTestProgram>

//	RunStateMachine();
	RunImpedanceControl();
 8001e68:	f000 fbaa 	bl	80025c0 <RunImpedanceControl>

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <RunProsthesisControl+0x48>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <RunProsthesisControl+0x32>
	{
		isFirst = 0;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <RunProsthesisControl+0x48>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <RunProsthesisControl+0x4c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8001e80:	e006      	b.n	8001e90 <RunProsthesisControl+0x40>
	else if(isSecond)
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <RunProsthesisControl+0x4c>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <RunProsthesisControl+0x40>
		isSecond = 0;
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <RunProsthesisControl+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000071 	.word	0x20000071
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000070 	.word	0x20000070

08001ea0 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <GetInputs+0xc8>)
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <GetInputs+0x16>
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <GetInputs+0xc8>)
 8001eb0:	785b      	ldrb	r3, [r3, #1]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d112      	bne.n	8001edc <GetInputs+0x3c>
		CM_Ankle.jointAngle[0] = AS5145B_ReadPosition(AnkleEncoderIndex) - CM_Ankle.encoderBias;
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f001 f942 	bl	8003140 <AS5145B_ReadPosition>
 8001ebc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <GetInputs+0xcc>)
 8001ec2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eca:	ee17 0a90 	vmov	r0, s15
 8001ece:	f7fe fadf 	bl	8000490 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4925      	ldr	r1, [pc, #148]	; (8001f6c <GetInputs+0xcc>)
 8001ed8:	e9c1 2300 	strd	r2, r3, [r1]

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <GetInputs+0xc8>)
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d003      	beq.n	8001eec <GetInputs+0x4c>
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <GetInputs+0xc8>)
 8001ee6:	785b      	ldrb	r3, [r3, #1]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d112      	bne.n	8001f12 <GetInputs+0x72>
		CM_Knee.jointAngle[0] = AS5145B_ReadPosition(KneeEncoderIndex) - CM_Knee.encoderBias;
 8001eec:	2001      	movs	r0, #1
 8001eee:	f001 f927 	bl	8003140 <AS5145B_ReadPosition>
 8001ef2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <GetInputs+0xd0>)
 8001ef8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f00:	ee17 0a90 	vmov	r0, s15
 8001f04:	f7fe fac4 	bl	8000490 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4918      	ldr	r1, [pc, #96]	; (8001f70 <GetInputs+0xd0>)
 8001f0e:	e9c1 2300 	strd	r2, r3, [r1]

	CM_LoadCell.Raw.bot[0] = ReadLoadCell(ADC1);
 8001f12:	4818      	ldr	r0, [pc, #96]	; (8001f74 <GetInputs+0xd4>)
 8001f14:	f000 f836 	bl	8001f84 <ReadLoadCell>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <GetInputs+0xd8>)
 8001f24:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell.Raw.top[0] = ReadLoadCell(ADC2);
 8001f28:	4814      	ldr	r0, [pc, #80]	; (8001f7c <GetInputs+0xdc>)
 8001f2a:	f000 f82b 	bl	8001f84 <ReadLoadCell>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <GetInputs+0xd8>)
 8001f3a:	edc3 7a03 	vstr	s15, [r3, #12]

	IMU_Data = MPU925x_ReadIMU(0);
 8001f3e:	4c10      	ldr	r4, [pc, #64]	; (8001f80 <GetInputs+0xe0>)
 8001f40:	463b      	mov	r3, r7
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 feed 	bl	8004d24 <MPU925x_ReadIMU>
 8001f4a:	4625      	mov	r5, r4
 8001f4c:	463c      	mov	r4, r7
 8001f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f5a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001f5e:	bf00      	nop
 8001f60:	3730      	adds	r7, #48	; 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdb0      	pop	{r4, r5, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000003c 	.word	0x2000003c
 8001f6c:	20000078 	.word	0x20000078
 8001f70:	200000f0 	.word	0x200000f0
 8001f74:	50040000 	.word	0x50040000
 8001f78:	20000168 	.word	0x20000168
 8001f7c:	50040100 	.word	0x50040100
 8001f80:	20000040 	.word	0x20000040

08001f84 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fec3 	bl	8001d18 <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 8001f92:	bf00      	nop
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fee0 	bl	8001d5a <LL_ADC_IsActiveFlag_EOC>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f9      	beq.n	8001f94 <ReadLoadCell+0x10>
	uint16_t data = LL_ADC_REG_ReadConversionData12(ADCx);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fecd 	bl	8001d40 <LL_ADC_REG_ReadConversionData12>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	81fb      	strh	r3, [r7, #14]
	return data;
 8001faa:	89fb      	ldrh	r3, [r7, #14]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	0000      	movs	r0, r0
	...

08001fb8 <ProcessInputs>:

static void ProcessInputs(void)
{
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
	double tau = 1.0 / (2 * M_PI * 10);	// Time constant for practical differentiator (fc = 10 Hz)
 8001fbe:	a38a      	add	r3, pc, #552	; (adr r3, 80021e8 <ProcessInputs+0x230>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	e9c7 2300 	strd	r2, r3, [r7]

	// Derivative of joint angle (joint speed) and filtering of load cells
	if(isFirst)
 8001fc8:	4b81      	ldr	r3, [pc, #516]	; (80021d0 <ProcessInputs+0x218>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d032      	beq.n	8002036 <ProcessInputs+0x7e>
	{
		CM_Ankle.jointSpeed = 0.0;
 8001fd0:	4980      	ldr	r1, [pc, #512]	; (80021d4 <ProcessInputs+0x21c>)
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <ProcessInputs+0x21c>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	497b      	ldr	r1, [pc, #492]	; (80021d4 <ProcessInputs+0x21c>)
 8001fe6:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CM_Knee.jointSpeed = 0.0;
 8001fea:	497b      	ldr	r1, [pc, #492]	; (80021d8 <ProcessInputs+0x220>)
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 8001ff8:	4b77      	ldr	r3, [pc, #476]	; (80021d8 <ProcessInputs+0x220>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	4976      	ldr	r1, [pc, #472]	; (80021d8 <ProcessInputs+0x220>)
 8002000:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[0];
 8002004:	4b75      	ldr	r3, [pc, #468]	; (80021dc <ProcessInputs+0x224>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a74      	ldr	r2, [pc, #464]	; (80021dc <ProcessInputs+0x224>)
 800200a:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[0];
 800200c:	4b73      	ldr	r3, [pc, #460]	; (80021dc <ProcessInputs+0x224>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a72      	ldr	r2, [pc, #456]	; (80021dc <ProcessInputs+0x224>)
 8002012:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8002014:	4b71      	ldr	r3, [pc, #452]	; (80021dc <ProcessInputs+0x224>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a70      	ldr	r2, [pc, #448]	; (80021dc <ProcessInputs+0x224>)
 800201a:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <ProcessInputs+0x224>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <ProcessInputs+0x224>)
 8002022:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[0];
 8002024:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <ProcessInputs+0x224>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a6c      	ldr	r2, [pc, #432]	; (80021dc <ProcessInputs+0x224>)
 800202a:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[0];
 800202c:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <ProcessInputs+0x224>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	4a6a      	ldr	r2, [pc, #424]	; (80021dc <ProcessInputs+0x224>)
 8002032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002034:	e288      	b.n	8002548 <ProcessInputs+0x590>
	}
	else if(isSecond)
 8002036:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <ProcessInputs+0x228>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80d8 	beq.w	80021f0 <ProcessInputs+0x238>
	{
		// Practical differentiator (bilinear transformation used)
		CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*tau - dt)*CM_Ankle.jointSpeed) / (dt + 2*tau);
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <ProcessInputs+0x21c>)
 8002042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <ProcessInputs+0x21c>)
 8002048:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800204c:	f7fe f8c0 	bl	80001d0 <__aeabi_dsub>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	f7fe f8ba 	bl	80001d4 <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4614      	mov	r4, r2
 8002066:	461d      	mov	r5, r3
 8002068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	f7fe f8b0 	bl	80001d4 <__adddf3>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <ProcessInputs+0x22c>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe f8a5 	bl	80001d0 <__aeabi_dsub>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <ProcessInputs+0x21c>)
 8002090:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002094:	f7fe fa54 	bl	8000540 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe f898 	bl	80001d4 <__adddf3>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4614      	mov	r4, r2
 80020aa:	461d      	mov	r5, r3
 80020ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	f7fe f88e 	bl	80001d4 <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <ProcessInputs+0x22c>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe f885 	bl	80001d4 <__adddf3>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4620      	mov	r0, r4
 80020d0:	4629      	mov	r1, r5
 80020d2:	f7fe fb5f 	bl	8000794 <__aeabi_ddiv>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	493e      	ldr	r1, [pc, #248]	; (80021d4 <ProcessInputs+0x21c>)
 80020dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <ProcessInputs+0x21c>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	493b      	ldr	r1, [pc, #236]	; (80021d4 <ProcessInputs+0x21c>)
 80020e8:	e9c1 2302 	strd	r2, r3, [r1, #8]

		// Practical differentiator (bilinear transformation used)
		CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 80020ec:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <ProcessInputs+0x220>)
 80020ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <ProcessInputs+0x220>)
 80020f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020f8:	f7fe f86a 	bl	80001d0 <__aeabi_dsub>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	f7fe f864 	bl	80001d4 <__adddf3>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4614      	mov	r4, r2
 8002112:	461d      	mov	r5, r3
 8002114:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	f7fe f85a 	bl	80001d4 <__adddf3>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <ProcessInputs+0x22c>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe f84f 	bl	80001d0 <__aeabi_dsub>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <ProcessInputs+0x220>)
 800213c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002140:	f7fe f9fe 	bl	8000540 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe f842 	bl	80001d4 <__adddf3>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	f7fe f838 	bl	80001d4 <__adddf3>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <ProcessInputs+0x22c>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f7fe f82f 	bl	80001d4 <__adddf3>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4620      	mov	r0, r4
 800217c:	4629      	mov	r1, r5
 800217e:	f7fe fb09 	bl	8000794 <__aeabi_ddiv>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4914      	ldr	r1, [pc, #80]	; (80021d8 <ProcessInputs+0x220>)
 8002188:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <ProcessInputs+0x220>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	4911      	ldr	r1, [pc, #68]	; (80021d8 <ProcessInputs+0x220>)
 8002194:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <ProcessInputs+0x224>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <ProcessInputs+0x224>)
 800219e:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <ProcessInputs+0x224>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <ProcessInputs+0x224>)
 80021a6:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <ProcessInputs+0x224>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <ProcessInputs+0x224>)
 80021ae:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <ProcessInputs+0x224>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a09      	ldr	r2, [pc, #36]	; (80021dc <ProcessInputs+0x224>)
 80021b6:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <ProcessInputs+0x224>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <ProcessInputs+0x224>)
 80021be:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <ProcessInputs+0x224>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	4a05      	ldr	r2, [pc, #20]	; (80021dc <ProcessInputs+0x224>)
 80021c6:	6293      	str	r3, [r2, #40]	; 0x28
 80021c8:	e1be      	b.n	8002548 <ProcessInputs+0x590>
 80021ca:	bf00      	nop
 80021cc:	f3af 8000 	nop.w
 80021d0:	20000008 	.word	0x20000008
 80021d4:	20000078 	.word	0x20000078
 80021d8:	200000f0 	.word	0x200000f0
 80021dc:	20000168 	.word	0x20000168
 80021e0:	20000070 	.word	0x20000070
 80021e4:	20000000 	.word	0x20000000
 80021e8:	be3b06cf 	.word	0xbe3b06cf
 80021ec:	3f904c26 	.word	0x3f904c26
	}
	else
	{
		// Practical differentiator (bilinear transformation used)
		CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*tau - dt)*CM_Ankle.jointSpeed) / (dt + 2*tau);
 80021f0:	4bc5      	ldr	r3, [pc, #788]	; (8002508 <ProcessInputs+0x550>)
 80021f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021f6:	4bc4      	ldr	r3, [pc, #784]	; (8002508 <ProcessInputs+0x550>)
 80021f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021fc:	f7fd ffe8 	bl	80001d0 <__aeabi_dsub>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	f7fd ffe2 	bl	80001d4 <__adddf3>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	461d      	mov	r5, r3
 8002218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	f7fd ffd8 	bl	80001d4 <__adddf3>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	4bb7      	ldr	r3, [pc, #732]	; (800250c <ProcessInputs+0x554>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fd ffcd 	bl	80001d0 <__aeabi_dsub>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	4bb2      	ldr	r3, [pc, #712]	; (8002508 <ProcessInputs+0x550>)
 8002240:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002244:	f7fe f97c 	bl	8000540 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f7fd ffc0 	bl	80001d4 <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4614      	mov	r4, r2
 800225a:	461d      	mov	r5, r3
 800225c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	f7fd ffb6 	bl	80001d4 <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	4ba6      	ldr	r3, [pc, #664]	; (800250c <ProcessInputs+0x554>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	f7fd ffad 	bl	80001d4 <__adddf3>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4620      	mov	r0, r4
 8002280:	4629      	mov	r1, r5
 8002282:	f7fe fa87 	bl	8000794 <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	499f      	ldr	r1, [pc, #636]	; (8002508 <ProcessInputs+0x550>)
 800228c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 8002290:	4b9d      	ldr	r3, [pc, #628]	; (8002508 <ProcessInputs+0x550>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	499c      	ldr	r1, [pc, #624]	; (8002508 <ProcessInputs+0x550>)
 8002298:	e9c1 2302 	strd	r2, r3, [r1, #8]

		// Practical differentiator (bilinear transformation used)
		CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 800229c:	4b9c      	ldr	r3, [pc, #624]	; (8002510 <ProcessInputs+0x558>)
 800229e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a2:	4b9b      	ldr	r3, [pc, #620]	; (8002510 <ProcessInputs+0x558>)
 80022a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022a8:	f7fd ff92 	bl	80001d0 <__aeabi_dsub>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	f7fd ff8c 	bl	80001d4 <__adddf3>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4614      	mov	r4, r2
 80022c2:	461d      	mov	r5, r3
 80022c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	f7fd ff82 	bl	80001d4 <__adddf3>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	4b8c      	ldr	r3, [pc, #560]	; (800250c <ProcessInputs+0x554>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	f7fd ff77 	bl	80001d0 <__aeabi_dsub>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	4b89      	ldr	r3, [pc, #548]	; (8002510 <ProcessInputs+0x558>)
 80022ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022f0:	f7fe f926 	bl	8000540 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4620      	mov	r0, r4
 80022fa:	4629      	mov	r1, r5
 80022fc:	f7fd ff6a 	bl	80001d4 <__adddf3>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4614      	mov	r4, r2
 8002306:	461d      	mov	r5, r3
 8002308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	f7fd ff60 	bl	80001d4 <__adddf3>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	4b7b      	ldr	r3, [pc, #492]	; (800250c <ProcessInputs+0x554>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fd ff57 	bl	80001d4 <__adddf3>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4620      	mov	r0, r4
 800232c:	4629      	mov	r1, r5
 800232e:	f7fe fa31 	bl	8000794 <__aeabi_ddiv>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4976      	ldr	r1, [pc, #472]	; (8002510 <ProcessInputs+0x558>)
 8002338:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 800233c:	4b74      	ldr	r3, [pc, #464]	; (8002510 <ProcessInputs+0x558>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	4973      	ldr	r1, [pc, #460]	; (8002510 <ProcessInputs+0x558>)
 8002344:	e9c1 2302 	strd	r2, r3, [r1, #8]

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell.Filtered.bot[0] =   1.6556 * CM_LoadCell.Filtered.bot[1] - 0.7068 * CM_LoadCell.Filtered.bot[2]
 8002348:	4b72      	ldr	r3, [pc, #456]	; (8002514 <ProcessInputs+0x55c>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f89f 	bl	8000490 <__aeabi_f2d>
 8002352:	a365      	add	r3, pc, #404	; (adr r3, 80024e8 <ProcessInputs+0x530>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe f8f2 	bl	8000540 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4614      	mov	r4, r2
 8002362:	461d      	mov	r5, r3
 8002364:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <ProcessInputs+0x55c>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f891 	bl	8000490 <__aeabi_f2d>
 800236e:	a360      	add	r3, pc, #384	; (adr r3, 80024f0 <ProcessInputs+0x538>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f8e4 	bl	8000540 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7fd ff26 	bl	80001d0 <__aeabi_dsub>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4614      	mov	r4, r2
 800238a:	461d      	mov	r5, r3
									  + 0.0128 * CM_LoadCell.Raw.bot[0] + 0.0256 * CM_LoadCell.Raw.bot[1] + 0.0128 * CM_LoadCell.Raw.bot[2];
 800238c:	4b61      	ldr	r3, [pc, #388]	; (8002514 <ProcessInputs+0x55c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f87d 	bl	8000490 <__aeabi_f2d>
 8002396:	a358      	add	r3, pc, #352	; (adr r3, 80024f8 <ProcessInputs+0x540>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe f8d0 	bl	8000540 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fd ff14 	bl	80001d4 <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4614      	mov	r4, r2
 80023b2:	461d      	mov	r5, r3
 80023b4:	4b57      	ldr	r3, [pc, #348]	; (8002514 <ProcessInputs+0x55c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f869 	bl	8000490 <__aeabi_f2d>
 80023be:	a350      	add	r3, pc, #320	; (adr r3, 8002500 <ProcessInputs+0x548>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fe f8bc 	bl	8000540 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7fd ff00 	bl	80001d4 <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4614      	mov	r4, r2
 80023da:	461d      	mov	r5, r3
 80023dc:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <ProcessInputs+0x55c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f855 	bl	8000490 <__aeabi_f2d>
 80023e6:	a344      	add	r3, pc, #272	; (adr r3, 80024f8 <ProcessInputs+0x540>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f8a8 	bl	8000540 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fd feec 	bl	80001d4 <__adddf3>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe faae 	bl	8000964 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.bot[0] =   1.6556 * CM_LoadCell.Filtered.bot[1] - 0.7068 * CM_LoadCell.Filtered.bot[2]
 800240a:	4a42      	ldr	r2, [pc, #264]	; (8002514 <ProcessInputs+0x55c>)
 800240c:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] =   1.6556 * CM_LoadCell.Filtered.top[1] - 0.7068 * CM_LoadCell.Filtered.top[2]
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <ProcessInputs+0x55c>)
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f83c 	bl	8000490 <__aeabi_f2d>
 8002418:	a333      	add	r3, pc, #204	; (adr r3, 80024e8 <ProcessInputs+0x530>)
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	f7fe f88f 	bl	8000540 <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4614      	mov	r4, r2
 8002428:	461d      	mov	r5, r3
 800242a:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <ProcessInputs+0x55c>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f82e 	bl	8000490 <__aeabi_f2d>
 8002434:	a32e      	add	r3, pc, #184	; (adr r3, 80024f0 <ProcessInputs+0x538>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fe f881 	bl	8000540 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd fec3 	bl	80001d0 <__aeabi_dsub>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4614      	mov	r4, r2
 8002450:	461d      	mov	r5, r3
									  + 0.0128 * CM_LoadCell.Raw.top[0] + 0.0256 * CM_LoadCell.Raw.top[1] + 0.0128 * CM_LoadCell.Raw.top[2];
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <ProcessInputs+0x55c>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f81a 	bl	8000490 <__aeabi_f2d>
 800245c:	a326      	add	r3, pc, #152	; (adr r3, 80024f8 <ProcessInputs+0x540>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f86d 	bl	8000540 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fd feb1 	bl	80001d4 <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4614      	mov	r4, r2
 8002478:	461d      	mov	r5, r3
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <ProcessInputs+0x55c>)
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f806 	bl	8000490 <__aeabi_f2d>
 8002484:	a31e      	add	r3, pc, #120	; (adr r3, 8002500 <ProcessInputs+0x548>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	f7fe f859 	bl	8000540 <__aeabi_dmul>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4620      	mov	r0, r4
 8002494:	4629      	mov	r1, r5
 8002496:	f7fd fe9d 	bl	80001d4 <__adddf3>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4614      	mov	r4, r2
 80024a0:	461d      	mov	r5, r3
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <ProcessInputs+0x55c>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd fff2 	bl	8000490 <__aeabi_f2d>
 80024ac:	a312      	add	r3, pc, #72	; (adr r3, 80024f8 <ProcessInputs+0x540>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fe f845 	bl	8000540 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fd fe89 	bl	80001d4 <__adddf3>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7fe fa4b 	bl	8000964 <__aeabi_d2f>
 80024ce:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.top[0] =   1.6556 * CM_LoadCell.Filtered.top[1] - 0.7068 * CM_LoadCell.Filtered.top[2]
 80024d0:	4a10      	ldr	r2, [pc, #64]	; (8002514 <ProcessInputs+0x55c>)
 80024d2:	6253      	str	r3, [r2, #36]	; 0x24

		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[1];
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <ProcessInputs+0x55c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <ProcessInputs+0x55c>)
 80024da:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <ProcessInputs+0x55c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <ProcessInputs+0x55c>)
 80024e2:	6053      	str	r3, [r2, #4]
 80024e4:	e018      	b.n	8002518 <ProcessInputs+0x560>
 80024e6:	bf00      	nop
 80024e8:	6cf41f21 	.word	0x6cf41f21
 80024ec:	3ffa7d56 	.word	0x3ffa7d56
 80024f0:	089a0275 	.word	0x089a0275
 80024f4:	3fe69e1b 	.word	0x3fe69e1b
 80024f8:	eb1c432d 	.word	0xeb1c432d
 80024fc:	3f8a36e2 	.word	0x3f8a36e2
 8002500:	eb1c432d 	.word	0xeb1c432d
 8002504:	3f9a36e2 	.word	0x3f9a36e2
 8002508:	20000078 	.word	0x20000078
 800250c:	20000000 	.word	0x20000000
 8002510:	200000f0 	.word	0x200000f0
 8002514:	20000168 	.word	0x20000168
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[1];
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <ProcessInputs+0x5f4>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <ProcessInputs+0x5f4>)
 800251e:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <ProcessInputs+0x5f4>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a21      	ldr	r2, [pc, #132]	; (80025ac <ProcessInputs+0x5f4>)
 8002526:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <ProcessInputs+0x5f4>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <ProcessInputs+0x5f4>)
 800252e:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <ProcessInputs+0x5f4>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <ProcessInputs+0x5f4>)
 8002536:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <ProcessInputs+0x5f4>)
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	4a1b      	ldr	r2, [pc, #108]	; (80025ac <ProcessInputs+0x5f4>)
 800253e:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <ProcessInputs+0x5f4>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <ProcessInputs+0x5f4>)
 8002546:	6293      	str	r3, [r2, #40]	; 0x28
	}

	if(Device.Side == Left)
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <ProcessInputs+0x5f8>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10f      	bne.n	8002570 <ProcessInputs+0x5b8>
		CM_IMU_GyroZ = -IMU_Data.Struct.gz;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <ProcessInputs+0x5fc>)
 8002552:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fa03 	bl	8000964 <__aeabi_d2f>
 800255e:	4603      	mov	r3, r0
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef1 7a67 	vneg.f32	s15, s15
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <ProcessInputs+0x600>)
 800256a:	edc3 7a00 	vstr	s15, [r3]
 800256e:	e009      	b.n	8002584 <ProcessInputs+0x5cc>
	else
		CM_IMU_GyroZ = IMU_Data.Struct.gz;
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <ProcessInputs+0x5fc>)
 8002572:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe f9f3 	bl	8000964 <__aeabi_d2f>
 800257e:	4603      	mov	r3, r0
 8002580:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <ProcessInputs+0x600>)
 8002582:	6013      	str	r3, [r2, #0]

	CM_Ankle.limbSpeed = CM_IMU_GyroZ + CM_Ankle.jointSpeed;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <ProcessInputs+0x600>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ff81 	bl	8000490 <__aeabi_f2d>
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <ProcessInputs+0x604>)
 8002590:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002594:	f7fd fe1e 	bl	80001d4 <__adddf3>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <ProcessInputs+0x604>)
 800259e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdb0      	pop	{r4, r5, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000168 	.word	0x20000168
 80025b0:	2000003c 	.word	0x2000003c
 80025b4:	20000040 	.word	0x20000040
 80025b8:	20000074 	.word	0x20000074
 80025bc:	20000078 	.word	0x20000078

080025c0 <RunImpedanceControl>:
		break;
	}
}

static void RunImpedanceControl(void)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
	float gearRatio = 40.0f;
 80025c6:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <RunImpedanceControl+0x1e0>)
 80025c8:	61fb      	str	r3, [r7, #28]
	float nomCurrent = 8.0f;
 80025ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80025ce:	61bb      	str	r3, [r7, #24]
	float torqueConst = 60.0f / (2 * M_PI * 100);	// For Kv = 100 rpm/V
 80025d0:	4b74      	ldr	r3, [pc, #464]	; (80027a4 <RunImpedanceControl+0x1e4>)
 80025d2:	617b      	str	r3, [r7, #20]
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80025d4:	4b74      	ldr	r3, [pc, #464]	; (80027a8 <RunImpedanceControl+0x1e8>)
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <RunImpedanceControl+0x24>
 80025dc:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <RunImpedanceControl+0x1e8>)
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d167      	bne.n	80026b4 <RunImpedanceControl+0xf4>
	{
		float errorPos = CM_Ankle.ProsCtrl.eqPoint - CM_Ankle.jointAngle[0];
 80025e4:	4b71      	ldr	r3, [pc, #452]	; (80027ac <RunImpedanceControl+0x1ec>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ff51 	bl	8000490 <__aeabi_f2d>
 80025ee:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <RunImpedanceControl+0x1ec>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fd fdec 	bl	80001d0 <__aeabi_dsub>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f7fe f9b0 	bl	8000964 <__aeabi_d2f>
 8002604:	4603      	mov	r3, r0
 8002606:	613b      	str	r3, [r7, #16]
		CM_Ankle.jointTorque = (CM_Ankle.ProsCtrl.kp*errorPos - CM_Ankle.ProsCtrl.kd*CM_Ankle.jointSpeed);
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <RunImpedanceControl+0x1ec>)
 800260a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800260e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	ee17 0a90 	vmov	r0, s15
 800261a:	f7fd ff39 	bl	8000490 <__aeabi_f2d>
 800261e:	4604      	mov	r4, r0
 8002620:	460d      	mov	r5, r1
 8002622:	4b62      	ldr	r3, [pc, #392]	; (80027ac <RunImpedanceControl+0x1ec>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff32 	bl	8000490 <__aeabi_f2d>
 800262c:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <RunImpedanceControl+0x1ec>)
 800262e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002632:	f7fd ff85 	bl	8000540 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4620      	mov	r0, r4
 800263c:	4629      	mov	r1, r5
 800263e:	f7fd fdc7 	bl	80001d0 <__aeabi_dsub>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f7fe f98b 	bl	8000964 <__aeabi_d2f>
 800264e:	4603      	mov	r3, r0
 8002650:	4a56      	ldr	r2, [pc, #344]	; (80027ac <RunImpedanceControl+0x1ec>)
 8002652:	6253      	str	r3, [r2, #36]	; 0x24
		int16_t motorTorque = CM_Ankle.jointTorque / (torqueConst * gearRatio * nomCurrent) * 1000;
 8002654:	4b55      	ldr	r3, [pc, #340]	; (80027ac <RunImpedanceControl+0x1ec>)
 8002656:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800265a:	ed97 7a05 	vldr	s14, [r7, #20]
 800265e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002666:	edd7 7a06 	vldr	s15, [r7, #24]
 800266a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002672:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80027b0 <RunImpedanceControl+0x1f0>
 8002676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800267e:	ee17 3a90 	vmov	r3, s15
 8002682:	81fb      	strh	r3, [r7, #14]

		if((testProgram == None) || (testProgram == ImpedanceControl))
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <RunImpedanceControl+0x1f4>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <RunImpedanceControl+0xd4>
 800268c:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <RunImpedanceControl+0x1f4>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d10f      	bne.n	80026b4 <RunImpedanceControl+0xf4>
		{
			EPOS4_Error_e error = EPOS4_WriteTargetTorqueValue(AnkleMotorControllerIndex, motorTorque);
 8002694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002698:	4619      	mov	r1, r3
 800269a:	2000      	movs	r0, #0
 800269c:	f000 ffcc 	bl	8003638 <EPOS4_WriteTargetTorqueValue>
 80026a0:	4603      	mov	r3, r0
 80026a2:	737b      	strb	r3, [r7, #13]
			if(error)
 80026a4:	7b7b      	ldrb	r3, [r7, #13]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <RunImpedanceControl+0xf4>
				ErrorHandler_EPOS4(AnkleMotorControllerIndex, error);
 80026aa:	7b7b      	ldrb	r3, [r7, #13]
 80026ac:	4619      	mov	r1, r3
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe fbfc 	bl	8000eac <ErrorHandler_EPOS4>
		}
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 80026b4:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <RunImpedanceControl+0x1e8>)
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d003      	beq.n	80026c4 <RunImpedanceControl+0x104>
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <RunImpedanceControl+0x1e8>)
 80026be:	785b      	ldrb	r3, [r3, #1]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d169      	bne.n	8002798 <RunImpedanceControl+0x1d8>
	{
		float errorPos = CM_Knee.ProsCtrl.eqPoint - CM_Knee.jointAngle[0];
 80026c4:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <RunImpedanceControl+0x1f8>)
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd fee1 	bl	8000490 <__aeabi_f2d>
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <RunImpedanceControl+0x1f8>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	f7fd fd7c 	bl	80001d0 <__aeabi_dsub>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f7fe f940 	bl	8000964 <__aeabi_d2f>
 80026e4:	4603      	mov	r3, r0
 80026e6:	60bb      	str	r3, [r7, #8]
		CM_Knee.jointTorque = (CM_Knee.ProsCtrl.kp*errorPos - CM_Knee.ProsCtrl.kd*CM_Knee.jointSpeed);
 80026e8:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <RunImpedanceControl+0x1f8>)
 80026ea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80026ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	ee17 0a90 	vmov	r0, s15
 80026fa:	f7fd fec9 	bl	8000490 <__aeabi_f2d>
 80026fe:	4604      	mov	r4, r0
 8002700:	460d      	mov	r5, r1
 8002702:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <RunImpedanceControl+0x1f8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fec2 	bl	8000490 <__aeabi_f2d>
 800270c:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <RunImpedanceControl+0x1f8>)
 800270e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002712:	f7fd ff15 	bl	8000540 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4620      	mov	r0, r4
 800271c:	4629      	mov	r1, r5
 800271e:	f7fd fd57 	bl	80001d0 <__aeabi_dsub>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe f91b 	bl	8000964 <__aeabi_d2f>
 800272e:	4603      	mov	r3, r0
 8002730:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <RunImpedanceControl+0x1f8>)
 8002732:	6253      	str	r3, [r2, #36]	; 0x24
		int16_t motorTorque = CM_Knee.jointTorque / (torqueConst * gearRatio * nomCurrent) * 1000;
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <RunImpedanceControl+0x1f8>)
 8002736:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800273a:	ed97 7a05 	vldr	s14, [r7, #20]
 800273e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002746:	edd7 7a06 	vldr	s15, [r7, #24]
 800274a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800274e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002752:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80027b0 <RunImpedanceControl+0x1f0>
 8002756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800275e:	ee17 3a90 	vmov	r3, s15
 8002762:	80fb      	strh	r3, [r7, #6]

		if((testProgram == None) || (testProgram == ImpedanceControl))
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <RunImpedanceControl+0x1f4>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <RunImpedanceControl+0x1b4>
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <RunImpedanceControl+0x1f4>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d111      	bne.n	8002798 <RunImpedanceControl+0x1d8>
		{
			EPOS4_Error_e error = EPOS4_WriteTargetTorqueValue(KneeMotorControllerIndex, -motorTorque);		// Knee joint rotates opposite of coordinate system
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	425b      	negs	r3, r3
 8002778:	b29b      	uxth	r3, r3
 800277a:	b21b      	sxth	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	2001      	movs	r0, #1
 8002780:	f000 ff5a 	bl	8003638 <EPOS4_WriteTargetTorqueValue>
 8002784:	4603      	mov	r3, r0
 8002786:	717b      	strb	r3, [r7, #5]
			if(error)
 8002788:	797b      	ldrb	r3, [r7, #5]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <RunImpedanceControl+0x1d8>
				ErrorHandler_EPOS4(AnkleMotorControllerIndex, error);
 800278e:	797b      	ldrb	r3, [r7, #5]
 8002790:	4619      	mov	r1, r3
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe fb8a 	bl	8000eac <ErrorHandler_EPOS4>
		}
	}
}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bdb0      	pop	{r4, r5, r7, pc}
 80027a0:	42200000 	.word	0x42200000
 80027a4:	3dc391d1 	.word	0x3dc391d1
 80027a8:	2000003c 	.word	0x2000003c
 80027ac:	20000078 	.word	0x20000078
 80027b0:	447a0000 	.word	0x447a0000
 80027b4:	2000003e 	.word	0x2000003e
 80027b8:	200000f0 	.word	0x200000f0

080027bc <RunTestProgram>:

static void RunTestProgram(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
	switch (testProgram)
 80027c2:	4b6e      	ldr	r3, [pc, #440]	; (800297c <RunTestProgram+0x1c0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	f200 80d4 	bhi.w	8002974 <RunTestProgram+0x1b8>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <RunTestProgram+0x18>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	0800296b 	.word	0x0800296b
 80027d8:	0800296b 	.word	0x0800296b
 80027dc:	080027e5 	.word	0x080027e5
 80027e0:	08002895 	.word	0x08002895

	case ReadOnly:
		break;

	case EncoderBias:
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80027e4:	4b66      	ldr	r3, [pc, #408]	; (8002980 <RunTestProgram+0x1c4>)
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <RunTestProgram+0x38>
 80027ec:	4b64      	ldr	r3, [pc, #400]	; (8002980 <RunTestProgram+0x1c4>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d122      	bne.n	800283a <RunTestProgram+0x7e>
		{
			static uint32_t sum = 0;
			static uint16_t count = 0;
			sum += AS5145B_ReadPosition_Raw(AnkleEncoderIndex);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f000 fcd1 	bl	800319c <AS5145B_ReadPosition_Raw>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b61      	ldr	r3, [pc, #388]	; (8002984 <RunTestProgram+0x1c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a5f      	ldr	r2, [pc, #380]	; (8002984 <RunTestProgram+0x1c8>)
 8002806:	6013      	str	r3, [r2, #0]
			count++;
 8002808:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <RunTestProgram+0x1cc>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b5d      	ldr	r3, [pc, #372]	; (8002988 <RunTestProgram+0x1cc>)
 8002812:	801a      	strh	r2, [r3, #0]
			if(count == 10)
 8002814:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <RunTestProgram+0x1cc>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	2b0a      	cmp	r3, #10
 800281a:	d10e      	bne.n	800283a <RunTestProgram+0x7e>
			{
				CM_ankleRawEncoderBias = sum/count;
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <RunTestProgram+0x1c8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a59      	ldr	r2, [pc, #356]	; (8002988 <RunTestProgram+0x1cc>)
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	fbb3 f3f2 	udiv	r3, r3, r2
 8002828:	b29a      	uxth	r2, r3
 800282a:	4b58      	ldr	r3, [pc, #352]	; (800298c <RunTestProgram+0x1d0>)
 800282c:	801a      	strh	r2, [r3, #0]
				sum = 0;
 800282e:	4b55      	ldr	r3, [pc, #340]	; (8002984 <RunTestProgram+0x1c8>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
				count = 0;
 8002834:	4b54      	ldr	r3, [pc, #336]	; (8002988 <RunTestProgram+0x1cc>)
 8002836:	2200      	movs	r2, #0
 8002838:	801a      	strh	r2, [r3, #0]
			}
		}

		if((Device.Joint == Knee) || (Device.Joint == Combined))
 800283a:	4b51      	ldr	r3, [pc, #324]	; (8002980 <RunTestProgram+0x1c4>)
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d004      	beq.n	800284c <RunTestProgram+0x90>
 8002842:	4b4f      	ldr	r3, [pc, #316]	; (8002980 <RunTestProgram+0x1c4>)
 8002844:	785b      	ldrb	r3, [r3, #1]
 8002846:	2b01      	cmp	r3, #1
 8002848:	f040 8091 	bne.w	800296e <RunTestProgram+0x1b2>
		{
			static uint32_t sum = 0;
			static uint16_t count = 0;
			sum += AS5145B_ReadPosition_Raw(AnkleEncoderIndex);
 800284c:	2000      	movs	r0, #0
 800284e:	f000 fca5 	bl	800319c <AS5145B_ReadPosition_Raw>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <RunTestProgram+0x1d4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <RunTestProgram+0x1d4>)
 800285e:	6013      	str	r3, [r2, #0]
			count++;
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <RunTestProgram+0x1d8>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <RunTestProgram+0x1d8>)
 800286a:	801a      	strh	r2, [r3, #0]
			if(count == 10)
 800286c:	4b49      	ldr	r3, [pc, #292]	; (8002994 <RunTestProgram+0x1d8>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	2b0a      	cmp	r3, #10
 8002872:	d17c      	bne.n	800296e <RunTestProgram+0x1b2>
			{
				CM_kneeRawEncoderBias = sum/count;
 8002874:	4b46      	ldr	r3, [pc, #280]	; (8002990 <RunTestProgram+0x1d4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a46      	ldr	r2, [pc, #280]	; (8002994 <RunTestProgram+0x1d8>)
 800287a:	8812      	ldrh	r2, [r2, #0]
 800287c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b45      	ldr	r3, [pc, #276]	; (8002998 <RunTestProgram+0x1dc>)
 8002884:	801a      	strh	r2, [r3, #0]
				sum = 0;
 8002886:	4b42      	ldr	r3, [pc, #264]	; (8002990 <RunTestProgram+0x1d4>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
				count = 0;
 800288c:	4b41      	ldr	r3, [pc, #260]	; (8002994 <RunTestProgram+0x1d8>)
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
			}
		}

		break;
 8002892:	e06c      	b.n	800296e <RunTestProgram+0x1b2>

	case ImpedanceControl:
		if(isFirst)
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <RunTestProgram+0x1e0>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d06a      	beq.n	8002972 <RunTestProgram+0x1b6>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 800289c:	4b38      	ldr	r3, [pc, #224]	; (8002980 <RunTestProgram+0x1c4>)
 800289e:	785b      	ldrb	r3, [r3, #1]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <RunTestProgram+0xf0>
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <RunTestProgram+0x1c4>)
 80028a6:	785b      	ldrb	r3, [r3, #1]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d12a      	bne.n	8002902 <RunTestProgram+0x146>
			{
				uint16_t i;
				float sum = 0.0f;
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
				for(i = 0; i < 1000; i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	82fb      	strh	r3, [r7, #22]
 80028b6:	e00f      	b.n	80028d8 <RunTestProgram+0x11c>
				{
					float position = AS5145B_ReadPosition(AnkleEncoderIndex);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f000 fc41 	bl	8003140 <AS5145B_ReadPosition>
 80028be:	ed87 0a01 	vstr	s0, [r7, #4]
					sum += position;
 80028c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80028c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ce:	edc7 7a04 	vstr	s15, [r7, #16]
				for(i = 0; i < 1000; i++)
 80028d2:	8afb      	ldrh	r3, [r7, #22]
 80028d4:	3301      	adds	r3, #1
 80028d6:	82fb      	strh	r3, [r7, #22]
 80028d8:	8afb      	ldrh	r3, [r7, #22]
 80028da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028de:	d3eb      	bcc.n	80028b8 <RunTestProgram+0xfc>
				}

				CM_Ankle.ProsCtrl.eqPoint = sum / i - CM_Ankle.encoderBias;
 80028e0:	8afb      	ldrh	r3, [r7, #22]
 80028e2:	ee07 3a90 	vmov	s15, r3
 80028e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ea:	edd7 6a04 	vldr	s13, [r7, #16]
 80028ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <RunTestProgram+0x1e4>)
 80028f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <RunTestProgram+0x1e4>)
 80028fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			}

			if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002902:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <RunTestProgram+0x1c4>)
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <RunTestProgram+0x156>
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <RunTestProgram+0x1c4>)
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d12f      	bne.n	8002972 <RunTestProgram+0x1b6>
			{
				uint16_t i;
				float sum = 0.0f;
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
				for(i = 0; i < 1000; i++)
 8002918:	2300      	movs	r3, #0
 800291a:	81fb      	strh	r3, [r7, #14]
 800291c:	e00f      	b.n	800293e <RunTestProgram+0x182>
				{
					float position = AS5145B_ReadPosition(KneeEncoderIndex);
 800291e:	2001      	movs	r0, #1
 8002920:	f000 fc0e 	bl	8003140 <AS5145B_ReadPosition>
 8002924:	ed87 0a00 	vstr	s0, [r7]
					sum += position;
 8002928:	ed97 7a02 	vldr	s14, [r7, #8]
 800292c:	edd7 7a00 	vldr	s15, [r7]
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	edc7 7a02 	vstr	s15, [r7, #8]
				for(i = 0; i < 1000; i++)
 8002938:	89fb      	ldrh	r3, [r7, #14]
 800293a:	3301      	adds	r3, #1
 800293c:	81fb      	strh	r3, [r7, #14]
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002944:	d3eb      	bcc.n	800291e <RunTestProgram+0x162>
				}

				CM_Knee.ProsCtrl.eqPoint = sum / i - CM_Knee.encoderBias;
 8002946:	89fb      	ldrh	r3, [r7, #14]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002950:	edd7 6a02 	vldr	s13, [r7, #8]
 8002954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <RunTestProgram+0x1e8>)
 800295a:	edd3 7a08 	vldr	s15, [r3, #32]
 800295e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <RunTestProgram+0x1e8>)
 8002964:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			}
		}

		break;
 8002968:	e003      	b.n	8002972 <RunTestProgram+0x1b6>
		break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <RunTestProgram+0x1b8>
		break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <RunTestProgram+0x1b8>
		break;
 8002972:	bf00      	nop
	}
}
 8002974:	bf00      	nop
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	2000003e 	.word	0x2000003e
 8002980:	2000003c 	.word	0x2000003c
 8002984:	200001a4 	.word	0x200001a4
 8002988:	200001a8 	.word	0x200001a8
 800298c:	200001a0 	.word	0x200001a0
 8002990:	200001ac 	.word	0x200001ac
 8002994:	200001b0 	.word	0x200001b0
 8002998:	200001a2 	.word	0x200001a2
 800299c:	20000008 	.word	0x20000008
 80029a0:	20000078 	.word	0x20000078
 80029a4:	200000f0 	.word	0x200000f0

080029a8 <LL_AHB2_GRP1_EnableClock>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80029b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b4:	4907      	ldr	r1, [pc, #28]	; (80029d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80029be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4013      	ands	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40021000 	.word	0x40021000

080029d8 <LL_APB1_GRP1_EnableClock>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029e4:	4907      	ldr	r1, [pc, #28]	; (8002a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40021000 	.word	0x40021000

08002a08 <LL_APB2_GRP1_EnableClock>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a14:	4907      	ldr	r1, [pc, #28]	; (8002a34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000

08002a38 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f023 0210 	bic.w	r2, r3, #16
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	605a      	str	r2, [r3, #4]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f023 0208 	bic.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	605a      	str	r2, [r3, #4]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b090      	sub	sp, #64	; 0x40
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002a86:	f107 0318 	add.w	r3, r7, #24
 8002a8a:	2228      	movs	r2, #40	; 0x28
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fc78 	bl	8006384 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	463b      	mov	r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002aa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002aa8:	f7ff ffae 	bl	8002a08 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7ff ff7b 	bl	80029a8 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002ab2:	23e0      	movs	r3, #224	; 0xe0
 8002ab4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aca:	463b      	mov	r3, r7
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad2:	f002 fd4a 	bl	800556a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002ada:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002ade:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002ae0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ae4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002af4:	2308      	movs	r3, #8
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002af8:	2300      	movs	r3, #0
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002b00:	2307      	movs	r3, #7
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002b04:	f107 0318 	add.w	r3, r7, #24
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4807      	ldr	r0, [pc, #28]	; (8002b28 <MX_SPI1_Init+0xa8>)
 8002b0c:	f003 f996 	bl	8005e3c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002b10:	2100      	movs	r1, #0
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_SPI1_Init+0xa8>)
 8002b14:	f7ff ff90 	bl	8002a38 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8002b18:	4803      	ldr	r0, [pc, #12]	; (8002b28 <MX_SPI1_Init+0xa8>)
 8002b1a:	f7ff ffa0 	bl	8002a5e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	3740      	adds	r7, #64	; 0x40
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40013000 	.word	0x40013000

08002b2c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b090      	sub	sp, #64	; 0x40
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002b32:	f107 0318 	add.w	r3, r7, #24
 8002b36:	2228      	movs	r2, #40	; 0x28
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fc22 	bl	8006384 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	463b      	mov	r3, r7
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
 8002b4c:	611a      	str	r2, [r3, #16]
 8002b4e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002b50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b54:	f7ff ff40 	bl	80029d8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f7ff ff25 	bl	80029a8 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = KNEE_CAN_CONTROLLER_SCK_Pin|KNEE_CAN_CONTROLLER_MISO_Pin|KNEE_CAN_CONTROLLER_MOSI_Pin;
 8002b5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b64:	2302      	movs	r3, #2
 8002b66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002b74:	2305      	movs	r3, #5
 8002b76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b78:	463b      	mov	r3, r7
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4815      	ldr	r0, [pc, #84]	; (8002bd4 <MX_SPI2_Init+0xa8>)
 8002b7e:	f002 fcf4 	bl	800556a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002b86:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002b8a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002b8c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002b90:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002b92:	2302      	movs	r3, #2
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002bac:	2307      	movs	r3, #7
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002bb0:	f107 0318 	add.w	r3, r7, #24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <MX_SPI2_Init+0xac>)
 8002bb8:	f003 f940 	bl	8005e3c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <MX_SPI2_Init+0xac>)
 8002bc0:	f7ff ff3a 	bl	8002a38 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8002bc4:	4804      	ldr	r0, [pc, #16]	; (8002bd8 <MX_SPI2_Init+0xac>)
 8002bc6:	f7ff ff4a 	bl	8002a5e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bca:	bf00      	nop
 8002bcc:	3740      	adds	r7, #64	; 0x40
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	48000400 	.word	0x48000400
 8002bd8:	40003800 	.word	0x40003800

08002bdc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b090      	sub	sp, #64	; 0x40
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002be2:	f107 0318 	add.w	r3, r7, #24
 8002be6:	2228      	movs	r2, #40	; 0x28
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fbca 	bl	8006384 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	611a      	str	r2, [r3, #16]
 8002bfe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002c00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c04:	f7ff fee8 	bl	80029d8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f7ff fecd 	bl	80029a8 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3 (JTDO-TRACESWO)   ------> SPI3_SCK
  PB4 (NJTRST)   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = ANKLE_CAN_CONTROLLER_SCK_Pin|ANKLE_CAN_CONTROLLER_MISO_Pin|ANKLE_CAN_CONTROLLER_MOSI_Pin;
 8002c0e:	2338      	movs	r3, #56	; 0x38
 8002c10:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c12:	2302      	movs	r3, #2
 8002c14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c16:	2303      	movs	r3, #3
 8002c18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002c22:	2306      	movs	r3, #6
 8002c24:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c26:	463b      	mov	r3, r7
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4815      	ldr	r0, [pc, #84]	; (8002c80 <MX_SPI3_Init+0xa4>)
 8002c2c:	f002 fc9d 	bl	800556a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002c34:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002c38:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002c3a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c3e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002c40:	2302      	movs	r3, #2
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002c4e:	2308      	movs	r3, #8
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002c52:	2300      	movs	r3, #0
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002c5e:	f107 0318 	add.w	r3, r7, #24
 8002c62:	4619      	mov	r1, r3
 8002c64:	4807      	ldr	r0, [pc, #28]	; (8002c84 <MX_SPI3_Init+0xa8>)
 8002c66:	f003 f8e9 	bl	8005e3c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_SPI3_Init+0xa8>)
 8002c6e:	f7ff fee3 	bl	8002a38 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8002c72:	4804      	ldr	r0, [pc, #16]	; (8002c84 <MX_SPI3_Init+0xa8>)
 8002c74:	f7ff fef3 	bl	8002a5e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c78:	bf00      	nop
 8002c7a:	3740      	adds	r7, #64	; 0x40
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	48000400 	.word	0x48000400
 8002c84:	40003c00 	.word	0x40003c00

08002c88 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f043 0202 	orr.w	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d101      	bne.n	8002cc0 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <NMI_Handler+0x4>

08002cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <HardFault_Handler+0x4>

08002cda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cde:	e7fe      	b.n	8002cde <MemManage_Handler+0x4>

08002ce0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <BusFault_Handler+0x4>

08002ce6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <UsageFault_Handler+0x4>

08002cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8002d28:	4806      	ldr	r0, [pc, #24]	; (8002d44 <LPTIM2_IRQHandler+0x20>)
 8002d2a:	f7ff ffbd 	bl	8002ca8 <LL_LPTIM_IsActiveFlag_ARRM>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <LPTIM2_IRQHandler+0x24>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 8002d3a:	4802      	ldr	r0, [pc, #8]	; (8002d44 <LPTIM2_IRQHandler+0x20>)
 8002d3c:	f7ff ffa4 	bl	8002c88 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40009400 	.word	0x40009400
 8002d48:	2000003a 	.word	0x2000003a

08002d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <SystemInit+0x20>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <SystemInit+0x20>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <LL_APB1_GRP1_EnableClock>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d7c:	4907      	ldr	r1, [pc, #28]	; (8002d9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40021000 	.word	0x40021000

08002da0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	605a      	str	r2, [r3, #4]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	609a      	str	r2, [r3, #8]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002e1c:	2010      	movs	r0, #16
 8002e1e:	f7ff ffa7 	bl	8002d70 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 8002e22:	2307      	movs	r3, #7
 8002e24:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8002e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e2e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	4808      	ldr	r0, [pc, #32]	; (8002e58 <MX_TIM6_Init+0x50>)
 8002e36:	f003 f893 	bl	8005f60 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8002e3a:	4807      	ldr	r0, [pc, #28]	; (8002e58 <MX_TIM6_Init+0x50>)
 8002e3c:	f7ff ffb0 	bl	8002da0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8002e40:	2100      	movs	r1, #0
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_TIM6_Init+0x50>)
 8002e44:	f7ff ffbc 	bl	8002dc0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8002e48:	4803      	ldr	r0, [pc, #12]	; (8002e58 <MX_TIM6_Init+0x50>)
 8002e4a:	f7ff ffcc 	bl	8002de6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40001000 	.word	0x40001000

08002e5c <LL_RCC_SetUSARTClockSource>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <LL_RCC_SetUSARTClockSource+0x30>)
 8002e66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	401a      	ands	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	4905      	ldr	r1, [pc, #20]	; (8002e8c <LL_RCC_SetUSARTClockSource+0x30>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000

08002e90 <LL_AHB2_GRP1_EnableClock>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e9c:	4907      	ldr	r1, [pc, #28]	; (8002ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <LL_APB1_GRP1_EnableClock>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <LL_APB1_GRP1_EnableClock+0x2c>)
 8002eca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ed6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4013      	ands	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40021000 	.word	0x40021000

08002ef0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	601a      	str	r2, [r3, #0]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	; 0x38
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	611a      	str	r2, [r3, #16]
 8002f52:	615a      	str	r2, [r3, #20]
 8002f54:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
 8002f64:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8002f66:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8002f6a:	f7ff ff77 	bl	8002e5c <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002f6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f72:	f7ff ffa5 	bl	8002ec0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f7ff ff8a 	bl	8002e90 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f7c:	230c      	movs	r3, #12
 8002f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f80:	2302      	movs	r3, #2
 8002f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f84:	2303      	movs	r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002f90:	2307      	movs	r3, #7
 8002f92:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f9c:	f002 fae5 	bl	800556a <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002fa0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fa4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002fbe:	f107 031c 	add.w	r3, r7, #28
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4806      	ldr	r0, [pc, #24]	; (8002fe0 <MX_USART2_UART_Init+0xa4>)
 8002fc6:	f003 f8cf 	bl	8006168 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002fca:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <MX_USART2_UART_Init+0xa4>)
 8002fcc:	f7ff ffa0 	bl	8002f10 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002fd0:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <MX_USART2_UART_Init+0xa4>)
 8002fd2:	f7ff ff8d 	bl	8002ef0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fd6:	bf00      	nop
 8002fd8:	3738      	adds	r7, #56	; 0x38
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40004400 	.word	0x40004400

08002fe4 <DelayUs>:
 *  100			~100.6
 *  500			~500.0
 *  1000		~998.0
 */
void DelayUs(TIM_TypeDef *TIMx, uint8_t timerRateMHz, uint16_t useconds)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	803b      	strh	r3, [r7, #0]
	TIMx->CNT = 0;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
	uint16_t duration = useconds * timerRateMHz;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	883a      	ldrh	r2, [r7, #0]
 8003000:	fb12 f303 	smulbb	r3, r2, r3
 8003004:	81fb      	strh	r3, [r7, #14]
	while(TIMx->CNT < duration);
 8003006:	bf00      	nop
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300c:	89fb      	ldrh	r3, [r7, #14]
 800300e:	429a      	cmp	r2, r3
 8003010:	d3fa      	bcc.n	8003008 <DelayUs+0x24>
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003024:	f7ff fe92 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003028:	480c      	ldr	r0, [pc, #48]	; (800305c <LoopForever+0x6>)
  ldr r1, =_edata
 800302a:	490d      	ldr	r1, [pc, #52]	; (8003060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800302c:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <LoopForever+0xe>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003040:	4c0a      	ldr	r4, [pc, #40]	; (800306c <LoopForever+0x16>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800304e:	f003 f967 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003052:	f7fe fc19 	bl	8001888 <main>

08003056 <LoopForever>:

LoopForever:
    b LoopForever
 8003056:	e7fe      	b.n	8003056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003060:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003064:	08006408 	.word	0x08006408
  ldr r2, =_sbss
 8003068:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800306c:	200002ac 	.word	0x200002ac

08003070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC1_2_IRQHandler>

08003072 <LL_GPIO_IsInputPinSet>:
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4013      	ands	r3, r2
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d101      	bne.n	800308e <LL_GPIO_IsInputPinSet+0x1c>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <LL_GPIO_IsInputPinSet+0x1e>
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_GPIO_SetOutputPin>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	619a      	str	r2, [r3, #24]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_GPIO_ResetOutputPin>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

AS5145B_Error_e AS5145B_Init(uint8_t deviceIndex, AS5145B_Init_t *Device_Init)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > AS5145B_NUMBER_OF_DEVICES)
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d900      	bls.n	80030e8 <AS5145B_Init+0x14>
		while(1);
 80030e6:	e7fe      	b.n	80030e6 <AS5145B_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(AS5145B_Init_t));
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	015b      	lsls	r3, r3, #5
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <AS5145B_Init+0x68>)
 80030ee:	4413      	add	r3, r2
 80030f0:	221c      	movs	r2, #28
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 f937 	bl	8006368 <memcpy>

	ClearChipSelect(deviceIndex);
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f93f 	bl	8003380 <ClearChipSelect>
	RaiseClockEdge(deviceIndex);
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f973 	bl	80033f0 <RaiseClockEdge>

	uint8_t status = ReadStatus(deviceIndex);
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f863 	bl	80031d8 <ReadStatus>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]
	if((status & 0b111000) != 0b100000)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311c:	2b20      	cmp	r3, #32
 800311e:	d001      	beq.n	8003124 <AS5145B_Init+0x50>
		return AS5145B_StatusError;
 8003120:	2301      	movs	r3, #1
 8003122:	e007      	b.n	8003134 <AS5145B_Init+0x60>

	Device[deviceIndex].isInit = 1;
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	4a05      	ldr	r2, [pc, #20]	; (800313c <AS5145B_Init+0x68>)
 8003128:	015b      	lsls	r3, r3, #5
 800312a:	4413      	add	r3, r2
 800312c:	331c      	adds	r3, #28
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

	return AS5145B_NoError;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200001b4 	.word	0x200001b4

08003140 <AS5145B_ReadPosition>:

	return ReadData(deviceIndex);
}

float AS5145B_ReadPosition(uint8_t deviceIndex)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <AS5145B_ReadPosition+0x54>)
 800314e:	015b      	lsls	r3, r3, #5
 8003150:	4413      	add	r3, r2
 8003152:	331c      	adds	r3, #28
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d100      	bne.n	800315c <AS5145B_ReadPosition+0x1c>
		while(1);
 800315a:	e7fe      	b.n	800315a <AS5145B_ReadPosition+0x1a>

	AS5145B_Data_t Data = ReadData(deviceIndex);
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f84a 	bl	80031f8 <ReadData>
 8003164:	4603      	mov	r3, r0
 8003166:	60fb      	str	r3, [r7, #12]
	return Data.position * AS5145B_RAW2DEG;
 8003168:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800316c:	461a      	mov	r2, r3
 800316e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003198 <AS5145B_ReadPosition+0x58>
 8003182:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003186:	eef0 7a66 	vmov.f32	s15, s13
}
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200001b4 	.word	0x200001b4
 8003198:	45800000 	.word	0x45800000

0800319c <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(uint8_t deviceIndex)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <AS5145B_ReadPosition_Raw+0x38>)
 80031aa:	015b      	lsls	r3, r3, #5
 80031ac:	4413      	add	r3, r2
 80031ae:	331c      	adds	r3, #28
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d100      	bne.n	80031b8 <AS5145B_ReadPosition_Raw+0x1c>
		while(1);
 80031b6:	e7fe      	b.n	80031b6 <AS5145B_ReadPosition_Raw+0x1a>

	AS5145B_Data_t Data = ReadData(deviceIndex);
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f81c 	bl	80031f8 <ReadData>
 80031c0:	4603      	mov	r3, r0
 80031c2:	60fb      	str	r3, [r7, #12]
	return Data.position;
 80031c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031c8:	b29b      	uxth	r3, r3
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200001b4 	.word	0x200001b4

080031d8 <ReadStatus>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static uint8_t ReadStatus(uint8_t deviceIndex)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	AS5145B_Data_t Data = ReadData(deviceIndex);
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 f807 	bl	80031f8 <ReadData>
 80031ea:	4603      	mov	r3, r0
 80031ec:	60fb      	str	r3, [r7, #12]
	return Data.status;
 80031ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <ReadData>:

static AS5145B_Data_t ReadData(uint8_t deviceIndex)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f8d7 	bl	80033b8 <SetChipSelect>
	DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	4a5b      	ldr	r2, [pc, #364]	; (800337c <ReadData+0x184>)
 800320e:	015b      	lsls	r3, r3, #5
 8003210:	4413      	add	r3, r2
 8003212:	3314      	adds	r3, #20
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	4a58      	ldr	r2, [pc, #352]	; (800337c <ReadData+0x184>)
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	4413      	add	r3, r2
 800321e:	3318      	adds	r3, #24
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	4619      	mov	r1, r3
 8003226:	f7ff fedd 	bl	8002fe4 <DelayUs>

	AS5145B_Data_t Data;
	memset(&Data, 0, sizeof(Data));
 800322a:	f107 0308 	add.w	r3, r7, #8
 800322e:	2204      	movs	r2, #4
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f003 f8a6 	bl	8006384 <memset>
	for(int i = 12-1; i >= 0; i--)
 8003238:	230b      	movs	r3, #11
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e039      	b.n	80032b2 <ReadData+0xba>
	{
		LowerClockEdge(deviceIndex);
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f8f1 	bl	8003428 <LowerClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	4a4c      	ldr	r2, [pc, #304]	; (800337c <ReadData+0x184>)
 800324a:	015b      	lsls	r3, r3, #5
 800324c:	4413      	add	r3, r2
 800324e:	3314      	adds	r3, #20
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	4a49      	ldr	r2, [pc, #292]	; (800337c <ReadData+0x184>)
 8003256:	015b      	lsls	r3, r3, #5
 8003258:	4413      	add	r3, r2
 800325a:	3318      	adds	r3, #24
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	4619      	mov	r1, r3
 8003262:	f7ff febf 	bl	8002fe4 <DelayUs>
		RaiseClockEdge(deviceIndex);
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f8c1 	bl	80033f0 <RaiseClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	4a42      	ldr	r2, [pc, #264]	; (800337c <ReadData+0x184>)
 8003272:	015b      	lsls	r3, r3, #5
 8003274:	4413      	add	r3, r2
 8003276:	3314      	adds	r3, #20
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	4a3f      	ldr	r2, [pc, #252]	; (800337c <ReadData+0x184>)
 800327e:	015b      	lsls	r3, r3, #5
 8003280:	4413      	add	r3, r2
 8003282:	3318      	adds	r3, #24
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	4619      	mov	r1, r3
 800328a:	f7ff feab 	bl	8002fe4 <DelayUs>

		Data.position |= ReadDO_Pin(deviceIndex) << i;
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f8e5 	bl	8003460 <ReadDO_Pin>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80032a4:	b21b      	sxth	r3, r3
 80032a6:	4313      	orrs	r3, r2
 80032a8:	b21b      	sxth	r3, r3
 80032aa:	813b      	strh	r3, [r7, #8]
	for(int i = 12-1; i >= 0; i--)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	dac2      	bge.n	800323e <ReadData+0x46>
	}

	for(int i = 6-1; i >= 0; i--)
 80032b8:	2305      	movs	r3, #5
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e03a      	b.n	8003334 <ReadData+0x13c>
	{
		LowerClockEdge(deviceIndex);
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f8b1 	bl	8003428 <LowerClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	4a2c      	ldr	r2, [pc, #176]	; (800337c <ReadData+0x184>)
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	4413      	add	r3, r2
 80032ce:	3314      	adds	r3, #20
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	4a29      	ldr	r2, [pc, #164]	; (800337c <ReadData+0x184>)
 80032d6:	015b      	lsls	r3, r3, #5
 80032d8:	4413      	add	r3, r2
 80032da:	3318      	adds	r3, #24
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	4619      	mov	r1, r3
 80032e2:	f7ff fe7f 	bl	8002fe4 <DelayUs>
		RaiseClockEdge(deviceIndex);
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f881 	bl	80033f0 <RaiseClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	4a22      	ldr	r2, [pc, #136]	; (800337c <ReadData+0x184>)
 80032f2:	015b      	lsls	r3, r3, #5
 80032f4:	4413      	add	r3, r2
 80032f6:	3314      	adds	r3, #20
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	4a1f      	ldr	r2, [pc, #124]	; (800337c <ReadData+0x184>)
 80032fe:	015b      	lsls	r3, r3, #5
 8003300:	4413      	add	r3, r2
 8003302:	3318      	adds	r3, #24
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2201      	movs	r2, #1
 8003308:	4619      	mov	r1, r3
 800330a:	f7ff fe6b 	bl	8002fe4 <DelayUs>

		Data.status |= ReadDO_Pin(deviceIndex) << i;
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f8a5 	bl	8003460 <ReadDO_Pin>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	7aba      	ldrb	r2, [r7, #10]
 8003322:	b252      	sxtb	r2, r2
 8003324:	b25b      	sxtb	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	b25b      	sxtb	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	72bb      	strb	r3, [r7, #10]
	for(int i = 6-1; i >= 0; i--)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	3b01      	subs	r3, #1
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	dac1      	bge.n	80032be <ReadData+0xc6>
	}

	ClearChipSelect(deviceIndex);
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f81f 	bl	8003380 <ClearChipSelect>
	DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4a0d      	ldr	r2, [pc, #52]	; (800337c <ReadData+0x184>)
 8003346:	015b      	lsls	r3, r3, #5
 8003348:	4413      	add	r3, r2
 800334a:	3314      	adds	r3, #20
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <ReadData+0x184>)
 8003352:	015b      	lsls	r3, r3, #5
 8003354:	4413      	add	r3, r2
 8003356:	3318      	adds	r3, #24
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2201      	movs	r2, #1
 800335c:	4619      	mov	r1, r3
 800335e:	f7ff fe41 	bl	8002fe4 <DelayUs>

	return Data;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	2300      	movs	r3, #0
 8003368:	89ba      	ldrh	r2, [r7, #12]
 800336a:	f362 030f 	bfi	r3, r2, #0, #16
 800336e:	89fa      	ldrh	r2, [r7, #14]
 8003370:	f362 431f 	bfi	r3, r2, #16, #16
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	200001b4 	.word	0x200001b4

08003380 <ClearChipSelect>:

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CSn_GPIOx, Device[deviceIndex].CSn_Pin);
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <ClearChipSelect+0x34>)
 800338e:	015b      	lsls	r3, r3, #5
 8003390:	4413      	add	r3, r2
 8003392:	3308      	adds	r3, #8
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	4906      	ldr	r1, [pc, #24]	; (80033b4 <ClearChipSelect+0x34>)
 800339a:	015b      	lsls	r3, r3, #5
 800339c:	440b      	add	r3, r1
 800339e:	3310      	adds	r3, #16
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7ff fe79 	bl	800309c <LL_GPIO_SetOutputPin>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200001b4 	.word	0x200001b4

080033b8 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CSn_GPIOx, Device[deviceIndex].CSn_Pin);
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	4a09      	ldr	r2, [pc, #36]	; (80033ec <SetChipSelect+0x34>)
 80033c6:	015b      	lsls	r3, r3, #5
 80033c8:	4413      	add	r3, r2
 80033ca:	3308      	adds	r3, #8
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	4906      	ldr	r1, [pc, #24]	; (80033ec <SetChipSelect+0x34>)
 80033d2:	015b      	lsls	r3, r3, #5
 80033d4:	440b      	add	r3, r1
 80033d6:	3310      	adds	r3, #16
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7ff fe6b 	bl	80030b8 <LL_GPIO_ResetOutputPin>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200001b4 	.word	0x200001b4

080033f0 <RaiseClockEdge>:

static inline void RaiseClockEdge(uint8_t deviceIndex)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CLK_GPIOx, Device[deviceIndex].CLK_Pin);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	4a09      	ldr	r2, [pc, #36]	; (8003424 <RaiseClockEdge+0x34>)
 80033fe:	015b      	lsls	r3, r3, #5
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	4906      	ldr	r1, [pc, #24]	; (8003424 <RaiseClockEdge+0x34>)
 800340a:	015b      	lsls	r3, r3, #5
 800340c:	440b      	add	r3, r1
 800340e:	330e      	adds	r3, #14
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f7ff fe41 	bl	800309c <LL_GPIO_SetOutputPin>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200001b4 	.word	0x200001b4

08003428 <LowerClockEdge>:

static inline void LowerClockEdge(uint8_t deviceIndex)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CLK_GPIOx, Device[deviceIndex].CLK_Pin);
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <LowerClockEdge+0x34>)
 8003436:	015b      	lsls	r3, r3, #5
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	4906      	ldr	r1, [pc, #24]	; (800345c <LowerClockEdge+0x34>)
 8003442:	015b      	lsls	r3, r3, #5
 8003444:	440b      	add	r3, r1
 8003446:	330e      	adds	r3, #14
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f7ff fe33 	bl	80030b8 <LL_GPIO_ResetOutputPin>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200001b4 	.word	0x200001b4

08003460 <ReadDO_Pin>:

static inline uint8_t ReadDO_Pin(uint8_t deviceIndex)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_IsInputPinSet(Device[deviceIndex].DO_GPIOx, Device[deviceIndex].DO_Pin) & 0x01;
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	4a0b      	ldr	r2, [pc, #44]	; (800349c <ReadDO_Pin+0x3c>)
 800346e:	015b      	lsls	r3, r3, #5
 8003470:	4413      	add	r3, r2
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	4909      	ldr	r1, [pc, #36]	; (800349c <ReadDO_Pin+0x3c>)
 8003478:	015b      	lsls	r3, r3, #5
 800347a:	440b      	add	r3, r1
 800347c:	330c      	adds	r3, #12
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f7ff fdf5 	bl	8003072 <LL_GPIO_IsInputPinSet>
 8003488:	4603      	mov	r3, r0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	200001b4 	.word	0x200001b4

080034a0 <EPOS4_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

EPOS4_Error_e EPOS4_Init(uint8_t deviceIndex, EPOS4_Init_t *Device_Init)
{
 80034a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a2:	b093      	sub	sp, #76	; 0x4c
 80034a4:	af0a      	add	r7, sp, #40	; 0x28
 80034a6:	4603      	mov	r3, r0
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > EPOS4_NUMBER_OF_DEVICES)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d900      	bls.n	80034b4 <EPOS4_Init+0x14>
		while(1);
 80034b2:	e7fe      	b.n	80034b2 <EPOS4_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(EPOS4_Init_t));
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	019b      	lsls	r3, r3, #6
 80034b8:	4a5d      	ldr	r2, [pc, #372]	; (8003630 <EPOS4_Init+0x190>)
 80034ba:	4413      	add	r3, r2
 80034bc:	223c      	movs	r2, #60	; 0x3c
 80034be:	6839      	ldr	r1, [r7, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 ff51 	bl	8006368 <memcpy>

	Device[deviceIndex].cobId = Device[deviceIndex].nodeId + 0x0600;
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	4a59      	ldr	r2, [pc, #356]	; (8003630 <EPOS4_Init+0x190>)
 80034ca:	019b      	lsls	r3, r3, #6
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80034d8:	b291      	uxth	r1, r2
 80034da:	4a55      	ldr	r2, [pc, #340]	; (8003630 <EPOS4_Init+0x190>)
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	4413      	add	r3, r2
 80034e0:	333a      	adds	r3, #58	; 0x3a
 80034e2:	460a      	mov	r2, r1
 80034e4:	801a      	strh	r2, [r3, #0]

	uint8_t epos4ProductCodeError = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	77fb      	strb	r3, [r7, #31]
	uint16_t hwVersions[6] = {0x6050, 0x6150, 0x6551, 0x6552, 0x6350, 0x6450};
 80034ea:	4a52      	ldr	r2, [pc, #328]	; (8003634 <EPOS4_Init+0x194>)
 80034ec:	f107 0310 	add.w	r3, r7, #16
 80034f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80034f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t value;
	ReadObjectValue(deviceIndex, IDENTITY_OBJECT_INDEX, PRODUCT_CODE_SUBINDEX, &value);
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	79f8      	ldrb	r0, [r7, #7]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f241 0118 	movw	r1, #4120	; 0x1018
 8003502:	f000 f8db 	bl	80036bc <ReadObjectValue>
	value = value >> 16;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 6; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	77bb      	strb	r3, [r7, #30]
 8003510:	e00f      	b.n	8003532 <EPOS4_Init+0x92>
	{
		if(value == hwVersions[i])
 8003512:	7fbb      	ldrb	r3, [r7, #30]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	3320      	adds	r3, #32
 8003518:	443b      	add	r3, r7
 800351a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	429a      	cmp	r2, r3
 8003524:	d102      	bne.n	800352c <EPOS4_Init+0x8c>
		{
			epos4ProductCodeError = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	77fb      	strb	r3, [r7, #31]
			break;
 800352a:	e005      	b.n	8003538 <EPOS4_Init+0x98>
	for(uint8_t i = 0; i < 6; i++)
 800352c:	7fbb      	ldrb	r3, [r7, #30]
 800352e:	3301      	adds	r3, #1
 8003530:	77bb      	strb	r3, [r7, #30]
 8003532:	7fbb      	ldrb	r3, [r7, #30]
 8003534:	2b05      	cmp	r3, #5
 8003536:	d9ec      	bls.n	8003512 <EPOS4_Init+0x72>
		}
	}
	if(epos4ProductCodeError)
 8003538:	7ffb      	ldrb	r3, [r7, #31]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <EPOS4_Init+0xa2>
		return EPOS4_ProductCodeError;
 800353e:	2302      	movs	r3, #2
 8003540:	e072      	b.n	8003628 <EPOS4_Init+0x188>

	ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	79f8      	ldrb	r0, [r7, #7]
 8003548:	2200      	movs	r2, #0
 800354a:	f246 0141 	movw	r1, #24641	; 0x6041
 800354e:	f000 f8b5 	bl	80036bc <ReadObjectValue>
	value = value & STATE_MASK;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003558:	60fb      	str	r3, [r7, #12]
	if((value == STATE_FAULT) || (value == STATE_FAULT_REACTION_ACTIVE))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d002      	beq.n	8003566 <EPOS4_Init+0xc6>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d101      	bne.n	800356a <EPOS4_Init+0xca>
		return EPOS4_InitFaultDetected;
 8003566:	2303      	movs	r3, #3
 8003568:	e05e      	b.n	8003628 <EPOS4_Init+0x188>

	DisableVoltage(deviceIndex);
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f9e8 	bl	8003942 <DisableVoltage>
	do
	{
		ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	79f8      	ldrb	r0, [r7, #7]
 8003578:	2200      	movs	r2, #0
 800357a:	f246 0141 	movw	r1, #24641	; 0x6041
 800357e:	f000 f89d 	bl	80036bc <ReadObjectValue>
		value = value & STATE_MASK;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003588:	60fb      	str	r3, [r7, #12]
	} while(value != STATE_SWITCH_ON_DISABLED);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d1f0      	bne.n	8003572 <EPOS4_Init+0xd2>

	if(Device[deviceIndex].Requirements.isFirstStepRequired)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	4a27      	ldr	r2, [pc, #156]	; (8003630 <EPOS4_Init+0x190>)
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	4413      	add	r3, r2
 8003598:	3302      	adds	r3, #2
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01a      	beq.n	80035d6 <EPOS4_Init+0x136>
		if(WriteFirstStepObjects(deviceIndex, Device[deviceIndex].FirstStep))
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	4a23      	ldr	r2, [pc, #140]	; (8003630 <EPOS4_Init+0x190>)
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	18d6      	adds	r6, r2, r3
 80035a8:	f897 c007 	ldrb.w	ip, [r7, #7]
 80035ac:	466d      	mov	r5, sp
 80035ae:	f106 0410 	add.w	r4, r6, #16
 80035b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035be:	e885 0003 	stmia.w	r5, {r0, r1}
 80035c2:	1d33      	adds	r3, r6, #4
 80035c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c6:	4660      	mov	r0, ip
 80035c8:	f000 fa12 	bl	80039f0 <WriteFirstStepObjects>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <EPOS4_Init+0x136>
			return EPOS4_FirstStepError;
 80035d2:	2305      	movs	r3, #5
 80035d4:	e028      	b.n	8003628 <EPOS4_Init+0x188>

	if(WriteOptionCodes(deviceIndex))
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fb61 	bl	8003ca0 <WriteOptionCodes>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <EPOS4_Init+0x148>
		return EPOS4_OptionCodesError;
 80035e4:	2306      	movs	r3, #6
 80035e6:	e01f      	b.n	8003628 <EPOS4_Init+0x188>

	if(Device[deviceIndex].Requirements.isModeOfOperationRequired)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	4a11      	ldr	r2, [pc, #68]	; (8003630 <EPOS4_Init+0x190>)
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	4413      	add	r3, r2
 80035f0:	3303      	adds	r3, #3
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00f      	beq.n	8003618 <EPOS4_Init+0x178>
		if(WriteModeOfOperation(deviceIndex, Device[deviceIndex].ModeOfOperation))
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <EPOS4_Init+0x190>)
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	4413      	add	r3, r2
 8003600:	3338      	adds	r3, #56	; 0x38
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fba3 	bl	8003d54 <WriteModeOfOperation>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <EPOS4_Init+0x178>
			return EPOS4_ModeOfOperationError;
 8003614:	2307      	movs	r3, #7
 8003616:	e007      	b.n	8003628 <EPOS4_Init+0x188>

	Device[deviceIndex].isInit = 1;
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <EPOS4_Init+0x190>)
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	4413      	add	r3, r2
 8003620:	333c      	adds	r3, #60	; 0x3c
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

	return EPOS4_NoError;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3724      	adds	r7, #36	; 0x24
 800362c:	46bd      	mov	sp, r7
 800362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003630:	200001f4 	.word	0x200001f4
 8003634:	080063ac 	.word	0x080063ac

08003638 <EPOS4_WriteTargetTorqueValue>:

EPOS4_Error_e EPOS4_WriteTargetTorqueValue(uint8_t deviceIndex, int16_t torque)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	460a      	mov	r2, r1
 8003642:	71fb      	strb	r3, [r7, #7]
 8003644:	4613      	mov	r3, r2
 8003646:	80bb      	strh	r3, [r7, #4]
	if(!Device[deviceIndex].isInit)
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <EPOS4_WriteTargetTorqueValue+0x4c>)
 800364c:	019b      	lsls	r3, r3, #6
 800364e:	4413      	add	r3, r2
 8003650:	333c      	adds	r3, #60	; 0x3c
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d100      	bne.n	800365a <EPOS4_WriteTargetTorqueValue+0x22>
		while(1);
 8003658:	e7fe      	b.n	8003658 <EPOS4_WriteTargetTorqueValue+0x20>

	EPOS4_Error_e error = WriteObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, torque);
 800365a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800365e:	79f8      	ldrb	r0, [r7, #7]
 8003660:	2200      	movs	r2, #0
 8003662:	f246 0171 	movw	r1, #24689	; 0x6071
 8003666:	f000 f85f 	bl	8003728 <WriteObjectValue>
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]
	if(error)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <EPOS4_WriteTargetTorqueValue+0x40>
		return error;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	e000      	b.n	800367a <EPOS4_WriteTargetTorqueValue+0x42>

	return EPOS4_NoError;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200001f4 	.word	0x200001f4

08003688 <EPOS4_DisableVoltage>:

EPOS4_Error_e EPOS4_DisableVoltage(uint8_t deviceIndex)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <EPOS4_DisableVoltage+0x30>)
 8003696:	019b      	lsls	r3, r3, #6
 8003698:	4413      	add	r3, r2
 800369a:	333c      	adds	r3, #60	; 0x3c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d100      	bne.n	80036a4 <EPOS4_DisableVoltage+0x1c>
		while(1);
 80036a2:	e7fe      	b.n	80036a2 <EPOS4_DisableVoltage+0x1a>

	return DisableVoltage(deviceIndex);
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f94b 	bl	8003942 <DisableVoltage>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200001f4 	.word	0x200001f4

080036bc <ReadObjectValue>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static EPOS4_Error_e ReadObjectValue(uint8_t deviceIndex, uint16_t objectIndex, uint8_t objectSubindex, uint32_t *value)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4603      	mov	r3, r0
 80036c6:	71fb      	strb	r3, [r7, #7]
 80036c8:	460b      	mov	r3, r1
 80036ca:	80bb      	strh	r3, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71bb      	strb	r3, [r7, #6]
	MCP25625_RXBx_t RXBx;
	SDO_Upload(deviceIndex, objectIndex, objectSubindex, &RXBx);
 80036d0:	f107 0308 	add.w	r3, r7, #8
 80036d4:	79ba      	ldrb	r2, [r7, #6]
 80036d6:	88b9      	ldrh	r1, [r7, #4]
 80036d8:	79f8      	ldrb	r0, [r7, #7]
 80036da:	f000 f877 	bl	80037cc <SDO_Upload>

	if(CheckForFault(deviceIndex, &RXBx))
 80036de:	f107 0208 	add.w	r2, r7, #8
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f944 	bl	8003974 <CheckForFault>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <ReadObjectValue+0x3a>
		return EPOS4_FaultError;
 80036f2:	2308      	movs	r3, #8
 80036f4:	e014      	b.n	8003720 <ReadObjectValue+0x64>
	if(CheckForAbort(deviceIndex, RXBx.Struct.RXBxDn_Reg))
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	1d5a      	adds	r2, r3, #5
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f961 	bl	80039c8 <CheckForAbort>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <ReadObjectValue+0x54>
		return EPOS4_AbortError;
 800370c:	2309      	movs	r3, #9
 800370e:	e007      	b.n	8003720 <ReadObjectValue+0x64>

	ParseValueFromData(value, RXBx.Struct.RXBxDn_Reg);
 8003710:	f107 0308 	add.w	r3, r7, #8
 8003714:	3305      	adds	r3, #5
 8003716:	4619      	mov	r1, r3
 8003718:	6838      	ldr	r0, [r7, #0]
 800371a:	f000 f836 	bl	800378a <ParseValueFromData>

	return EPOS4_NoError;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <WriteObjectValue>:

static EPOS4_Error_e WriteObjectValue(uint8_t deviceIndex, uint16_t objectIndex, uint8_t objectSubindex, uint32_t value)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
 8003734:	460b      	mov	r3, r1
 8003736:	80bb      	strh	r3, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	71bb      	strb	r3, [r7, #6]
	MCP25625_RXBx_t	RXBx;
	SDO_Download(deviceIndex, objectIndex, objectSubindex, value, &RXBx);
 800373c:	79ba      	ldrb	r2, [r7, #6]
 800373e:	88b9      	ldrh	r1, [r7, #4]
 8003740:	79f8      	ldrb	r0, [r7, #7]
 8003742:	f107 0308 	add.w	r3, r7, #8
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f000 f87d 	bl	8003848 <SDO_Download>

	if(CheckForFault(deviceIndex, &RXBx))
 800374e:	f107 0208 	add.w	r2, r7, #8
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f90c 	bl	8003974 <CheckForFault>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <WriteObjectValue+0x3e>
		return EPOS4_FaultError;
 8003762:	2308      	movs	r3, #8
 8003764:	e00d      	b.n	8003782 <WriteObjectValue+0x5a>
	if(CheckForAbort(deviceIndex, RXBx.Struct.RXBxDn_Reg))
 8003766:	f107 0308 	add.w	r3, r7, #8
 800376a:	1d5a      	adds	r2, r3, #5
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f929 	bl	80039c8 <CheckForAbort>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <WriteObjectValue+0x58>
		return EPOS4_AbortError;
 800377c:	2309      	movs	r3, #9
 800377e:	e000      	b.n	8003782 <WriteObjectValue+0x5a>

	return EPOS4_NoError;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <ParseValueFromData>:

static void ParseValueFromData(uint32_t *value, uint8_t *data)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
	value[0] = ((data[7] << 24) + (data[6] << 16) + (data[5] << 8) + data[4]);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	3307      	adds	r3, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	061a      	lsls	r2, r3, #24
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	3306      	adds	r3, #6
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	441a      	add	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	3305      	adds	r3, #5
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	4413      	add	r3, r2
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	3204      	adds	r2, #4
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	461a      	mov	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <SDO_Upload>:

static void SDO_Upload(uint8_t deviceIndex, uint16_t index, uint8_t subindex, MCP25625_RXBx_t *RXBx)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4603      	mov	r3, r0
 80037d6:	71fb      	strb	r3, [r7, #7]
 80037d8:	460b      	mov	r3, r1
 80037da:	80bb      	strh	r3, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	71bb      	strb	r3, [r7, #6]
	uint8_t data[8];
	FrameData(data, CLIENT_UPLOAD, index, subindex, 0);
 80037e0:	79bb      	ldrb	r3, [r7, #6]
 80037e2:	88ba      	ldrh	r2, [r7, #4]
 80037e4:	f107 0008 	add.w	r0, r7, #8
 80037e8:	2100      	movs	r1, #0
 80037ea:	9100      	str	r1, [sp, #0]
 80037ec:	2140      	movs	r1, #64	; 0x40
 80037ee:	f000 f86b 	bl	80038c8 <FrameData>
	while(MCP25625_LoadTxBufferAtSIDH(Device[deviceIndex].mcpIndex, Device[deviceIndex].cobId, data, 8));
 80037f2:	bf00      	nop
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <SDO_Upload+0x78>)
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	4413      	add	r3, r2
 80037fc:	3301      	adds	r3, #1
 80037fe:	7818      	ldrb	r0, [r3, #0]
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <SDO_Upload+0x78>)
 8003804:	019b      	lsls	r3, r3, #6
 8003806:	4413      	add	r3, r2
 8003808:	333a      	adds	r3, #58	; 0x3a
 800380a:	8819      	ldrh	r1, [r3, #0]
 800380c:	f107 0208 	add.w	r2, r7, #8
 8003810:	2308      	movs	r3, #8
 8003812:	f000 fc2f 	bl	8004074 <MCP25625_LoadTxBufferAtSIDH>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1eb      	bne.n	80037f4 <SDO_Upload+0x28>
	while(MCP25625_ReadRxBufferAtSIDH(Device[deviceIndex].mcpIndex, RXBx, 8));
 800381c:	bf00      	nop
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	4a08      	ldr	r2, [pc, #32]	; (8003844 <SDO_Upload+0x78>)
 8003822:	019b      	lsls	r3, r3, #6
 8003824:	4413      	add	r3, r2
 8003826:	3301      	adds	r3, #1
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2208      	movs	r2, #8
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd10 	bl	8004254 <MCP25625_ReadRxBufferAtSIDH>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f1      	bne.n	800381e <SDO_Upload+0x52>
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200001f4 	.word	0x200001f4

08003848 <SDO_Download>:

static void SDO_Download(uint8_t deviceIndex, uint16_t index, uint8_t subindex, uint32_t value, MCP25625_RXBx_t *RXBx)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af02      	add	r7, sp, #8
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4603      	mov	r3, r0
 8003852:	71fb      	strb	r3, [r7, #7]
 8003854:	460b      	mov	r3, r1
 8003856:	80bb      	strh	r3, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[8];
	FrameData(data, EXPEDITED_CLIENT_DOWNLOAD, index, subindex, value);
 800385c:	79b9      	ldrb	r1, [r7, #6]
 800385e:	88ba      	ldrh	r2, [r7, #4]
 8003860:	f107 0008 	add.w	r0, r7, #8
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	460b      	mov	r3, r1
 800386a:	2122      	movs	r1, #34	; 0x22
 800386c:	f000 f82c 	bl	80038c8 <FrameData>
	while(MCP25625_LoadTxBufferAtSIDH(Device[deviceIndex].mcpIndex, Device[deviceIndex].cobId, data, 8));
 8003870:	bf00      	nop
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <SDO_Download+0x7c>)
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	4413      	add	r3, r2
 800387a:	3301      	adds	r3, #1
 800387c:	7818      	ldrb	r0, [r3, #0]
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <SDO_Download+0x7c>)
 8003882:	019b      	lsls	r3, r3, #6
 8003884:	4413      	add	r3, r2
 8003886:	333a      	adds	r3, #58	; 0x3a
 8003888:	8819      	ldrh	r1, [r3, #0]
 800388a:	f107 0208 	add.w	r2, r7, #8
 800388e:	2308      	movs	r3, #8
 8003890:	f000 fbf0 	bl	8004074 <MCP25625_LoadTxBufferAtSIDH>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1eb      	bne.n	8003872 <SDO_Download+0x2a>
	while(MCP25625_ReadRxBufferAtSIDH(Device[deviceIndex].mcpIndex, RXBx, 8));
 800389a:	bf00      	nop
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <SDO_Download+0x7c>)
 80038a0:	019b      	lsls	r3, r3, #6
 80038a2:	4413      	add	r3, r2
 80038a4:	3301      	adds	r3, #1
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2208      	movs	r2, #8
 80038aa:	69b9      	ldr	r1, [r7, #24]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fcd1 	bl	8004254 <MCP25625_ReadRxBufferAtSIDH>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f1      	bne.n	800389c <SDO_Download+0x54>
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200001f4 	.word	0x200001f4

080038c8 <FrameData>:

static void FrameData(uint8_t *data, uint8_t byte0, uint16_t index, uint8_t subindex, uint32_t value)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	4608      	mov	r0, r1
 80038d2:	4611      	mov	r1, r2
 80038d4:	461a      	mov	r2, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	70fb      	strb	r3, [r7, #3]
 80038da:	460b      	mov	r3, r1
 80038dc:	803b      	strh	r3, [r7, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	70bb      	strb	r3, [r7, #2]
	data[0] = byte0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	701a      	strb	r2, [r3, #0]
	data[1] = (0x00 | index);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3301      	adds	r3, #1
 80038ec:	883a      	ldrh	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
	data[2] = (0x00 | index >> 8);
 80038f2:	883b      	ldrh	r3, [r7, #0]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3302      	adds	r3, #2
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
	data[3] = subindex;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3303      	adds	r3, #3
 8003904:	78ba      	ldrb	r2, [r7, #2]
 8003906:	701a      	strb	r2, [r3, #0]
	data[4] = (0x00 | value);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
	data[5] = (0x00 | value >> 8);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	0a1a      	lsrs	r2, r3, #8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3305      	adds	r3, #5
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]
	data[6] = (0x00 | value >> 16);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	0c1a      	lsrs	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3306      	adds	r3, #6
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]
	data[7] = (0x00 | value >> 24);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	0e1a      	lsrs	r2, r3, #24
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3307      	adds	r3, #7
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <DisableVoltage>:

static EPOS4_Error_e DisableVoltage(uint8_t deviceIndex)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	71fb      	strb	r3, [r7, #7]
	EPOS4_Error_e error = WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_DISABLE_VOLTAGE);
 800394c:	79f8      	ldrb	r0, [r7, #7]
 800394e:	2300      	movs	r3, #0
 8003950:	2200      	movs	r2, #0
 8003952:	f246 0140 	movw	r1, #24640	; 0x6040
 8003956:	f7ff fee7 	bl	8003728 <WriteObjectValue>
 800395a:	4603      	mov	r3, r0
 800395c:	73fb      	strb	r3, [r7, #15]
	if(error)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <DisableVoltage+0x26>
		return error;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	e000      	b.n	800396a <DisableVoltage+0x28>

	return EPOS4_NoError;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <CheckForFault>:

static EPOS4_Error_e CheckForFault(uint8_t deviceIndex, MCP25625_RXBx_t *RXBx)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
	uint8_t cobIdEmcy = Device[deviceIndex].nodeId + 0x80;
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	4a10      	ldr	r2, [pc, #64]	; (80039c4 <CheckForFault+0x50>)
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	4413      	add	r3, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	3b80      	subs	r3, #128	; 0x80
 800398c:	73fb      	strb	r3, [r7, #15]
	uint16_t cobId = (uint16_t) ((RXBx->Struct.RXBxSIDH_Reg << 3) + (RXBx->Struct.RXBxSIDL_Reg.value >> 5));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	b29a      	uxth	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	81bb      	strh	r3, [r7, #12]
	if(cobId == cobIdEmcy)
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	89ba      	ldrh	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d101      	bne.n	80039b4 <CheckForFault+0x40>
		return EPOS4_FaultError;
 80039b0:	2308      	movs	r3, #8
 80039b2:	e000      	b.n	80039b6 <CheckForFault+0x42>

	return EPOS4_NoError;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	200001f4 	.word	0x200001f4

080039c8 <CheckForAbort>:

static EPOS4_Error_e CheckForAbort(uint8_t deviceIndex, uint8_t *data)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	71fb      	strb	r3, [r7, #7]
	if(data[0] >> 7)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da01      	bge.n	80039e2 <CheckForAbort+0x1a>
		return EPOS4_AbortError;
 80039de:	2309      	movs	r3, #9
 80039e0:	e000      	b.n	80039e4 <CheckForAbort+0x1c>

	return EPOS4_NoError;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <WriteFirstStepObjects>:

static uint8_t WriteFirstStepObjects(uint8_t deviceIndex, EPOS4_FirstStep_t FirstStep)
{
 80039f0:	b084      	sub	sp, #16
 80039f2:	b590      	push	{r4, r7, lr}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4604      	mov	r4, r0
 80039fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003a02:	4623      	mov	r3, r4
 8003a04:	71fb      	strb	r3, [r7, #7]
	uint32_t value;

	WriteObjectValue(deviceIndex, CAN_BITRATE_INDEX, 0, FirstStep.CAN_BitRate);
 8003a06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a0a:	79f8      	ldrb	r0, [r7, #7]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f242 0101 	movw	r1, #8193	; 0x2001
 8003a12:	f7ff fe89 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, CAN_BITRATE_INDEX, 0, &value);
 8003a16:	f107 030c 	add.w	r3, r7, #12
 8003a1a:	79f8      	ldrb	r0, [r7, #7]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f242 0101 	movw	r1, #8193	; 0x2001
 8003a22:	f7ff fe4b 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.CAN_BitRate)
 8003a26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <WriteFirstStepObjects+0x46>
		return 1;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e12d      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_TYPE_INDEX, 0, FirstStep.MotorType);
 8003a36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a3a:	79f8      	ldrb	r0, [r7, #7]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f246 4102 	movw	r1, #25602	; 0x6402
 8003a42:	f7ff fe71 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_TYPE_INDEX, 0, &value);
 8003a46:	f107 030c 	add.w	r3, r7, #12
 8003a4a:	79f8      	ldrb	r0, [r7, #7]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f246 4102 	movw	r1, #25602	; 0x6402
 8003a52:	f7ff fe33 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.MotorType)
 8003a56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <WriteFirstStepObjects+0x76>
		return 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e115      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, NOMINAL_CURRENT_SUBINDEX, FirstStep.nominalCurrent);
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	79f8      	ldrb	r0, [r7, #7]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f243 0101 	movw	r1, #12289	; 0x3001
 8003a70:	f7ff fe5a 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, NOMINAL_CURRENT_SUBINDEX, &value);
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	79f8      	ldrb	r0, [r7, #7]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f243 0101 	movw	r1, #12289	; 0x3001
 8003a80:	f7ff fe1c 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.nominalCurrent)
 8003a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <WriteFirstStepObjects+0xa0>
		return 1;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e100      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, OUTPUT_CURRENT_LIMIT_SUBINDEX, FirstStep.outputCurrentLimit);
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	79f8      	ldrb	r0, [r7, #7]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f243 0101 	movw	r1, #12289	; 0x3001
 8003a9a:	f7ff fe45 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, OUTPUT_CURRENT_LIMIT_SUBINDEX, &value);
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	79f8      	ldrb	r0, [r7, #7]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f243 0101 	movw	r1, #12289	; 0x3001
 8003aaa:	f7ff fe07 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.outputCurrentLimit)
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <WriteFirstStepObjects+0xca>
		return 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0eb      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, NUMBER_OF_POLE_PAIRS_SUBINDEX, FirstStep.numberOfPolePairs);
 8003aba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003abe:	79f8      	ldrb	r0, [r7, #7]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	f243 0101 	movw	r1, #12289	; 0x3001
 8003ac6:	f7ff fe2f 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, NUMBER_OF_POLE_PAIRS_SUBINDEX, &value);
 8003aca:	f107 030c 	add.w	r3, r7, #12
 8003ace:	79f8      	ldrb	r0, [r7, #7]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	f243 0101 	movw	r1, #12289	; 0x3001
 8003ad6:	f7ff fdf1 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.numberOfPolePairs)
 8003ada:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <WriteFirstStepObjects+0xfa>
		return 1;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0d3      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, THERMAL_TIME_CONSTANT_WINDING_SUBINDEX, FirstStep.thermalTimeConstantWinding);
 8003aea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003aec:	79f8      	ldrb	r0, [r7, #7]
 8003aee:	2204      	movs	r2, #4
 8003af0:	f243 0101 	movw	r1, #12289	; 0x3001
 8003af4:	f7ff fe18 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, THERMAL_TIME_CONSTANT_WINDING_SUBINDEX, &value);
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	79f8      	ldrb	r0, [r7, #7]
 8003afe:	2204      	movs	r2, #4
 8003b00:	f243 0101 	movw	r1, #12289	; 0x3001
 8003b04:	f7ff fdda 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.thermalTimeConstantWinding)
 8003b08:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d001      	beq.n	8003b16 <WriteFirstStepObjects+0x126>
		return 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0bd      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX,TORQUE_CONSTANT_SUBINDEX, FirstStep.torqueConstant);
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	79f8      	ldrb	r0, [r7, #7]
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	f243 0101 	movw	r1, #12289	; 0x3001
 8003b20:	f7ff fe02 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX,TORQUE_CONSTANT_SUBINDEX, &value);
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	79f8      	ldrb	r0, [r7, #7]
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	f243 0101 	movw	r1, #12289	; 0x3001
 8003b30:	f7ff fdc4 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.torqueConstant)
 8003b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <WriteFirstStepObjects+0x150>
		return 1;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0a8      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, MAX_MOTOR_SPEED_INDEX, 0, FirstStep.maxMotorSpeed);
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	79f8      	ldrb	r0, [r7, #7]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 8003b4a:	f7ff fded 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, MAX_MOTOR_SPEED_INDEX, 0, &value);
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	79f8      	ldrb	r0, [r7, #7]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 8003b5a:	f7ff fdaf 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.maxMotorSpeed)
 8003b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d001      	beq.n	8003b6a <WriteFirstStepObjects+0x17a>
		return 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e093      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, GEAR_CONFIGURATION_INDEX, MAX_GEAR_INPUT_SPEED_SUBINDEX, FirstStep.maxGearInputSpeed);
 8003b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6c:	79f8      	ldrb	r0, [r7, #7]
 8003b6e:	2203      	movs	r2, #3
 8003b70:	f243 0103 	movw	r1, #12291	; 0x3003
 8003b74:	f7ff fdd8 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, GEAR_CONFIGURATION_INDEX, MAX_GEAR_INPUT_SPEED_SUBINDEX, &value);
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	79f8      	ldrb	r0, [r7, #7]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	f243 0103 	movw	r1, #12291	; 0x3003
 8003b84:	f7ff fd9a 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.maxGearInputSpeed)
 8003b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <WriteFirstStepObjects+0x1a4>
		return 1;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e07e      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, SENSOR_CONFIGURATION_SUBINDEX, FirstStep.sensorsConfiguration);
 8003b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b96:	79f8      	ldrb	r0, [r7, #7]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003b9e:	f7ff fdc3 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, SENSOR_CONFIGURATION_SUBINDEX, &value);
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	79f8      	ldrb	r0, [r7, #7]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003bae:	f7ff fd85 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.sensorsConfiguration)
 8003bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <WriteFirstStepObjects+0x1ce>
		return 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e069      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, CONTROL_STRUCTURE_SUBINDEX, FirstStep.controlStructure);
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc0:	79f8      	ldrb	r0, [r7, #7]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003bc8:	f7ff fdae 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, CONTROL_STRUCTURE_SUBINDEX, &value);
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	79f8      	ldrb	r0, [r7, #7]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003bd8:	f7ff fd70 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.controlStructure)
 8003bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <WriteFirstStepObjects+0x1f8>
		return 1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e054      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, COMMUTATION_SENSORS_SUBINDEX, FirstStep.commutationSensors);
 8003be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bea:	79f8      	ldrb	r0, [r7, #7]
 8003bec:	2203      	movs	r2, #3
 8003bee:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003bf2:	f7ff fd99 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, COMMUTATION_SENSORS_SUBINDEX, &value);
 8003bf6:	f107 030c 	add.w	r3, r7, #12
 8003bfa:	79f8      	ldrb	r0, [r7, #7]
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003c02:	f7ff fd5b 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.commutationSensors)
 8003c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d001      	beq.n	8003c12 <WriteFirstStepObjects+0x222>
		return 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e03f      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, AXIS_CONFIG_MISCELLANEOUS_SUBINDEX, FirstStep.axisConfigMiscellaneous);
 8003c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c14:	79f8      	ldrb	r0, [r7, #7]
 8003c16:	2204      	movs	r2, #4
 8003c18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003c1c:	f7ff fd84 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, AXIS_CONFIG_MISCELLANEOUS_SUBINDEX, &value);
 8003c20:	f107 030c 	add.w	r3, r7, #12
 8003c24:	79f8      	ldrb	r0, [r7, #7]
 8003c26:	2204      	movs	r2, #4
 8003c28:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003c2c:	f7ff fd46 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.axisConfigMiscellaneous)
 8003c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <WriteFirstStepObjects+0x24c>
		return 1;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e02a      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_P_GAIN_SUBINDEX, FirstStep.currentControllerP_Gain);
 8003c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3e:	79f8      	ldrb	r0, [r7, #7]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8003c46:	f7ff fd6f 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_P_GAIN_SUBINDEX, &value);
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	79f8      	ldrb	r0, [r7, #7]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8003c56:	f7ff fd31 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.currentControllerP_Gain)
 8003c5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <WriteFirstStepObjects+0x276>
		return 1;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e015      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	WriteObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_I_GAIN_SUBINDEX, FirstStep.currentControllerI_Gain);
 8003c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c68:	79f8      	ldrb	r0, [r7, #7]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8003c70:	f7ff fd5a 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_I_GAIN_SUBINDEX, &value);
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	79f8      	ldrb	r0, [r7, #7]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8003c80:	f7ff fd1c 	bl	80036bc <ReadObjectValue>
	if(value != FirstStep.currentControllerI_Gain)
 8003c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <WriteFirstStepObjects+0x2a0>
		return 1;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <WriteFirstStepObjects+0x2a2>

	return 0;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003c9c:	b004      	add	sp, #16
 8003c9e:	4770      	bx	lr

08003ca0 <WriteOptionCodes>:

static uint8_t WriteOptionCodes(uint8_t deviceIndex)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	WriteObjectValue(deviceIndex, ABORT_CONNECTION_OPTION_CODE_INDEX, 0, 2);
 8003caa:	79f8      	ldrb	r0, [r7, #7]
 8003cac:	2302      	movs	r3, #2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f246 0107 	movw	r1, #24583	; 0x6007
 8003cb4:	f7ff fd38 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, ABORT_CONNECTION_OPTION_CODE_INDEX, 0, &value);
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	79f8      	ldrb	r0, [r7, #7]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f246 0107 	movw	r1, #24583	; 0x6007
 8003cc4:	f7ff fcfa 	bl	80036bc <ReadObjectValue>
	if(value != 2)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d001      	beq.n	8003cd2 <WriteOptionCodes+0x32>
		return 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e03c      	b.n	8003d4c <WriteOptionCodes+0xac>

	WriteObjectValue(deviceIndex, SHUTDOWN_OPTION_CODE_INDEX, 0, 0);
 8003cd2:	79f8      	ldrb	r0, [r7, #7]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f246 015b 	movw	r1, #24667	; 0x605b
 8003cdc:	f7ff fd24 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, SHUTDOWN_OPTION_CODE_INDEX, 0, &value);
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	79f8      	ldrb	r0, [r7, #7]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f246 015b 	movw	r1, #24667	; 0x605b
 8003cec:	f7ff fce6 	bl	80036bc <ReadObjectValue>
	if(value != 0)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <WriteOptionCodes+0x5a>
		return 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e028      	b.n	8003d4c <WriteOptionCodes+0xac>

	WriteObjectValue(deviceIndex, DISABLE_OPERATION_OPTION_CODE_INDEX, 0, 0);
 8003cfa:	79f8      	ldrb	r0, [r7, #7]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f246 015c 	movw	r1, #24668	; 0x605c
 8003d04:	f7ff fd10 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, DISABLE_OPERATION_OPTION_CODE_INDEX, 0, &value);
 8003d08:	f107 030c 	add.w	r3, r7, #12
 8003d0c:	79f8      	ldrb	r0, [r7, #7]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f246 015c 	movw	r1, #24668	; 0x605c
 8003d14:	f7ff fcd2 	bl	80036bc <ReadObjectValue>
	if(value != 0)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <WriteOptionCodes+0x82>
		return 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e014      	b.n	8003d4c <WriteOptionCodes+0xac>

	WriteObjectValue(deviceIndex, FAULT_REACTION_OPTION_CODE_INDEX, 0, 0);
 8003d22:	79f8      	ldrb	r0, [r7, #7]
 8003d24:	2300      	movs	r3, #0
 8003d26:	2200      	movs	r2, #0
 8003d28:	f246 015e 	movw	r1, #24670	; 0x605e
 8003d2c:	f7ff fcfc 	bl	8003728 <WriteObjectValue>
	ReadObjectValue(deviceIndex, FAULT_REACTION_OPTION_CODE_INDEX, 0, &value);
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	79f8      	ldrb	r0, [r7, #7]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f246 015e 	movw	r1, #24670	; 0x605e
 8003d3c:	f7ff fcbe 	bl	80036bc <ReadObjectValue>
	if(value != 0)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <WriteOptionCodes+0xaa>
		return 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <WriteOptionCodes+0xac>

	return 0;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <WriteModeOfOperation>:

static uint8_t WriteModeOfOperation(uint8_t deviceIndex, EPOS4_ModeOfOperation_e modeOfOperation)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	71fb      	strb	r3, [r7, #7]
 8003d60:	4613      	mov	r3, r2
 8003d62:	71bb      	strb	r3, [r7, #6]
	uint32_t value;
	switch (modeOfOperation)
 8003d64:	79bb      	ldrb	r3, [r7, #6]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d169      	bne.n	8003e3e <WriteModeOfOperation+0xea>
	{
	case EPOS4_CyclicSynchronousTorqueMode:
		WriteObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, 0);
 8003d6a:	79f8      	ldrb	r0, [r7, #7]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f246 0171 	movw	r1, #24689	; 0x6071
 8003d74:	f7ff fcd8 	bl	8003728 <WriteObjectValue>
		ReadObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, &value);
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	79f8      	ldrb	r0, [r7, #7]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f246 0171 	movw	r1, #24689	; 0x6071
 8003d84:	f7ff fc9a 	bl	80036bc <ReadObjectValue>
		if(value != 0)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <WriteModeOfOperation+0x3e>
			return 1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e056      	b.n	8003e40 <WriteModeOfOperation+0xec>

		WriteObjectValue(deviceIndex, MODES_OF_OPERATION_INDEX, 0, CST_MODE);
 8003d92:	79f8      	ldrb	r0, [r7, #7]
 8003d94:	230a      	movs	r3, #10
 8003d96:	2200      	movs	r2, #0
 8003d98:	f246 0160 	movw	r1, #24672	; 0x6060
 8003d9c:	f7ff fcc4 	bl	8003728 <WriteObjectValue>
		ReadObjectValue(deviceIndex, MODES_OF_OPERATION_INDEX, 0, &value);
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	79f8      	ldrb	r0, [r7, #7]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f246 0160 	movw	r1, #24672	; 0x6060
 8003dac:	f7ff fc86 	bl	80036bc <ReadObjectValue>
		if(value != CST_MODE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b0a      	cmp	r3, #10
 8003db4:	d001      	beq.n	8003dba <WriteModeOfOperation+0x66>
			return 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e042      	b.n	8003e40 <WriteModeOfOperation+0xec>

		WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_SHUTDOWN);
 8003dba:	79f8      	ldrb	r0, [r7, #7]
 8003dbc:	2306      	movs	r3, #6
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f246 0140 	movw	r1, #24640	; 0x6040
 8003dc4:	f7ff fcb0 	bl	8003728 <WriteObjectValue>
		do
		{
			ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	79f8      	ldrb	r0, [r7, #7]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f246 0141 	movw	r1, #24641	; 0x6041
 8003dd4:	f7ff fc72 	bl	80036bc <ReadObjectValue>
			value = value & STATE_MASK;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003dde:	60fb      	str	r3, [r7, #12]
		} while(value != STATE_READY_TO_SWITCH_ON);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b21      	cmp	r3, #33	; 0x21
 8003de4:	d1f0      	bne.n	8003dc8 <WriteModeOfOperation+0x74>

		WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_SWITCH_ON_AND_ENABLE);
 8003de6:	79f8      	ldrb	r0, [r7, #7]
 8003de8:	230f      	movs	r3, #15
 8003dea:	2200      	movs	r2, #0
 8003dec:	f246 0140 	movw	r1, #24640	; 0x6040
 8003df0:	f7ff fc9a 	bl	8003728 <WriteObjectValue>
		do
		{
			ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8003df4:	f107 030c 	add.w	r3, r7, #12
 8003df8:	79f8      	ldrb	r0, [r7, #7]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f246 0141 	movw	r1, #24641	; 0x6041
 8003e00:	f7ff fc5c 	bl	80036bc <ReadObjectValue>
			value = value & STATE_MASK;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003e0a:	60fb      	str	r3, [r7, #12]
		} while(value != STATE_OPERATION_ENABLED);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b27      	cmp	r3, #39	; 0x27
 8003e10:	d1f0      	bne.n	8003df4 <WriteModeOfOperation+0xa0>

		WriteObjectValue(deviceIndex, TORQUE_OFFSET_INDEX, 0, 0);
 8003e12:	79f8      	ldrb	r0, [r7, #7]
 8003e14:	2300      	movs	r3, #0
 8003e16:	2200      	movs	r2, #0
 8003e18:	f246 01b2 	movw	r1, #24754	; 0x60b2
 8003e1c:	f7ff fc84 	bl	8003728 <WriteObjectValue>
		ReadObjectValue(deviceIndex, TORQUE_OFFSET_INDEX, 0, &value);
 8003e20:	f107 030c 	add.w	r3, r7, #12
 8003e24:	79f8      	ldrb	r0, [r7, #7]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f246 01b2 	movw	r1, #24754	; 0x60b2
 8003e2c:	f7ff fc46 	bl	80036bc <ReadObjectValue>
		if(value != 0)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <WriteModeOfOperation+0xe6>
			return 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e002      	b.n	8003e40 <WriteModeOfOperation+0xec>

		return 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <WriteModeOfOperation+0xec>
	}

	return 1;
 8003e3e:	2301      	movs	r3, #1
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <LL_GPIO_SetOutputPin>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	619a      	str	r2, [r3, #24]
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_GPIO_ResetOutputPin>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d101      	bne.n	8003ebe <LL_SPI_IsActiveFlag_TXE+0x18>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	330c      	adds	r3, #12
 8003f14:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <MCP25625_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

MCP25625_Error_e MCP25625_Init(uint8_t deviceIndex, MCP25625_Init_t *Device_Inits)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > MCP25625_NUMBER_OF_DEVICES)
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d900      	bls.n	8003f3c <MCP25625_Init+0x14>
		while(1);
 8003f3a:	e7fe      	b.n	8003f3a <MCP25625_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Inits, sizeof(MCP25625_Init_t));
 8003f3c:	79fa      	ldrb	r2, [r7, #7]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4a4a      	ldr	r2, [pc, #296]	; (8004070 <MCP25625_Init+0x148>)
 8003f48:	4413      	add	r3, r2
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f002 fa0a 	bl	8006368 <memcpy>

	ClearChipSelect(deviceIndex);
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fd06 	bl	8004968 <ClearChipSelect>
	ResetDevice(deviceIndex);
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fb40 	bl	80045e4 <ResetDevice>

	uint8_t canCtrlReg;
	ReadRegisterData(deviceIndex, CANCTRL_REG, &canCtrlReg, sizeof(canCtrlReg));
 8003f64:	f107 0216 	add.w	r2, r7, #22
 8003f68:	79f8      	ldrb	r0, [r7, #7]
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	210f      	movs	r1, #15
 8003f6e:	f000 fa0f 	bl	8004390 <ReadRegisterData>
	if(canCtrlReg != CANCTRL_RESET_VALUE)
 8003f72:	7dbb      	ldrb	r3, [r7, #22]
 8003f74:	2b87      	cmp	r3, #135	; 0x87
 8003f76:	d001      	beq.n	8003f7c <MCP25625_Init+0x54>
		return MCP25625_ResetError;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e074      	b.n	8004066 <MCP25625_Init+0x13e>

	InitRXBx(deviceIndex);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fb1a 	bl	80045b8 <InitRXBx>

	uint8_t configRegs[3];
	uint8_t configRegValues[3] = {Device[deviceIndex].CNF3_Reg.value, Device[deviceIndex].CNF2_Reg.value, Device[deviceIndex].CNF1_Reg.value};
 8003f84:	79fa      	ldrb	r2, [r7, #7]
 8003f86:	493a      	ldr	r1, [pc, #232]	; (8004070 <MCP25625_Init+0x148>)
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	330d      	adds	r3, #13
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	733b      	strb	r3, [r7, #12]
 8003f98:	79fa      	ldrb	r2, [r7, #7]
 8003f9a:	4935      	ldr	r1, [pc, #212]	; (8004070 <MCP25625_Init+0x148>)
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	737b      	strb	r3, [r7, #13]
 8003fac:	79fa      	ldrb	r2, [r7, #7]
 8003fae:	4930      	ldr	r1, [pc, #192]	; (8004070 <MCP25625_Init+0x148>)
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	330b      	adds	r3, #11
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	73bb      	strb	r3, [r7, #14]
	WriteRegisterData(deviceIndex, CNF3_REG, configRegValues, sizeof(configRegValues));
 8003fc0:	f107 020c 	add.w	r2, r7, #12
 8003fc4:	79f8      	ldrb	r0, [r7, #7]
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	2128      	movs	r1, #40	; 0x28
 8003fca:	f000 fa71 	bl	80044b0 <WriteRegisterData>
	ReadRegisterData(deviceIndex, CNF3_REG, configRegs, sizeof(configRegs));
 8003fce:	f107 0210 	add.w	r2, r7, #16
 8003fd2:	79f8      	ldrb	r0, [r7, #7]
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	2128      	movs	r1, #40	; 0x28
 8003fd8:	f000 f9da 	bl	8004390 <ReadRegisterData>
	for(uint8_t i = 0; i < sizeof(configRegs); i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	75fb      	strb	r3, [r7, #23]
 8003fe0:	e010      	b.n	8004004 <MCP25625_Init+0xdc>
		if(configRegs[i] != configRegValues[i])
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	443b      	add	r3, r7
 8003fe8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	3318      	adds	r3, #24
 8003ff0:	443b      	add	r3, r7
 8003ff2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d001      	beq.n	8003ffe <MCP25625_Init+0xd6>
			return MCP25625_ConfigError;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e033      	b.n	8004066 <MCP25625_Init+0x13e>
	for(uint8_t i = 0; i < sizeof(configRegs); i++)
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	3301      	adds	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d9eb      	bls.n	8003fe2 <MCP25625_Init+0xba>

	WriteRegisterData(deviceIndex, CANCTRL_REG, &Device[deviceIndex].CANCTRL_Reg.value, sizeof(Device[deviceIndex].CANCTRL_Reg.value));
 800400a:	79fa      	ldrb	r2, [r7, #7]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	3308      	adds	r3, #8
 8004016:	4a16      	ldr	r2, [pc, #88]	; (8004070 <MCP25625_Init+0x148>)
 8004018:	4413      	add	r3, r2
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	79f8      	ldrb	r0, [r7, #7]
 800401e:	2301      	movs	r3, #1
 8004020:	210f      	movs	r1, #15
 8004022:	f000 fa45 	bl	80044b0 <WriteRegisterData>
	ReadRegisterData(deviceIndex, CANCTRL_REG, &canCtrlReg, sizeof(canCtrlReg));
 8004026:	f107 0216 	add.w	r2, r7, #22
 800402a:	79f8      	ldrb	r0, [r7, #7]
 800402c:	2301      	movs	r3, #1
 800402e:	210f      	movs	r1, #15
 8004030:	f000 f9ae 	bl	8004390 <ReadRegisterData>
	if(canCtrlReg != Device[deviceIndex].CANCTRL_Reg.value)
 8004034:	79fa      	ldrb	r2, [r7, #7]
 8004036:	490e      	ldr	r1, [pc, #56]	; (8004070 <MCP25625_Init+0x148>)
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	330a      	adds	r3, #10
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	7dbb      	ldrb	r3, [r7, #22]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <MCP25625_Init+0x128>
		return MCP25625_CANCTRL_Error;
 800404c:	2303      	movs	r3, #3
 800404e:	e00a      	b.n	8004066 <MCP25625_Init+0x13e>

	Device[deviceIndex].isInit = 1;
 8004050:	79fa      	ldrb	r2, [r7, #7]
 8004052:	4907      	ldr	r1, [pc, #28]	; (8004070 <MCP25625_Init+0x148>)
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3310      	adds	r3, #16
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]

	return MCP25625_NoError;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000274 	.word	0x20000274

08004074 <MCP25625_LoadTxBufferAtSIDH>:

uint8_t MCP25625_LoadTxBufferAtSIDH(uint8_t deviceIndex, uint16_t id, uint8_t *data, uint8_t dataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	603a      	str	r2, [r7, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
 8004082:	460b      	mov	r3, r1
 8004084:	80bb      	strh	r3, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 800408a:	79fa      	ldrb	r2, [r7, #7]
 800408c:	4970      	ldr	r1, [pc, #448]	; (8004250 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3310      	adds	r3, #16
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d100      	bne.n	80040a2 <MCP25625_LoadTxBufferAtSIDH+0x2e>
		while(1);
 80040a0:	e7fe      	b.n	80040a0 <MCP25625_LoadTxBufferAtSIDH+0x2c>

	uint8_t rtsTx = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	77fb      	strb	r3, [r7, #31]
	uint8_t txbxDataAddress = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	77bb      	strb	r3, [r7, #30]
	uint8_t status = ReadStatus(deviceIndex);
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fbc9 	bl	8004844 <ReadStatus>
 80040b2:	4603      	mov	r3, r0
 80040b4:	76fb      	strb	r3, [r7, #27]
	if(!(status & TX2REQ_STATUS_MASK))
 80040b6:	7efb      	ldrb	r3, [r7, #27]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <MCP25625_LoadTxBufferAtSIDH+0x56>
	{
		rtsTx = RTS_T2;
 80040c0:	2384      	movs	r3, #132	; 0x84
 80040c2:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_2_AT_SIDH;
 80040c4:	2344      	movs	r3, #68	; 0x44
 80040c6:	77bb      	strb	r3, [r7, #30]
 80040c8:	e012      	b.n	80040f0 <MCP25625_LoadTxBufferAtSIDH+0x7c>
	}
	else if(!(status & TX1REQ_STATUS_MASK))
 80040ca:	7efb      	ldrb	r3, [r7, #27]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <MCP25625_LoadTxBufferAtSIDH+0x6a>
	{
		rtsTx = RTS_T1;
 80040d4:	2382      	movs	r3, #130	; 0x82
 80040d6:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_1_AT_SIDH;
 80040d8:	2342      	movs	r3, #66	; 0x42
 80040da:	77bb      	strb	r3, [r7, #30]
 80040dc:	e008      	b.n	80040f0 <MCP25625_LoadTxBufferAtSIDH+0x7c>
	}
	else if(!(status & TX0REQ_STATUS_MASK))
 80040de:	7efb      	ldrb	r3, [r7, #27]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <MCP25625_LoadTxBufferAtSIDH+0x7c>
	{
		rtsTx = RTS_T0;
 80040e8:	2381      	movs	r3, #129	; 0x81
 80040ea:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_0_AT_SIDH;
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	77bb      	strb	r3, [r7, #30]
	}

	if(txbxDataAddress)
 80040f0:	7fbb      	ldrb	r3, [r7, #30]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80a6 	beq.w	8004244 <MCP25625_LoadTxBufferAtSIDH+0x1d0>
	{
		MCP25625_TXBx_t TXBx;
		memset(&TXBx, 0, sizeof(TXBx));
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	220d      	movs	r2, #13
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f002 f93f 	bl	8006384 <memset>
		TXBx.Struct.TXBxSIDH_Reg = id >> 3;
 8004106:	88bb      	ldrh	r3, [r7, #4]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	b29b      	uxth	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	733b      	strb	r3, [r7, #12]
		TXBx.Struct.TXBxSIDL_Reg.Bits.EXIDE = MCP25625_TransmitStandardID;
 8004110:	7b7b      	ldrb	r3, [r7, #13]
 8004112:	f36f 03c3 	bfc	r3, #3, #1
 8004116:	737b      	strb	r3, [r7, #13]
		TXBx.Struct.TXBxSIDL_Reg.Bits.SID = id & 0x07;
 8004118:	88bb      	ldrh	r3, [r7, #4]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	b2da      	uxtb	r2, r3
 8004120:	7b7b      	ldrb	r3, [r7, #13]
 8004122:	f362 1347 	bfi	r3, r2, #5, #3
 8004126:	737b      	strb	r3, [r7, #13]
		TXBx.Struct.TXBxDLC_Reg.Bits.DLC = dataLength;
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	b2da      	uxtb	r2, r3
 8004130:	7c3b      	ldrb	r3, [r7, #16]
 8004132:	f362 0303 	bfi	r3, r2, #0, #4
 8004136:	743b      	strb	r3, [r7, #16]
		for(uint8_t i = 0; i < dataLength; i++)
 8004138:	2300      	movs	r3, #0
 800413a:	777b      	strb	r3, [r7, #29]
 800413c:	e00b      	b.n	8004156 <MCP25625_LoadTxBufferAtSIDH+0xe2>
			TXBx.Struct.TXBxDn_Reg[i] = data[i];
 800413e:	7f7b      	ldrb	r3, [r7, #29]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	441a      	add	r2, r3
 8004144:	7f7b      	ldrb	r3, [r7, #29]
 8004146:	7812      	ldrb	r2, [r2, #0]
 8004148:	3320      	adds	r3, #32
 800414a:	443b      	add	r3, r7
 800414c:	f803 2c0f 	strb.w	r2, [r3, #-15]
		for(uint8_t i = 0; i < dataLength; i++)
 8004150:	7f7b      	ldrb	r3, [r7, #29]
 8004152:	3301      	adds	r3, #1
 8004154:	777b      	strb	r3, [r7, #29]
 8004156:	7f7a      	ldrb	r2, [r7, #29]
 8004158:	79bb      	ldrb	r3, [r7, #6]
 800415a:	429a      	cmp	r2, r3
 800415c:	d3ef      	bcc.n	800413e <MCP25625_LoadTxBufferAtSIDH+0xca>

		SetChipSelect(deviceIndex);
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fbe1 	bl	8004928 <SetChipSelect>

		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, txbxDataAddress);
 8004166:	79fa      	ldrb	r2, [r7, #7]
 8004168:	4939      	ldr	r1, [pc, #228]	; (8004250 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	7fba      	ldrb	r2, [r7, #30]
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fec2 	bl	8003f04 <LL_SPI_TransmitData8>

		uint8_t nBytes = dataLength + 5;
 8004180:	79bb      	ldrb	r3, [r7, #6]
 8004182:	3305      	adds	r3, #5
 8004184:	76bb      	strb	r3, [r7, #26]
		for(uint8_t i = 0; i < nBytes; i++)
 8004186:	2300      	movs	r3, #0
 8004188:	773b      	strb	r3, [r7, #28]
 800418a:	e022      	b.n	80041d2 <MCP25625_LoadTxBufferAtSIDH+0x15e>
		{
			while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));
 800418c:	bf00      	nop
 800418e:	79fa      	ldrb	r2, [r7, #7]
 8004190:	492f      	ldr	r1, [pc, #188]	; (8004250 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fe81 	bl	8003ea6 <LL_SPI_IsActiveFlag_TXE>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f1      	beq.n	800418e <MCP25625_LoadTxBufferAtSIDH+0x11a>
			LL_SPI_TransmitData8(Device[deviceIndex].SPIx, TXBx.array[i]);
 80041aa:	79fa      	ldrb	r2, [r7, #7]
 80041ac:	4928      	ldr	r1, [pc, #160]	; (8004250 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	7f3b      	ldrb	r3, [r7, #28]
 80041bc:	3320      	adds	r3, #32
 80041be:	443b      	add	r3, r7
 80041c0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7ff fe9c 	bl	8003f04 <LL_SPI_TransmitData8>
		for(uint8_t i = 0; i < nBytes; i++)
 80041cc:	7f3b      	ldrb	r3, [r7, #28]
 80041ce:	3301      	adds	r3, #1
 80041d0:	773b      	strb	r3, [r7, #28]
 80041d2:	7f3a      	ldrb	r2, [r7, #28]
 80041d4:	7ebb      	ldrb	r3, [r7, #26]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d3d8      	bcc.n	800418c <MCP25625_LoadTxBufferAtSIDH+0x118>
		}

		while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 80041da:	bf00      	nop
 80041dc:	79fa      	ldrb	r2, [r7, #7]
 80041de:	491c      	ldr	r1, [pc, #112]	; (8004250 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fe6d 	bl	8003ecc <LL_SPI_GetTxFIFOLevel>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f1      	bne.n	80041dc <MCP25625_LoadTxBufferAtSIDH+0x168>
		while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 80041f8:	e00a      	b.n	8004210 <MCP25625_LoadTxBufferAtSIDH+0x19c>
			LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 80041fa:	79fa      	ldrb	r2, [r7, #7]
 80041fc:	4914      	ldr	r1, [pc, #80]	; (8004250 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fe6c 	bl	8003ee8 <LL_SPI_ReceiveData8>
		while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004210:	79fa      	ldrb	r2, [r7, #7]
 8004212:	490f      	ldr	r1, [pc, #60]	; (8004250 <MCP25625_LoadTxBufferAtSIDH+0x1dc>)
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fe2d 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e6      	bne.n	80041fa <MCP25625_LoadTxBufferAtSIDH+0x186>

		ClearChipSelect(deviceIndex);
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fb9a 	bl	8004968 <ClearChipSelect>

		RequestToSend(deviceIndex, rtsTx);
 8004234:	7ffa      	ldrb	r2, [r7, #31]
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 faa6 	bl	800478c <RequestToSend>

		return 0;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <MCP25625_LoadTxBufferAtSIDH+0x1d2>
	}

	return 1;
 8004244:	2301      	movs	r3, #1
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000274 	.word	0x20000274

08004254 <MCP25625_ReadRxBufferAtSIDH>:

uint8_t MCP25625_ReadRxBufferAtSIDH(uint8_t deviceIndex, MCP25625_RXBx_t *RXBx, uint8_t dataLength)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	71fb      	strb	r3, [r7, #7]
 8004260:	4613      	mov	r3, r2
 8004262:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8004264:	79fa      	ldrb	r2, [r7, #7]
 8004266:	4949      	ldr	r1, [pc, #292]	; (800438c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	3310      	adds	r3, #16
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d100      	bne.n	800427c <MCP25625_ReadRxBufferAtSIDH+0x28>
		while(1);
 800427a:	e7fe      	b.n	800427a <MCP25625_ReadRxBufferAtSIDH+0x26>

	uint8_t rxbxSIDH_Address = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]
	uint8_t status = ReadStatus(deviceIndex);
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fade 	bl	8004844 <ReadStatus>
 8004288:	4603      	mov	r3, r0
 800428a:	737b      	strb	r3, [r7, #13]
	if(status & RX0IF_STATUS_MASK)
 800428c:	7b7b      	ldrb	r3, [r7, #13]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <MCP25625_ReadRxBufferAtSIDH+0x48>
		rxbxSIDH_Address = READ_RX_BUFFER_0_AT_SIDH;
 8004296:	2390      	movs	r3, #144	; 0x90
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e006      	b.n	80042aa <MCP25625_ReadRxBufferAtSIDH+0x56>
	else if(status & RX1IF_STATUS_MASK)
 800429c:	7b7b      	ldrb	r3, [r7, #13]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MCP25625_ReadRxBufferAtSIDH+0x56>
		rxbxSIDH_Address = READ_RX_BUFFER_1_AT_SIDH;
 80042a6:	2394      	movs	r3, #148	; 0x94
 80042a8:	73fb      	strb	r3, [r7, #15]

	if(rxbxSIDH_Address)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d068      	beq.n	8004382 <MCP25625_ReadRxBufferAtSIDH+0x12e>
	{
		SetChipSelect(deviceIndex);
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fb38 	bl	8004928 <SetChipSelect>

		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, rxbxSIDH_Address);
 80042b8:	79fa      	ldrb	r2, [r7, #7]
 80042ba:	4934      	ldr	r1, [pc, #208]	; (800438c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fe19 	bl	8003f04 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 80042d2:	bf00      	nop
 80042d4:	79fa      	ldrb	r2, [r7, #7]
 80042d6:	492d      	ldr	r1, [pc, #180]	; (800438c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fdcb 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f1      	beq.n	80042d4 <MCP25625_ReadRxBufferAtSIDH+0x80>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 80042f0:	79fa      	ldrb	r2, [r7, #7]
 80042f2:	4926      	ldr	r1, [pc, #152]	; (800438c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fdf1 	bl	8003ee8 <LL_SPI_ReceiveData8>

		uint8_t nBytes = dataLength + 5;						// data register + 5 registers in Rx buffer
 8004306:	79bb      	ldrb	r3, [r7, #6]
 8004308:	3305      	adds	r3, #5
 800430a:	733b      	strb	r3, [r7, #12]
		for(uint8_t i = 0; i < nBytes; i++)
 800430c:	2300      	movs	r3, #0
 800430e:	73bb      	strb	r3, [r7, #14]
 8004310:	e02d      	b.n	800436e <MCP25625_ReadRxBufferAtSIDH+0x11a>
		{
			LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 8004312:	79fa      	ldrb	r2, [r7, #7]
 8004314:	491d      	ldr	r1, [pc, #116]	; (800438c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fded 	bl	8003f04 <LL_SPI_TransmitData8>
			while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 800432a:	bf00      	nop
 800432c:	79fa      	ldrb	r2, [r7, #7]
 800432e:	4917      	ldr	r1, [pc, #92]	; (800438c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fd9f 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f1      	beq.n	800432c <MCP25625_ReadRxBufferAtSIDH+0xd8>
			RXBx->array[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004348:	79fa      	ldrb	r2, [r7, #7]
 800434a:	4910      	ldr	r1, [pc, #64]	; (800438c <MCP25625_ReadRxBufferAtSIDH+0x138>)
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	7bbc      	ldrb	r4, [r7, #14]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fdc4 	bl	8003ee8 <LL_SPI_ReceiveData8>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	551a      	strb	r2, [r3, r4]
		for(uint8_t i = 0; i < nBytes; i++)
 8004368:	7bbb      	ldrb	r3, [r7, #14]
 800436a:	3301      	adds	r3, #1
 800436c:	73bb      	strb	r3, [r7, #14]
 800436e:	7bba      	ldrb	r2, [r7, #14]
 8004370:	7b3b      	ldrb	r3, [r7, #12]
 8004372:	429a      	cmp	r2, r3
 8004374:	d3cd      	bcc.n	8004312 <MCP25625_ReadRxBufferAtSIDH+0xbe>
		}

		ClearChipSelect(deviceIndex);
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 faf5 	bl	8004968 <ClearChipSelect>

		return 0;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <MCP25625_ReadRxBufferAtSIDH+0x130>
	}

	return 1;
 8004382:	2301      	movs	r3, #1
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}
 800438c:	20000274 	.word	0x20000274

08004390 <ReadRegisterData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void ReadRegisterData(uint8_t deviceIndex, uint8_t startReg, uint8_t *data, uint8_t nDataBytes)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	603a      	str	r2, [r7, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
 800439e:	460b      	mov	r3, r1
 80043a0:	71bb      	strb	r3, [r7, #6]
 80043a2:	4613      	mov	r3, r2
 80043a4:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fabd 	bl	8004928 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, READ);
 80043ae:	79fa      	ldrb	r2, [r7, #7]
 80043b0:	493e      	ldr	r1, [pc, #248]	; (80044ac <ReadRegisterData+0x11c>)
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2103      	movs	r1, #3
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fd9f 	bl	8003f04 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, startReg);
 80043c6:	79fa      	ldrb	r2, [r7, #7]
 80043c8:	4938      	ldr	r1, [pc, #224]	; (80044ac <ReadRegisterData+0x11c>)
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	79ba      	ldrb	r2, [r7, #6]
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fd92 	bl	8003f04 <LL_SPI_TransmitData8>
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 80043e0:	bf00      	nop
 80043e2:	79fa      	ldrb	r2, [r7, #7]
 80043e4:	4931      	ldr	r1, [pc, #196]	; (80044ac <ReadRegisterData+0x11c>)
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fd6a 	bl	8003ecc <LL_SPI_GetTxFIFOLevel>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f1      	bne.n	80043e2 <ReadRegisterData+0x52>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 80043fe:	e00a      	b.n	8004416 <ReadRegisterData+0x86>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004400:	79fa      	ldrb	r2, [r7, #7]
 8004402:	492a      	ldr	r1, [pc, #168]	; (80044ac <ReadRegisterData+0x11c>)
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fd69 	bl	8003ee8 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004416:	79fa      	ldrb	r2, [r7, #7]
 8004418:	4924      	ldr	r1, [pc, #144]	; (80044ac <ReadRegisterData+0x11c>)
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fd2a 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <ReadRegisterData+0x70>

	for(uint8_t i = 0; i < nDataBytes; i++)
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	e02d      	b.n	8004494 <ReadRegisterData+0x104>
	{
		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 8004438:	79fa      	ldrb	r2, [r7, #7]
 800443a:	491c      	ldr	r1, [pc, #112]	; (80044ac <ReadRegisterData+0x11c>)
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fd5a 	bl	8003f04 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 8004450:	bf00      	nop
 8004452:	79fa      	ldrb	r2, [r7, #7]
 8004454:	4915      	ldr	r1, [pc, #84]	; (80044ac <ReadRegisterData+0x11c>)
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fd0c 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f1      	beq.n	8004452 <ReadRegisterData+0xc2>
		data[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 800446e:	79fa      	ldrb	r2, [r7, #7]
 8004470:	490e      	ldr	r1, [pc, #56]	; (80044ac <ReadRegisterData+0x11c>)
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	18d4      	adds	r4, r2, r3
 8004484:	4608      	mov	r0, r1
 8004486:	f7ff fd2f 	bl	8003ee8 <LL_SPI_ReceiveData8>
 800448a:	4603      	mov	r3, r0
 800448c:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < nDataBytes; i++)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	3301      	adds	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	797b      	ldrb	r3, [r7, #5]
 8004498:	429a      	cmp	r2, r3
 800449a:	d3cd      	bcc.n	8004438 <ReadRegisterData+0xa8>
	}

	ClearChipSelect(deviceIndex);
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fa62 	bl	8004968 <ClearChipSelect>
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	20000274 	.word	0x20000274

080044b0 <WriteRegisterData>:

static void WriteRegisterData(uint8_t deviceIndex, uint8_t startReg, uint8_t *data, uint8_t nDataBytes)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	603a      	str	r2, [r7, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
 80044be:	460b      	mov	r3, r1
 80044c0:	71bb      	strb	r3, [r7, #6]
 80044c2:	4613      	mov	r3, r2
 80044c4:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fa2d 	bl	8004928 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, WRITE);
 80044ce:	79fa      	ldrb	r2, [r7, #7]
 80044d0:	4938      	ldr	r1, [pc, #224]	; (80045b4 <WriteRegisterData+0x104>)
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2102      	movs	r1, #2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fd0f 	bl	8003f04 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, startReg);
 80044e6:	79fa      	ldrb	r2, [r7, #7]
 80044e8:	4932      	ldr	r1, [pc, #200]	; (80045b4 <WriteRegisterData+0x104>)
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	79ba      	ldrb	r2, [r7, #6]
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fd02 	bl	8003f04 <LL_SPI_TransmitData8>

	for(uint8_t i = 0; i < nDataBytes; i++)
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e020      	b.n	8004548 <WriteRegisterData+0x98>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));
 8004506:	bf00      	nop
 8004508:	79fa      	ldrb	r2, [r7, #7]
 800450a:	492a      	ldr	r1, [pc, #168]	; (80045b4 <WriteRegisterData+0x104>)
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fcc4 	bl	8003ea6 <LL_SPI_IsActiveFlag_TXE>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f1      	beq.n	8004508 <WriteRegisterData+0x58>
		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, data[i]);
 8004524:	79fa      	ldrb	r2, [r7, #7]
 8004526:	4923      	ldr	r1, [pc, #140]	; (80045b4 <WriteRegisterData+0x104>)
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	4413      	add	r3, r2
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	4619      	mov	r1, r3
 800453e:	f7ff fce1 	bl	8003f04 <LL_SPI_TransmitData8>
	for(uint8_t i = 0; i < nDataBytes; i++)
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	3301      	adds	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	797b      	ldrb	r3, [r7, #5]
 800454c:	429a      	cmp	r2, r3
 800454e:	d3da      	bcc.n	8004506 <WriteRegisterData+0x56>
	}

	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8004550:	bf00      	nop
 8004552:	79fa      	ldrb	r2, [r7, #7]
 8004554:	4917      	ldr	r1, [pc, #92]	; (80045b4 <WriteRegisterData+0x104>)
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fcb2 	bl	8003ecc <LL_SPI_GetTxFIFOLevel>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f1      	bne.n	8004552 <WriteRegisterData+0xa2>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 800456e:	e00a      	b.n	8004586 <WriteRegisterData+0xd6>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004570:	79fa      	ldrb	r2, [r7, #7]
 8004572:	4910      	ldr	r1, [pc, #64]	; (80045b4 <WriteRegisterData+0x104>)
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fcb1 	bl	8003ee8 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004586:	79fa      	ldrb	r2, [r7, #7]
 8004588:	490a      	ldr	r1, [pc, #40]	; (80045b4 <WriteRegisterData+0x104>)
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fc72 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e6      	bne.n	8004570 <WriteRegisterData+0xc0>

	ClearChipSelect(deviceIndex);
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f9df 	bl	8004968 <ClearChipSelect>
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000274 	.word	0x20000274

080045b8 <InitRXBx>:

static void InitRXBx(uint8_t deviceIndex)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]
	// Set RXBx to receive any message
	ModifyRegisterBits(deviceIndex, RXB0CTRL_REG, 0b01100000, 0b01100000);
 80045c2:	79f8      	ldrb	r0, [r7, #7]
 80045c4:	2360      	movs	r3, #96	; 0x60
 80045c6:	2260      	movs	r2, #96	; 0x60
 80045c8:	2160      	movs	r1, #96	; 0x60
 80045ca:	f000 f857 	bl	800467c <ModifyRegisterBits>
	ModifyRegisterBits(deviceIndex, RXB1CTRL_REG, 0b01100000, 0b01100000);
 80045ce:	79f8      	ldrb	r0, [r7, #7]
 80045d0:	2360      	movs	r3, #96	; 0x60
 80045d2:	2260      	movs	r2, #96	; 0x60
 80045d4:	2170      	movs	r1, #112	; 0x70
 80045d6:	f000 f851 	bl	800467c <ModifyRegisterBits>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <ResetDevice>:

static void ResetDevice(uint8_t deviceIndex)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 f999 	bl	8004928 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, RESET);
 80045f6:	79fa      	ldrb	r2, [r7, #7]
 80045f8:	491f      	ldr	r1, [pc, #124]	; (8004678 <ResetDevice+0x94>)
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	21c0      	movs	r1, #192	; 0xc0
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fc7b 	bl	8003f04 <LL_SPI_TransmitData8>
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 800460e:	bf00      	nop
 8004610:	79fa      	ldrb	r2, [r7, #7]
 8004612:	4919      	ldr	r1, [pc, #100]	; (8004678 <ResetDevice+0x94>)
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fc53 	bl	8003ecc <LL_SPI_GetTxFIFOLevel>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f1      	bne.n	8004610 <ResetDevice+0x2c>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 800462c:	e00a      	b.n	8004644 <ResetDevice+0x60>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 800462e:	79fa      	ldrb	r2, [r7, #7]
 8004630:	4911      	ldr	r1, [pc, #68]	; (8004678 <ResetDevice+0x94>)
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fc52 	bl	8003ee8 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004644:	79fa      	ldrb	r2, [r7, #7]
 8004646:	490c      	ldr	r1, [pc, #48]	; (8004678 <ResetDevice+0x94>)
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fc13 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e6      	bne.n	800462e <ResetDevice+0x4a>

	ClearChipSelect(deviceIndex);
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f980 	bl	8004968 <ClearChipSelect>
	LL_mDelay(1);					// Minimum 2 us required (t_RL)
 8004668:	2001      	movs	r0, #1
 800466a:	f001 fe21 	bl	80062b0 <LL_mDelay>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000274 	.word	0x20000274

0800467c <ModifyRegisterBits>:

static void ModifyRegisterBits(uint8_t deviceIndex, uint8_t reg, uint8_t mask, uint8_t data)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	4623      	mov	r3, r4
 800468c:	71fb      	strb	r3, [r7, #7]
 800468e:	4603      	mov	r3, r0
 8004690:	71bb      	strb	r3, [r7, #6]
 8004692:	460b      	mov	r3, r1
 8004694:	717b      	strb	r3, [r7, #5]
 8004696:	4613      	mov	r3, r2
 8004698:	713b      	strb	r3, [r7, #4]
	SetChipSelect(deviceIndex);
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f943 	bl	8004928 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, BIT_MODIFY);
 80046a2:	79fa      	ldrb	r2, [r7, #7]
 80046a4:	4938      	ldr	r1, [pc, #224]	; (8004788 <ModifyRegisterBits+0x10c>)
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2105      	movs	r1, #5
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fc25 	bl	8003f04 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, reg);
 80046ba:	79fa      	ldrb	r2, [r7, #7]
 80046bc:	4932      	ldr	r1, [pc, #200]	; (8004788 <ModifyRegisterBits+0x10c>)
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	79ba      	ldrb	r2, [r7, #6]
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fc18 	bl	8003f04 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, mask);
 80046d4:	79fa      	ldrb	r2, [r7, #7]
 80046d6:	492c      	ldr	r1, [pc, #176]	; (8004788 <ModifyRegisterBits+0x10c>)
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	797a      	ldrb	r2, [r7, #5]
 80046e6:	4611      	mov	r1, r2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fc0b 	bl	8003f04 <LL_SPI_TransmitData8>

	while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));	// Tx FIFO can only hold 3 bytes for 8 bit transmission
 80046ee:	bf00      	nop
 80046f0:	79fa      	ldrb	r2, [r7, #7]
 80046f2:	4925      	ldr	r1, [pc, #148]	; (8004788 <ModifyRegisterBits+0x10c>)
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fbd0 	bl	8003ea6 <LL_SPI_IsActiveFlag_TXE>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f1      	beq.n	80046f0 <ModifyRegisterBits+0x74>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, data);
 800470c:	79fa      	ldrb	r2, [r7, #7]
 800470e:	491e      	ldr	r1, [pc, #120]	; (8004788 <ModifyRegisterBits+0x10c>)
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	793a      	ldrb	r2, [r7, #4]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fbef 	bl	8003f04 <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8004726:	bf00      	nop
 8004728:	79fa      	ldrb	r2, [r7, #7]
 800472a:	4917      	ldr	r1, [pc, #92]	; (8004788 <ModifyRegisterBits+0x10c>)
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fbc7 	bl	8003ecc <LL_SPI_GetTxFIFOLevel>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f1      	bne.n	8004728 <ModifyRegisterBits+0xac>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004744:	e00a      	b.n	800475c <ModifyRegisterBits+0xe0>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004746:	79fa      	ldrb	r2, [r7, #7]
 8004748:	490f      	ldr	r1, [pc, #60]	; (8004788 <ModifyRegisterBits+0x10c>)
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fbc6 	bl	8003ee8 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 800475c:	79fa      	ldrb	r2, [r7, #7]
 800475e:	490a      	ldr	r1, [pc, #40]	; (8004788 <ModifyRegisterBits+0x10c>)
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fb87 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e6      	bne.n	8004746 <ModifyRegisterBits+0xca>

	ClearChipSelect(deviceIndex);
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f8f4 	bl	8004968 <ClearChipSelect>
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bd90      	pop	{r4, r7, pc}
 8004788:	20000274 	.word	0x20000274

0800478c <RequestToSend>:

static void RequestToSend(uint8_t deviceIndex, uint8_t RTS_Tx)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	460a      	mov	r2, r1
 8004796:	71fb      	strb	r3, [r7, #7]
 8004798:	4613      	mov	r3, r2
 800479a:	71bb      	strb	r3, [r7, #6]
	SetChipSelect(deviceIndex);
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f8c2 	bl	8004928 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, RTS_Tx);
 80047a4:	79fa      	ldrb	r2, [r7, #7]
 80047a6:	4926      	ldr	r1, [pc, #152]	; (8004840 <RequestToSend+0xb4>)
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	79ba      	ldrb	r2, [r7, #6]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fba3 	bl	8003f04 <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 80047be:	bf00      	nop
 80047c0:	79fa      	ldrb	r2, [r7, #7]
 80047c2:	491f      	ldr	r1, [pc, #124]	; (8004840 <RequestToSend+0xb4>)
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fb7b 	bl	8003ecc <LL_SPI_GetTxFIFOLevel>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f1      	bne.n	80047c0 <RequestToSend+0x34>
	while(!LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx));
 80047dc:	bf00      	nop
 80047de:	79fa      	ldrb	r2, [r7, #7]
 80047e0:	4917      	ldr	r1, [pc, #92]	; (8004840 <RequestToSend+0xb4>)
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fb46 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f1      	beq.n	80047de <RequestToSend+0x52>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 80047fa:	e00a      	b.n	8004812 <RequestToSend+0x86>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 80047fc:	79fa      	ldrb	r2, [r7, #7]
 80047fe:	4910      	ldr	r1, [pc, #64]	; (8004840 <RequestToSend+0xb4>)
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fb6b 	bl	8003ee8 <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8004812:	79fa      	ldrb	r2, [r7, #7]
 8004814:	490a      	ldr	r1, [pc, #40]	; (8004840 <RequestToSend+0xb4>)
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fb2c 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e6      	bne.n	80047fc <RequestToSend+0x70>

	ClearChipSelect(deviceIndex);
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f899 	bl	8004968 <ClearChipSelect>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000274 	.word	0x20000274

08004844 <ReadStatus>:

static uint8_t ReadStatus(uint8_t deviceIndex)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f869 	bl	8004928 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, READ_STATUS);
 8004856:	79fa      	ldrb	r2, [r7, #7]
 8004858:	4932      	ldr	r1, [pc, #200]	; (8004924 <ReadStatus+0xe0>)
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	21a0      	movs	r1, #160	; 0xa0
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fb4b 	bl	8003f04 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 800486e:	79fa      	ldrb	r2, [r7, #7]
 8004870:	492c      	ldr	r1, [pc, #176]	; (8004924 <ReadStatus+0xe0>)
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fb3f 	bl	8003f04 <LL_SPI_TransmitData8>
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8004886:	bf00      	nop
 8004888:	79fa      	ldrb	r2, [r7, #7]
 800488a:	4926      	ldr	r1, [pc, #152]	; (8004924 <ReadStatus+0xe0>)
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fb17 	bl	8003ecc <LL_SPI_GetTxFIFOLevel>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f1      	bne.n	8004888 <ReadStatus+0x44>

	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 80048a4:	bf00      	nop
 80048a6:	79fa      	ldrb	r2, [r7, #7]
 80048a8:	491e      	ldr	r1, [pc, #120]	; (8004924 <ReadStatus+0xe0>)
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fae2 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f1      	beq.n	80048a6 <ReadStatus+0x62>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 80048c2:	79fa      	ldrb	r2, [r7, #7]
 80048c4:	4917      	ldr	r1, [pc, #92]	; (8004924 <ReadStatus+0xe0>)
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fb08 	bl	8003ee8 <LL_SPI_ReceiveData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 80048d8:	bf00      	nop
 80048da:	79fa      	ldrb	r2, [r7, #7]
 80048dc:	4911      	ldr	r1, [pc, #68]	; (8004924 <ReadStatus+0xe0>)
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fac8 	bl	8003e80 <LL_SPI_IsActiveFlag_RXNE>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f1      	beq.n	80048da <ReadStatus+0x96>
	uint8_t status = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 80048f6:	79fa      	ldrb	r2, [r7, #7]
 80048f8:	490a      	ldr	r1, [pc, #40]	; (8004924 <ReadStatus+0xe0>)
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff faee 	bl	8003ee8 <LL_SPI_ReceiveData8>
 800490c:	4603      	mov	r3, r0
 800490e:	73fb      	strb	r3, [r7, #15]

	ClearChipSelect(deviceIndex);
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f828 	bl	8004968 <ClearChipSelect>

	return status;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000274 	.word	0x20000274

08004928 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CS_Port, Device[deviceIndex].csPin);
 8004932:	79fa      	ldrb	r2, [r7, #7]
 8004934:	490b      	ldr	r1, [pc, #44]	; (8004964 <SetChipSelect+0x3c>)
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	3304      	adds	r3, #4
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	79fa      	ldrb	r2, [r7, #7]
 8004946:	4907      	ldr	r1, [pc, #28]	; (8004964 <SetChipSelect+0x3c>)
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	3308      	adds	r3, #8
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	4619      	mov	r1, r3
 8004958:	f7ff fa84 	bl	8003e64 <LL_GPIO_ResetOutputPin>
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000274 	.word	0x20000274

08004968 <ClearChipSelect>:

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CS_Port, Device[deviceIndex].csPin);
 8004972:	79fa      	ldrb	r2, [r7, #7]
 8004974:	490b      	ldr	r1, [pc, #44]	; (80049a4 <ClearChipSelect+0x3c>)
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3304      	adds	r3, #4
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	79fa      	ldrb	r2, [r7, #7]
 8004986:	4907      	ldr	r1, [pc, #28]	; (80049a4 <ClearChipSelect+0x3c>)
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	3308      	adds	r3, #8
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	4619      	mov	r1, r3
 8004998:	f7ff fa56 	bl	8003e48 <LL_GPIO_SetOutputPin>
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000274 	.word	0x20000274

080049a8 <LL_SPI_IsActiveFlag_RXNE>:
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_SPI_IsActiveFlag_TXE>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d101      	bne.n	80049e6 <LL_SPI_IsActiveFlag_TXE+0x18>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_SPI_ReceiveData8>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	330c      	adds	r3, #12
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b2db      	uxtb	r3, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_SPI_TransmitData8>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	701a      	strb	r2, [r3, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_GPIO_SetOutputPin>:
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	619a      	str	r2, [r3, #24]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <LL_GPIO_ResetOutputPin>:
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

uint8_t MPU925x_Init(uint8_t deviceIndex, MPU925x_Init_t *Device_Init)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	6039      	str	r1, [r7, #0]
 8004a76:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > MPU925X_NUMBER_OF_DEVICES)
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d000      	beq.n	8004a80 <MPU925x_Init+0x14>
		while(1);
 8004a7e:	e7fe      	b.n	8004a7e <MPU925x_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(MPU925x_Init_t));
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <MPU925x_Init+0x64>)
 8004a86:	4413      	add	r3, r2
 8004a88:	220c      	movs	r2, #12
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fc6b 	bl	8006368 <memcpy>

	ClearChipSelect(deviceIndex);
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fb07 	bl	80050a8 <ClearChipSelect>

	uint8_t whoAmI;
	ReadRegData(deviceIndex, MPU925X_REG_WHO_AM_I, &whoAmI, sizeof(whoAmI));
 8004a9a:	f107 020f 	add.w	r2, r7, #15
 8004a9e:	79f8      	ldrb	r0, [r7, #7]
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	2175      	movs	r1, #117	; 0x75
 8004aa4:	f000 fa0c 	bl	8004ec0 <ReadRegData>
	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b71      	cmp	r3, #113	; 0x71
 8004aac:	d004      	beq.n	8004ab8 <MPU925x_Init+0x4c>
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	2b73      	cmp	r3, #115	; 0x73
 8004ab2:	d001      	beq.n	8004ab8 <MPU925x_Init+0x4c>
		return MPU925x_WhoAmI_Error;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e007      	b.n	8004ac8 <MPU925x_Init+0x5c>

	Device[deviceIndex].isInit = 1;
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <MPU925x_Init+0x64>)
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	4413      	add	r3, r2
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

	return MPU925x_NoError;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	2000029c 	.word	0x2000029c

08004ad4 <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(uint8_t deviceIndex, MPU925x_AccelSensitivity_e sensitivity)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	460a      	mov	r2, r1
 8004ade:	71fb      	strb	r3, [r7, #7]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	4a42      	ldr	r2, [pc, #264]	; (8004bf0 <MPU925x_SetAccelSensitivity+0x11c>)
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	4413      	add	r3, r2
 8004aec:	330c      	adds	r3, #12
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d100      	bne.n	8004af6 <MPU925x_SetAccelSensitivity+0x22>
		while(1);
 8004af4:	e7fe      	b.n	8004af4 <MPU925x_SetAccelSensitivity+0x20>

	uint8_t data;
	switch(sensitivity)
 8004af6:	79bb      	ldrb	r3, [r7, #6]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d875      	bhi.n	8004be8 <MPU925x_SetAccelSensitivity+0x114>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <MPU925x_SetAccelSensitivity+0x30>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b45 	.word	0x08004b45
 8004b0c:	08004b7f 	.word	0x08004b7f
 8004b10:	08004bb9 	.word	0x08004bb9
	{
	case MPU925x_AccelSensitivity_2g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004b14:	f107 020f 	add.w	r2, r7, #15
 8004b18:	79f8      	ldrb	r0, [r7, #7]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	211c      	movs	r1, #28
 8004b1e:	f000 f9cf 	bl	8004ec0 <ReadRegData>
		data = data & ~0x18;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	f023 0318 	bic.w	r3, r3, #24
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004b2c:	f107 020f 	add.w	r2, r7, #15
 8004b30:	79f8      	ldrb	r0, [r7, #7]
 8004b32:	2301      	movs	r3, #1
 8004b34:	211c      	movs	r1, #28
 8004b36:	f000 fa41 	bl	8004fbc <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 8004b3a:	4b2e      	ldr	r3, [pc, #184]	; (8004bf4 <MPU925x_SetAccelSensitivity+0x120>)
 8004b3c:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8004b40:	601a      	str	r2, [r3, #0]
		break;
 8004b42:	e051      	b.n	8004be8 <MPU925x_SetAccelSensitivity+0x114>

	case MPU925x_AccelSensitivity_4g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004b44:	f107 020f 	add.w	r2, r7, #15
 8004b48:	79f8      	ldrb	r0, [r7, #7]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	211c      	movs	r1, #28
 8004b4e:	f000 f9b7 	bl	8004ec0 <ReadRegData>
		data = (data & ~0x18) | 0x08;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	f023 0318 	bic.w	r3, r3, #24
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	f043 0308 	orr.w	r3, r3, #8
 8004b60:	b25b      	sxtb	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004b66:	f107 020f 	add.w	r2, r7, #15
 8004b6a:	79f8      	ldrb	r0, [r7, #7]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	211c      	movs	r1, #28
 8004b70:	f000 fa24 	bl	8004fbc <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 8004b74:	4b1f      	ldr	r3, [pc, #124]	; (8004bf4 <MPU925x_SetAccelSensitivity+0x120>)
 8004b76:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8004b7a:	601a      	str	r2, [r3, #0]
		break;
 8004b7c:	e034      	b.n	8004be8 <MPU925x_SetAccelSensitivity+0x114>

	case MPU925x_AccelSensitivity_8g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004b7e:	f107 020f 	add.w	r2, r7, #15
 8004b82:	79f8      	ldrb	r0, [r7, #7]
 8004b84:	2301      	movs	r3, #1
 8004b86:	211c      	movs	r1, #28
 8004b88:	f000 f99a 	bl	8004ec0 <ReadRegData>
		data = (data & ~0x18) | 0x10;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	b25b      	sxtb	r3, r3
 8004b90:	f023 0318 	bic.w	r3, r3, #24
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	f043 0310 	orr.w	r3, r3, #16
 8004b9a:	b25b      	sxtb	r3, r3
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004ba0:	f107 020f 	add.w	r2, r7, #15
 8004ba4:	79f8      	ldrb	r0, [r7, #7]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	211c      	movs	r1, #28
 8004baa:	f000 fa07 	bl	8004fbc <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <MPU925x_SetAccelSensitivity+0x120>)
 8004bb0:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8004bb4:	601a      	str	r2, [r3, #0]
		break;
 8004bb6:	e017      	b.n	8004be8 <MPU925x_SetAccelSensitivity+0x114>

	case MPU925x_AccelSensitivity_16g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004bb8:	f107 020f 	add.w	r2, r7, #15
 8004bbc:	79f8      	ldrb	r0, [r7, #7]
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	211c      	movs	r1, #28
 8004bc2:	f000 f97d 	bl	8004ec0 <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	f043 0318 	orr.w	r3, r3, #24
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004bd0:	f107 020f 	add.w	r2, r7, #15
 8004bd4:	79f8      	ldrb	r0, [r7, #7]
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	211c      	movs	r1, #28
 8004bda:	f000 f9ef 	bl	8004fbc <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <MPU925x_SetAccelSensitivity+0x120>)
 8004be0:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8004be4:	601a      	str	r2, [r3, #0]
		break;
 8004be6:	bf00      	nop
	}
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	2000029c 	.word	0x2000029c
 8004bf4:	20000010 	.word	0x20000010

08004bf8 <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(uint8_t deviceIndex, MPU925x_GyroSensitivity_e sensitivity)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	460a      	mov	r2, r1
 8004c02:	71fb      	strb	r3, [r7, #7]
 8004c04:	4613      	mov	r3, r2
 8004c06:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	4a40      	ldr	r2, [pc, #256]	; (8004d0c <MPU925x_SetGyroSensitivity+0x114>)
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	4413      	add	r3, r2
 8004c10:	330c      	adds	r3, #12
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d100      	bne.n	8004c1a <MPU925x_SetGyroSensitivity+0x22>
		while(1);
 8004c18:	e7fe      	b.n	8004c18 <MPU925x_SetGyroSensitivity+0x20>

	uint8_t data;
	switch(sensitivity)
 8004c1a:	79bb      	ldrb	r3, [r7, #6]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d871      	bhi.n	8004d04 <MPU925x_SetGyroSensitivity+0x10c>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <MPU925x_SetGyroSensitivity+0x30>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c39 	.word	0x08004c39
 8004c2c:	08004c67 	.word	0x08004c67
 8004c30:	08004c9f 	.word	0x08004c9f
 8004c34:	08004cd7 	.word	0x08004cd7
	{
	case MPU925x_GyroSensitivity_250dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004c38:	f107 020f 	add.w	r2, r7, #15
 8004c3c:	79f8      	ldrb	r0, [r7, #7]
 8004c3e:	2301      	movs	r3, #1
 8004c40:	211b      	movs	r1, #27
 8004c42:	f000 f93d 	bl	8004ec0 <ReadRegData>
		data = data & ~0x18;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	f023 0318 	bic.w	r3, r3, #24
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004c50:	f107 020f 	add.w	r2, r7, #15
 8004c54:	79f8      	ldrb	r0, [r7, #7]
 8004c56:	2301      	movs	r3, #1
 8004c58:	211b      	movs	r1, #27
 8004c5a:	f000 f9af 	bl	8004fbc <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <MPU925x_SetGyroSensitivity+0x118>)
 8004c60:	4a2c      	ldr	r2, [pc, #176]	; (8004d14 <MPU925x_SetGyroSensitivity+0x11c>)
 8004c62:	601a      	str	r2, [r3, #0]
		break;
 8004c64:	e04e      	b.n	8004d04 <MPU925x_SetGyroSensitivity+0x10c>

	case MPU925x_GyroSensitivity_500dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004c66:	f107 020f 	add.w	r2, r7, #15
 8004c6a:	79f8      	ldrb	r0, [r7, #7]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	211b      	movs	r1, #27
 8004c70:	f000 f926 	bl	8004ec0 <ReadRegData>
		data = (data & ~0x18) | 0x08;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	f023 0318 	bic.w	r3, r3, #24
 8004c7c:	b25b      	sxtb	r3, r3
 8004c7e:	f043 0308 	orr.w	r3, r3, #8
 8004c82:	b25b      	sxtb	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004c88:	f107 020f 	add.w	r2, r7, #15
 8004c8c:	79f8      	ldrb	r0, [r7, #7]
 8004c8e:	2301      	movs	r3, #1
 8004c90:	211b      	movs	r1, #27
 8004c92:	f000 f993 	bl	8004fbc <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 8004c96:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <MPU925x_SetGyroSensitivity+0x118>)
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <MPU925x_SetGyroSensitivity+0x120>)
 8004c9a:	601a      	str	r2, [r3, #0]
		break;
 8004c9c:	e032      	b.n	8004d04 <MPU925x_SetGyroSensitivity+0x10c>

	case MPU925x_GyroSensitivity_1000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004c9e:	f107 020f 	add.w	r2, r7, #15
 8004ca2:	79f8      	ldrb	r0, [r7, #7]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	211b      	movs	r1, #27
 8004ca8:	f000 f90a 	bl	8004ec0 <ReadRegData>
		data = (data & ~0x18) | 0x10;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	b25b      	sxtb	r3, r3
 8004cb0:	f023 0318 	bic.w	r3, r3, #24
 8004cb4:	b25b      	sxtb	r3, r3
 8004cb6:	f043 0310 	orr.w	r3, r3, #16
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004cc0:	f107 020f 	add.w	r2, r7, #15
 8004cc4:	79f8      	ldrb	r0, [r7, #7]
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	211b      	movs	r1, #27
 8004cca:	f000 f977 	bl	8004fbc <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <MPU925x_SetGyroSensitivity+0x118>)
 8004cd0:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <MPU925x_SetGyroSensitivity+0x124>)
 8004cd2:	601a      	str	r2, [r3, #0]
		break;
 8004cd4:	e016      	b.n	8004d04 <MPU925x_SetGyroSensitivity+0x10c>

	case MPU925x_GyroSensitivity_2000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004cd6:	f107 020f 	add.w	r2, r7, #15
 8004cda:	79f8      	ldrb	r0, [r7, #7]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	211b      	movs	r1, #27
 8004ce0:	f000 f8ee 	bl	8004ec0 <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	f043 0318 	orr.w	r3, r3, #24
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004cee:	f107 020f 	add.w	r2, r7, #15
 8004cf2:	79f8      	ldrb	r0, [r7, #7]
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	211b      	movs	r1, #27
 8004cf8:	f000 f960 	bl	8004fbc <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <MPU925x_SetGyroSensitivity+0x118>)
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <MPU925x_SetGyroSensitivity+0x128>)
 8004d00:	601a      	str	r2, [r3, #0]
		break;
 8004d02:	bf00      	nop
	}
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	2000029c 	.word	0x2000029c
 8004d10:	20000014 	.word	0x20000014
 8004d14:	43030000 	.word	0x43030000
 8004d18:	42830000 	.word	0x42830000
 8004d1c:	42033333 	.word	0x42033333
 8004d20:	41833333 	.word	0x41833333

08004d24 <MPU925x_ReadIMU>:

	WriteRegData(deviceIndex, MPU925X_REG_SMPLRT_DIV, &divider, 1);
}

MPU925x_IMU_Data_t MPU925x_ReadIMU(uint8_t deviceIndex)
{
 8004d24:	b5b0      	push	{r4, r5, r7, lr}
 8004d26:	b096      	sub	sp, #88	; 0x58
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
	if(!Device[deviceIndex].isInit)
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	4a60      	ldr	r2, [pc, #384]	; (8004eb4 <MPU925x_ReadIMU+0x190>)
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	4413      	add	r3, r2
 8004d38:	330c      	adds	r3, #12
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d100      	bne.n	8004d42 <MPU925x_ReadIMU+0x1e>
		while(1);
 8004d40:	e7fe      	b.n	8004d40 <MPU925x_ReadIMU+0x1c>

	MPU925x_IMU_Data_t IMU_Data;
	uint8_t data[14];
	ReadRegData(deviceIndex, MPU925X_REG_ACCEL_XOUT_H, data, 14);
 8004d42:	f107 0208 	add.w	r2, r7, #8
 8004d46:	78f8      	ldrb	r0, [r7, #3]
 8004d48:	230e      	movs	r3, #14
 8004d4a:	213b      	movs	r1, #59	; 0x3b
 8004d4c:	f000 f8b8 	bl	8004ec0 <ReadRegData>

	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 8004d50:	7a3b      	ldrb	r3, [r7, #8]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	b21a      	sxth	r2, r3
 8004d56:	7a7b      	ldrb	r3, [r7, #9]
 8004d58:	b21b      	sxth	r3, r3
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 8004d60:	7abb      	ldrb	r3, [r7, #10]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	b21a      	sxth	r2, r3
 8004d66:	7afb      	ldrb	r3, [r7, #11]
 8004d68:	b21b      	sxth	r3, r3
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 8004d70:	7b3b      	ldrb	r3, [r7, #12]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	b21a      	sxth	r2, r3
 8004d76:	7b7b      	ldrb	r3, [r7, #13]
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8004d80:	7c3b      	ldrb	r3, [r7, #16]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	b21a      	sxth	r2, r3
 8004d86:	7c7b      	ldrb	r3, [r7, #17]
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8004d90:	7cbb      	ldrb	r3, [r7, #18]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	b21a      	sxth	r2, r3
 8004d96:	7cfb      	ldrb	r3, [r7, #19]
 8004d98:	b21b      	sxth	r3, r3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 8004da0:	7d3b      	ldrb	r3, [r7, #20]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	b21a      	sxth	r2, r3
 8004da6:	7d7b      	ldrb	r3, [r7, #21]
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	IMU_Data.Struct.ax = ax / accelSensitivity;
 8004db0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8004db4:	ee07 3a90 	vmov	s15, r3
 8004db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dbc:	4b3e      	ldr	r3, [pc, #248]	; (8004eb8 <MPU925x_ReadIMU+0x194>)
 8004dbe:	edd3 7a00 	vldr	s15, [r3]
 8004dc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004dc6:	ee16 0a90 	vmov	r0, s13
 8004dca:	f7fb fb61 	bl	8000490 <__aeabi_f2d>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMU_Data.Struct.ay = ay / accelSensitivity;
 8004dd6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004de2:	4b35      	ldr	r3, [pc, #212]	; (8004eb8 <MPU925x_ReadIMU+0x194>)
 8004de4:	edd3 7a00 	vldr	s15, [r3]
 8004de8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004dec:	ee16 0a90 	vmov	r0, s13
 8004df0:	f7fb fb4e 	bl	8000490 <__aeabi_f2d>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMU_Data.Struct.az = az / accelSensitivity;
 8004dfc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <MPU925x_ReadIMU+0x194>)
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e12:	ee16 0a90 	vmov	r0, s13
 8004e16:	f7fb fb3b 	bl	8000490 <__aeabi_f2d>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMU_Data.Struct.gx = gx / gyroSensitivity;
 8004e22:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e2e:	4b23      	ldr	r3, [pc, #140]	; (8004ebc <MPU925x_ReadIMU+0x198>)
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e38:	ee16 0a90 	vmov	r0, s13
 8004e3c:	f7fb fb28 	bl	8000490 <__aeabi_f2d>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	IMU_Data.Struct.gy = gy / gyroSensitivity;
 8004e48:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <MPU925x_ReadIMU+0x198>)
 8004e56:	edd3 7a00 	vldr	s15, [r3]
 8004e5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e5e:	ee16 0a90 	vmov	r0, s13
 8004e62:	f7fb fb15 	bl	8000490 <__aeabi_f2d>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMU_Data.Struct.gz = gz / gyroSensitivity;
 8004e6e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <MPU925x_ReadIMU+0x198>)
 8004e7c:	edd3 7a00 	vldr	s15, [r3]
 8004e80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e84:	ee16 0a90 	vmov	r0, s13
 8004e88:	f7fb fb02 	bl	8000490 <__aeabi_f2d>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	return IMU_Data;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	461d      	mov	r5, r3
 8004e98:	f107 0418 	add.w	r4, r7, #24
 8004e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ea8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	3758      	adds	r7, #88	; 0x58
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb4:	2000029c 	.word	0x2000029c
 8004eb8:	20000010 	.word	0x20000010
 8004ebc:	20000014 	.word	0x20000014

08004ec0 <ReadRegData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void ReadRegData(uint8_t deviceIndex, uint8_t startAddress, uint8_t *data, uint8_t nBytes)
{
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	603a      	str	r2, [r7, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	71fb      	strb	r3, [r7, #7]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	71bb      	strb	r3, [r7, #6]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f901 	bl	80050e0 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPI_Handle)));
 8004ede:	bf00      	nop
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	4a35      	ldr	r2, [pc, #212]	; (8004fb8 <ReadRegData+0xf8>)
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	4413      	add	r3, r2
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fd6f 	bl	80049ce <LL_SPI_IsActiveFlag_TXE>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f4      	beq.n	8004ee0 <ReadRegData+0x20>
	LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, (startAddress | 0x80));
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	4a2f      	ldr	r2, [pc, #188]	; (8004fb8 <ReadRegData+0xf8>)
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	4413      	add	r3, r2
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	79bb      	ldrb	r3, [r7, #6]
 8004f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7ff fd80 	bl	8004a10 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPI_Handle)));
 8004f10:	bf00      	nop
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	4a28      	ldr	r2, [pc, #160]	; (8004fb8 <ReadRegData+0xf8>)
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	4413      	add	r3, r2
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fd43 	bl	80049a8 <LL_SPI_IsActiveFlag_RXNE>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f4      	beq.n	8004f12 <ReadRegData+0x52>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	4a23      	ldr	r2, [pc, #140]	; (8004fb8 <ReadRegData+0xf8>)
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	4413      	add	r3, r2
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fd5e 	bl	80049f4 <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i < nBytes; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	e030      	b.n	8004fa0 <ReadRegData+0xe0>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPI_Handle)));
 8004f3e:	bf00      	nop
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <ReadRegData+0xf8>)
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	4413      	add	r3, r2
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fd3f 	bl	80049ce <LL_SPI_IsActiveFlag_TXE>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f4      	beq.n	8004f40 <ReadRegData+0x80>
		LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, 0x00);
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <ReadRegData+0xf8>)
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4413      	add	r3, r2
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fd54 	bl	8004a10 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPI_Handle)));
 8004f68:	bf00      	nop
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	4a12      	ldr	r2, [pc, #72]	; (8004fb8 <ReadRegData+0xf8>)
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	4413      	add	r3, r2
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fd17 	bl	80049a8 <LL_SPI_IsActiveFlag_RXNE>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f4      	beq.n	8004f6a <ReadRegData+0xaa>
		data[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	4a0d      	ldr	r2, [pc, #52]	; (8004fb8 <ReadRegData+0xf8>)
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	4413      	add	r3, r2
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	18d4      	adds	r4, r2, r3
 8004f90:	4608      	mov	r0, r1
 8004f92:	f7ff fd2f 	bl	80049f4 <LL_SPI_ReceiveData8>
 8004f96:	4603      	mov	r3, r0
 8004f98:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < nBytes; i++)
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	797b      	ldrb	r3, [r7, #5]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d3ca      	bcc.n	8004f3e <ReadRegData+0x7e>
	}

	ClearChipSelect(deviceIndex);
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f87c 	bl	80050a8 <ClearChipSelect>
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd90      	pop	{r4, r7, pc}
 8004fb8:	2000029c 	.word	0x2000029c

08004fbc <WriteRegData>:

static void WriteRegData(uint8_t deviceIndex, uint8_t startAdress, uint8_t *data, uint8_t nBytes)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	603a      	str	r2, [r7, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	71bb      	strb	r3, [r7, #6]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f883 	bl	80050e0 <SetChipSelect>

	while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_TXE));
 8004fda:	bf00      	nop
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	4a31      	ldr	r2, [pc, #196]	; (80050a4 <WriteRegData+0xe8>)
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	4413      	add	r3, r2
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f5      	beq.n	8004fdc <WriteRegData+0x20>
	LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, startAdress);
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <WriteRegData+0xe8>)
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	4413      	add	r3, r2
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	79ba      	ldrb	r2, [r7, #6]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fd06 	bl	8004a10 <LL_SPI_TransmitData8>
	while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_RXNE));
 8005004:	bf00      	nop
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <WriteRegData+0xe8>)
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	4413      	add	r3, r2
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f5      	beq.n	8005006 <WriteRegData+0x4a>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <WriteRegData+0xe8>)
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	4413      	add	r3, r2
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fce5 	bl	80049f4 <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i <nBytes; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
 800502e:	e02c      	b.n	800508a <WriteRegData+0xce>
	{
		while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_TXE));
 8005030:	bf00      	nop
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <WriteRegData+0xe8>)
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	4413      	add	r3, r2
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f5      	beq.n	8005032 <WriteRegData+0x76>
		LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, data[i]);
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <WriteRegData+0xe8>)
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	4413      	add	r3, r2
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	4413      	add	r3, r2
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	f7ff fcd9 	bl	8004a10 <LL_SPI_TransmitData8>
		while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_RXNE));
 800505e:	bf00      	nop
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	4a10      	ldr	r2, [pc, #64]	; (80050a4 <WriteRegData+0xe8>)
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	4413      	add	r3, r2
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f5      	beq.n	8005060 <WriteRegData+0xa4>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	4a0b      	ldr	r2, [pc, #44]	; (80050a4 <WriteRegData+0xe8>)
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	4413      	add	r3, r2
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fcb8 	bl	80049f4 <LL_SPI_ReceiveData8>
	for(uint8_t i = 0; i <nBytes; i++)
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	3301      	adds	r3, #1
 8005088:	73fb      	strb	r3, [r7, #15]
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	797b      	ldrb	r3, [r7, #5]
 800508e:	429a      	cmp	r2, r3
 8005090:	d3ce      	bcc.n	8005030 <WriteRegData+0x74>
	}

	ClearChipSelect(deviceIndex);
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f807 	bl	80050a8 <ClearChipSelect>
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	2000029c 	.word	0x2000029c

080050a8 <ClearChipSelect>:

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	4a09      	ldr	r2, [pc, #36]	; (80050dc <ClearChipSelect+0x34>)
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	4413      	add	r3, r2
 80050ba:	3304      	adds	r3, #4
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	4906      	ldr	r1, [pc, #24]	; (80050dc <ClearChipSelect+0x34>)
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	440b      	add	r3, r1
 80050c6:	3308      	adds	r3, #8
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7ff fcb1 	bl	8004a34 <LL_GPIO_SetOutputPin>
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	2000029c 	.word	0x2000029c

080050e0 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	4a09      	ldr	r2, [pc, #36]	; (8005114 <SetChipSelect+0x34>)
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	4413      	add	r3, r2
 80050f2:	3304      	adds	r3, #4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	4906      	ldr	r1, [pc, #24]	; (8005114 <SetChipSelect+0x34>)
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	440b      	add	r3, r1
 80050fe:	3308      	adds	r3, #8
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f7ff fca3 	bl	8004a50 <LL_GPIO_ResetOutputPin>
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	2000029c 	.word	0x2000029c

08005118 <LL_ADC_REG_SetSequencerLength>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f023 020f 	bic.w	r2, r3, #15
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <LL_ADC_IsEnabled>:
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <LL_ADC_IsEnabled+0x18>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <LL_ADC_IsEnabled+0x1a>
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8005172:	481c      	ldr	r0, [pc, #112]	; (80051e4 <LL_ADC_CommonInit+0x80>)
 8005174:	f7ff ffe3 	bl	800513e <LL_ADC_IsEnabled>
 8005178:	4604      	mov	r4, r0
 800517a:	481b      	ldr	r0, [pc, #108]	; (80051e8 <LL_ADC_CommonInit+0x84>)
 800517c:	f7ff ffdf 	bl	800513e <LL_ADC_IsEnabled>
 8005180:	4603      	mov	r3, r0
 8005182:	431c      	orrs	r4, r3
 8005184:	4819      	ldr	r0, [pc, #100]	; (80051ec <LL_ADC_CommonInit+0x88>)
 8005186:	f7ff ffda 	bl	800513e <LL_ADC_IsEnabled>
 800518a:	4603      	mov	r3, r0
 800518c:	4323      	orrs	r3, r4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d120      	bne.n	80051d4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d012      	beq.n	80051c0 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <LL_ADC_CommonInit+0x8c>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	6852      	ldr	r2, [r2, #4]
 80051aa:	4311      	orrs	r1, r2
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	6892      	ldr	r2, [r2, #8]
 80051b0:	4311      	orrs	r1, r2
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	609a      	str	r2, [r3, #8]
 80051be:	e00b      	b.n	80051d8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <LL_ADC_CommonInit+0x8c>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	e001      	b.n	80051d8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd90      	pop	{r4, r7, pc}
 80051e2:	bf00      	nop
 80051e4:	50040000 	.word	0x50040000
 80051e8:	50040100 	.word	0x50040100
 80051ec:	50040200 	.word	0x50040200
 80051f0:	ffc030e0 	.word	0xffc030e0

080051f4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff ff9b 	bl	800513e <LL_ADC_IsEnabled>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d111      	bne.n	8005232 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005216:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	6811      	ldr	r1, [r2, #0]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	6852      	ldr	r2, [r2, #4]
 8005222:	4311      	orrs	r1, r2
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	6892      	ldr	r2, [r2, #8]
 8005228:	430a      	orrs	r2, r1
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
 8005230:	e001      	b.n	8005236 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ff75 	bl	800513e <LL_ADC_IsEnabled>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d132      	bne.n	80052c0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d015      	beq.n	800528e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <LL_ADC_REG_Init+0x90>)
 8005268:	4013      	ands	r3, r2
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	6811      	ldr	r1, [r2, #0]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	6892      	ldr	r2, [r2, #8]
 8005272:	4311      	orrs	r1, r2
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	68d2      	ldr	r2, [r2, #12]
 8005278:	4311      	orrs	r1, r2
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	6912      	ldr	r2, [r2, #16]
 800527e:	4311      	orrs	r1, r2
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	6952      	ldr	r2, [r2, #20]
 8005284:	430a      	orrs	r2, r1
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]
 800528c:	e011      	b.n	80052b2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <LL_ADC_REG_Init+0x90>)
 8005294:	4013      	ands	r3, r2
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	6811      	ldr	r1, [r2, #0]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	68d2      	ldr	r2, [r2, #12]
 800529e:	4311      	orrs	r1, r2
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	6912      	ldr	r2, [r2, #16]
 80052a4:	4311      	orrs	r1, r2
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	6952      	ldr	r2, [r2, #20]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff2d 	bl	8005118 <LL_ADC_REG_SetSequencerLength>
 80052be:	e001      	b.n	80052c4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	fff0c03c 	.word	0xfff0c03c

080052d4 <LL_GPIO_SetPinMode>:
{
 80052d4:	b480      	push	{r7}
 80052d6:	b08b      	sub	sp, #44	; 0x2c
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80052fa:	2320      	movs	r3, #32
 80052fc:	e003      	b.n	8005306 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	fab3 f383 	clz	r3, r3
 8005304:	b2db      	uxtb	r3, r3
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	2103      	movs	r1, #3
 800530a:	fa01 f303 	lsl.w	r3, r1, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	401a      	ands	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	fa93 f3a3 	rbit	r3, r3
 800531c:	61fb      	str	r3, [r7, #28]
  return result;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005328:	2320      	movs	r3, #32
 800532a:	e003      	b.n	8005334 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	fab3 f383 	clz	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	372c      	adds	r7, #44	; 0x2c
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <LL_GPIO_SetPinOutputType>:
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	431a      	orrs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <LL_GPIO_SetPinSpeed>:
{
 800537e:	b480      	push	{r7}
 8005380:	b08b      	sub	sp, #44	; 0x2c
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	fa93 f3a3 	rbit	r3, r3
 8005398:	613b      	str	r3, [r7, #16]
  return result;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80053a4:	2320      	movs	r3, #32
 80053a6:	e003      	b.n	80053b0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	2103      	movs	r1, #3
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	401a      	ands	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	61fb      	str	r3, [r7, #28]
  return result;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80053d2:	2320      	movs	r3, #32
 80053d4:	e003      	b.n	80053de <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	fab3 f383 	clz	r3, r3
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	372c      	adds	r7, #44	; 0x2c
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_GPIO_SetPinPull>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	b08b      	sub	sp, #44	; 0x2c
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	fa93 f3a3 	rbit	r3, r3
 8005412:	613b      	str	r3, [r7, #16]
  return result;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800541e:	2320      	movs	r3, #32
 8005420:	e003      	b.n	800542a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	fab3 f383 	clz	r3, r3
 8005428:	b2db      	uxtb	r3, r3
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	2103      	movs	r1, #3
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	401a      	ands	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	fa93 f3a3 	rbit	r3, r3
 8005440:	61fb      	str	r3, [r7, #28]
  return result;
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800544c:	2320      	movs	r3, #32
 800544e:	e003      	b.n	8005458 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	fab3 f383 	clz	r3, r3
 8005456:	b2db      	uxtb	r3, r3
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	431a      	orrs	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	60da      	str	r2, [r3, #12]
}
 8005466:	bf00      	nop
 8005468:	372c      	adds	r7, #44	; 0x2c
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <LL_GPIO_SetAFPin_0_7>:
{
 8005472:	b480      	push	{r7}
 8005474:	b08b      	sub	sp, #44	; 0x2c
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1a      	ldr	r2, [r3, #32]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	fa93 f3a3 	rbit	r3, r3
 800548c:	613b      	str	r3, [r7, #16]
  return result;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005498:	2320      	movs	r3, #32
 800549a:	e003      	b.n	80054a4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	fab3 f383 	clz	r3, r3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	210f      	movs	r1, #15
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	401a      	ands	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	fa93 f3a3 	rbit	r3, r3
 80054ba:	61fb      	str	r3, [r7, #28]
  return result;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80054c6:	2320      	movs	r3, #32
 80054c8:	e003      	b.n	80054d2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	fab3 f383 	clz	r3, r3
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	431a      	orrs	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	621a      	str	r2, [r3, #32]
}
 80054e0:	bf00      	nop
 80054e2:	372c      	adds	r7, #44	; 0x2c
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <LL_GPIO_SetAFPin_8_15>:
{
 80054ec:	b480      	push	{r7}
 80054ee:	b08b      	sub	sp, #44	; 0x2c
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	613b      	str	r3, [r7, #16]
  return result;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005514:	2320      	movs	r3, #32
 8005516:	e003      	b.n	8005520 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	210f      	movs	r1, #15
 8005524:	fa01 f303 	lsl.w	r3, r1, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	401a      	ands	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	61fb      	str	r3, [r7, #28]
  return result;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005544:	2320      	movs	r3, #32
 8005546:	e003      	b.n	8005550 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	431a      	orrs	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800555e:	bf00      	nop
 8005560:	372c      	adds	r7, #44	; 0x2c
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b088      	sub	sp, #32
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	fa93 f3a3 	rbit	r3, r3
 8005580:	60fb      	str	r3, [r7, #12]
  return result;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <LL_GPIO_Init+0x26>
    return 32U;
 800558c:	2320      	movs	r3, #32
 800558e:	e003      	b.n	8005598 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	fab3 f383 	clz	r3, r3
 8005596:	b2db      	uxtb	r3, r3
 8005598:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800559a:	e048      	b.n	800562e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	2101      	movs	r1, #1
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	fa01 f303 	lsl.w	r3, r1, r3
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03a      	beq.n	8005628 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d003      	beq.n	80055c2 <LL_GPIO_Init+0x58>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d10e      	bne.n	80055e0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	461a      	mov	r2, r3
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fed7 	bl	800537e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	461a      	mov	r2, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff feb7 	bl	800534e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	461a      	mov	r2, r3
 80055e6:	69b9      	ldr	r1, [r7, #24]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff05 	bl	80053f8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d111      	bne.n	800561a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2bff      	cmp	r3, #255	; 0xff
 80055fa:	d807      	bhi.n	800560c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	461a      	mov	r2, r3
 8005602:	69b9      	ldr	r1, [r7, #24]
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff34 	bl	8005472 <LL_GPIO_SetAFPin_0_7>
 800560a:	e006      	b.n	800561a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	461a      	mov	r2, r3
 8005612:	69b9      	ldr	r1, [r7, #24]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ff69 	bl	80054ec <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	461a      	mov	r2, r3
 8005620:	69b9      	ldr	r1, [r7, #24]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fe56 	bl	80052d4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1af      	bne.n	800559c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <LL_RCC_HSI_IsReady>:
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800564c:	4b07      	ldr	r3, [pc, #28]	; (800566c <LL_RCC_HSI_IsReady+0x24>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005658:	d101      	bne.n	800565e <LL_RCC_HSI_IsReady+0x16>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <LL_RCC_HSI_IsReady+0x18>
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000

08005670 <LL_RCC_LSE_IsReady>:
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005674:	4b07      	ldr	r3, [pc, #28]	; (8005694 <LL_RCC_LSE_IsReady+0x24>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d101      	bne.n	8005686 <LL_RCC_LSE_IsReady+0x16>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <LL_RCC_LSE_IsReady+0x18>
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40021000 	.word	0x40021000

08005698 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d101      	bne.n	80056ac <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40021000 	.word	0x40021000

080056bc <LL_RCC_MSI_GetRange>:
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80056c0:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <LL_RCC_MSI_GetRange+0x18>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40021000 	.word	0x40021000

080056d8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80056de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40021000 	.word	0x40021000

080056f4 <LL_RCC_GetSysClkSource>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <LL_RCC_GetSysClkSource+0x18>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 030c 	and.w	r3, r3, #12
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000

08005710 <LL_RCC_GetAHBPrescaler>:
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <LL_RCC_GetAHBPrescaler+0x18>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000

0800572c <LL_RCC_GetAPB1Prescaler>:
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005730:	4b04      	ldr	r3, [pc, #16]	; (8005744 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005738:	4618      	mov	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40021000 	.word	0x40021000

08005748 <LL_RCC_GetAPB2Prescaler>:
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <LL_RCC_GetAPB2Prescaler+0x18>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005754:	4618      	mov	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000

08005764 <LL_RCC_GetUSARTClockSource>:
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <LL_RCC_GetUSARTClockSource+0x24>)
 800576e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	401a      	ands	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	4313      	orrs	r3, r2
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40021000 	.word	0x40021000

0800578c <LL_RCC_GetUARTClockSource>:
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <LL_RCC_GetUARTClockSource+0x24>)
 8005796:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	401a      	ands	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	4313      	orrs	r3, r2
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40021000 	.word	0x40021000

080057b4 <LL_RCC_PLL_GetMainSource>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <LL_RCC_PLL_GetMainSource+0x18>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0303 	and.w	r3, r3, #3
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000

080057d0 <LL_RCC_PLL_GetN>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <LL_RCC_PLL_GetN+0x18>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	0a1b      	lsrs	r3, r3, #8
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80057de:	4618      	mov	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40021000 	.word	0x40021000

080057ec <LL_RCC_PLL_GetR>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <LL_RCC_PLL_GetR+0x18>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000

08005808 <LL_RCC_PLL_GetDivider>:
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <LL_RCC_PLL_GetDivider+0x18>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000

08005824 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d137      	bne.n	80058a6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ff94 	bl	8005764 <LL_RCC_GetUSARTClockSource>
 800583c:	4603      	mov	r3, r0
 800583e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005842:	2b03      	cmp	r3, #3
 8005844:	f200 80b3 	bhi.w	80059ae <LL_RCC_GetUSARTClockFreq+0x18a>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	0800588f 	.word	0x0800588f
 8005854:	08005861 	.word	0x08005861
 8005858:	08005869 	.word	0x08005869
 800585c:	0800587b 	.word	0x0800587b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005860:	f000 f95c 	bl	8005b1c <RCC_GetSystemClockFreq>
 8005864:	60f8      	str	r0, [r7, #12]
        break;
 8005866:	e0b5      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005868:	f7ff feee 	bl	8005648 <LL_RCC_HSI_IsReady>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 809f 	beq.w	80059b2 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005874:	4b5a      	ldr	r3, [pc, #360]	; (80059e0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005876:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005878:	e09b      	b.n	80059b2 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800587a:	f7ff fef9 	bl	8005670 <LL_RCC_LSE_IsReady>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8098 	beq.w	80059b6 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800588c:	e093      	b.n	80059b6 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800588e:	f000 f945 	bl	8005b1c <RCC_GetSystemClockFreq>
 8005892:	4603      	mov	r3, r0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 f9d1 	bl	8005c3c <RCC_GetHCLKClockFreq>
 800589a:	4603      	mov	r3, r0
 800589c:	4618      	mov	r0, r3
 800589e:	f000 f9f7 	bl	8005c90 <RCC_GetPCLK2ClockFreq>
 80058a2:	60f8      	str	r0, [r7, #12]
        break;
 80058a4:	e096      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b0c      	cmp	r3, #12
 80058aa:	d146      	bne.n	800593a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ff59 	bl	8005764 <LL_RCC_GetUSARTClockSource>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80058b8:	2b0c      	cmp	r3, #12
 80058ba:	d87e      	bhi.n	80059ba <LL_RCC_GetUSARTClockFreq+0x196>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	08005923 	.word	0x08005923
 80058c8:	080059bb 	.word	0x080059bb
 80058cc:	080059bb 	.word	0x080059bb
 80058d0:	080059bb 	.word	0x080059bb
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	080059bb 	.word	0x080059bb
 80058dc:	080059bb 	.word	0x080059bb
 80058e0:	080059bb 	.word	0x080059bb
 80058e4:	08005901 	.word	0x08005901
 80058e8:	080059bb 	.word	0x080059bb
 80058ec:	080059bb 	.word	0x080059bb
 80058f0:	080059bb 	.word	0x080059bb
 80058f4:	08005911 	.word	0x08005911
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80058f8:	f000 f910 	bl	8005b1c <RCC_GetSystemClockFreq>
 80058fc:	60f8      	str	r0, [r7, #12]
        break;
 80058fe:	e069      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005900:	f7ff fea2 	bl	8005648 <LL_RCC_HSI_IsReady>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d059      	beq.n	80059be <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800590a:	4b35      	ldr	r3, [pc, #212]	; (80059e0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800590c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800590e:	e056      	b.n	80059be <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005910:	f7ff feae 	bl	8005670 <LL_RCC_LSE_IsReady>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d053      	beq.n	80059c2 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800591a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005920:	e04f      	b.n	80059c2 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005922:	f000 f8fb 	bl	8005b1c <RCC_GetSystemClockFreq>
 8005926:	4603      	mov	r3, r0
 8005928:	4618      	mov	r0, r3
 800592a:	f000 f987 	bl	8005c3c <RCC_GetHCLKClockFreq>
 800592e:	4603      	mov	r3, r0
 8005930:	4618      	mov	r0, r3
 8005932:	f000 f999 	bl	8005c68 <RCC_GetPCLK1ClockFreq>
 8005936:	60f8      	str	r0, [r7, #12]
        break;
 8005938:	e04c      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d142      	bne.n	80059c6 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff ff0f 	bl	8005764 <LL_RCC_GetUSARTClockSource>
 8005946:	4603      	mov	r3, r0
 8005948:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800594c:	d01a      	beq.n	8005984 <LL_RCC_GetUSARTClockFreq+0x160>
 800594e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005952:	d83a      	bhi.n	80059ca <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00c      	beq.n	8005974 <LL_RCC_GetUSARTClockFreq+0x150>
 800595a:	4a22      	ldr	r2, [pc, #136]	; (80059e4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d834      	bhi.n	80059ca <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005960:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005964:	d017      	beq.n	8005996 <LL_RCC_GetUSARTClockFreq+0x172>
 8005966:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d12e      	bne.n	80059ca <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800596c:	f000 f8d6 	bl	8005b1c <RCC_GetSystemClockFreq>
 8005970:	60f8      	str	r0, [r7, #12]
          break;
 8005972:	e02f      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005974:	f7ff fe68 	bl	8005648 <LL_RCC_HSI_IsReady>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d027      	beq.n	80059ce <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800597e:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005980:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005982:	e024      	b.n	80059ce <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005984:	f7ff fe74 	bl	8005670 <LL_RCC_LSE_IsReady>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d021      	beq.n	80059d2 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005994:	e01d      	b.n	80059d2 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005996:	f000 f8c1 	bl	8005b1c <RCC_GetSystemClockFreq>
 800599a:	4603      	mov	r3, r0
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f94d 	bl	8005c3c <RCC_GetHCLKClockFreq>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 f95f 	bl	8005c68 <RCC_GetPCLK1ClockFreq>
 80059aa:	60f8      	str	r0, [r7, #12]
          break;
 80059ac:	e012      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059ae:	bf00      	nop
 80059b0:	e010      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059b2:	bf00      	nop
 80059b4:	e00e      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059b6:	bf00      	nop
 80059b8:	e00c      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059ba:	bf00      	nop
 80059bc:	e00a      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059be:	bf00      	nop
 80059c0:	e008      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059c2:	bf00      	nop
 80059c4:	e006      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80059c6:	bf00      	nop
 80059c8:	e004      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80059ca:	bf00      	nop
 80059cc:	e002      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80059d2:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	00f42400 	.word	0x00f42400
 80059e4:	00300020 	.word	0x00300020
 80059e8:	00300010 	.word	0x00300010

080059ec <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2bc0      	cmp	r3, #192	; 0xc0
 80059fc:	d136      	bne.n	8005a6c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fec4 	bl	800578c <LL_RCC_GetUARTClockSource>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005a0a:	d01a      	beq.n	8005a42 <LL_RCC_GetUARTClockFreq+0x56>
 8005a0c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005a10:	d82e      	bhi.n	8005a70 <LL_RCC_GetUARTClockFreq+0x84>
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00c      	beq.n	8005a32 <LL_RCC_GetUARTClockFreq+0x46>
 8005a18:	4a3b      	ldr	r2, [pc, #236]	; (8005b08 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d828      	bhi.n	8005a70 <LL_RCC_GetUARTClockFreq+0x84>
 8005a1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a22:	d017      	beq.n	8005a54 <LL_RCC_GetUARTClockFreq+0x68>
 8005a24:	4a39      	ldr	r2, [pc, #228]	; (8005b0c <LL_RCC_GetUARTClockFreq+0x120>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d122      	bne.n	8005a70 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005a2a:	f000 f877 	bl	8005b1c <RCC_GetSystemClockFreq>
 8005a2e:	60f8      	str	r0, [r7, #12]
        break;
 8005a30:	e023      	b.n	8005a7a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005a32:	f7ff fe09 	bl	8005648 <LL_RCC_HSI_IsReady>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8005a3c:	4b34      	ldr	r3, [pc, #208]	; (8005b10 <LL_RCC_GetUARTClockFreq+0x124>)
 8005a3e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005a40:	e018      	b.n	8005a74 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005a42:	f7ff fe15 	bl	8005670 <LL_RCC_LSE_IsReady>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8005a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a50:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005a52:	e011      	b.n	8005a78 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005a54:	f000 f862 	bl	8005b1c <RCC_GetSystemClockFreq>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f8ee 	bl	8005c3c <RCC_GetHCLKClockFreq>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f900 	bl	8005c68 <RCC_GetPCLK1ClockFreq>
 8005a68:	60f8      	str	r0, [r7, #12]
        break;
 8005a6a:	e006      	b.n	8005a7a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8005a6c:	bf00      	nop
 8005a6e:	e004      	b.n	8005a7a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005a70:	bf00      	nop
 8005a72:	e002      	b.n	8005a7a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005a74:	bf00      	nop
 8005a76:	e000      	b.n	8005a7a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005a78:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a80:	d136      	bne.n	8005af0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fe82 	bl	800578c <LL_RCC_GetUARTClockSource>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005a8e:	d01a      	beq.n	8005ac6 <LL_RCC_GetUARTClockFreq+0xda>
 8005a90:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005a94:	d82e      	bhi.n	8005af4 <LL_RCC_GetUARTClockFreq+0x108>
 8005a96:	4a1f      	ldr	r2, [pc, #124]	; (8005b14 <LL_RCC_GetUARTClockFreq+0x128>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00c      	beq.n	8005ab6 <LL_RCC_GetUARTClockFreq+0xca>
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <LL_RCC_GetUARTClockFreq+0x128>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d828      	bhi.n	8005af4 <LL_RCC_GetUARTClockFreq+0x108>
 8005aa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aa6:	d017      	beq.n	8005ad8 <LL_RCC_GetUARTClockFreq+0xec>
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <LL_RCC_GetUARTClockFreq+0x12c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d122      	bne.n	8005af4 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005aae:	f000 f835 	bl	8005b1c <RCC_GetSystemClockFreq>
 8005ab2:	60f8      	str	r0, [r7, #12]
        break;
 8005ab4:	e023      	b.n	8005afe <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005ab6:	f7ff fdc7 	bl	8005648 <LL_RCC_HSI_IsReady>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <LL_RCC_GetUARTClockFreq+0x124>)
 8005ac2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ac4:	e018      	b.n	8005af8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005ac6:	f7ff fdd3 	bl	8005670 <LL_RCC_LSE_IsReady>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d015      	beq.n	8005afc <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8005ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ad4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ad6:	e011      	b.n	8005afc <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005ad8:	f000 f820 	bl	8005b1c <RCC_GetSystemClockFreq>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f8ac 	bl	8005c3c <RCC_GetHCLKClockFreq>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f8be 	bl	8005c68 <RCC_GetPCLK1ClockFreq>
 8005aec:	60f8      	str	r0, [r7, #12]
        break;
 8005aee:	e006      	b.n	8005afe <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8005af0:	bf00      	nop
 8005af2:	e004      	b.n	8005afe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005af4:	bf00      	nop
 8005af6:	e002      	b.n	8005afe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005afc:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	00c00080 	.word	0x00c00080
 8005b0c:	00c00040 	.word	0x00c00040
 8005b10:	00f42400 	.word	0x00f42400
 8005b14:	03000200 	.word	0x03000200
 8005b18:	03000100 	.word	0x03000100

08005b1c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005b22:	f7ff fde7 	bl	80056f4 <LL_RCC_GetSysClkSource>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b0c      	cmp	r3, #12
 8005b2a:	d851      	bhi.n	8005bd0 <RCC_GetSystemClockFreq+0xb4>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <RCC_GetSystemClockFreq+0x18>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b69 	.word	0x08005b69
 8005b38:	08005bd1 	.word	0x08005bd1
 8005b3c:	08005bd1 	.word	0x08005bd1
 8005b40:	08005bd1 	.word	0x08005bd1
 8005b44:	08005bbd 	.word	0x08005bbd
 8005b48:	08005bd1 	.word	0x08005bd1
 8005b4c:	08005bd1 	.word	0x08005bd1
 8005b50:	08005bd1 	.word	0x08005bd1
 8005b54:	08005bc3 	.word	0x08005bc3
 8005b58:	08005bd1 	.word	0x08005bd1
 8005b5c:	08005bd1 	.word	0x08005bd1
 8005b60:	08005bd1 	.word	0x08005bd1
 8005b64:	08005bc9 	.word	0x08005bc9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005b68:	f7ff fd96 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d111      	bne.n	8005b96 <RCC_GetSystemClockFreq+0x7a>
 8005b72:	f7ff fd91 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <RCC_GetSystemClockFreq+0x6a>
 8005b7c:	f7ff fd9e 	bl	80056bc <LL_RCC_MSI_GetRange>
 8005b80:	4603      	mov	r3, r0
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	e003      	b.n	8005b8e <RCC_GetSystemClockFreq+0x72>
 8005b86:	f7ff fda7 	bl	80056d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <RCC_GetSystemClockFreq+0x114>)
 8005b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b94:	e010      	b.n	8005bb8 <RCC_GetSystemClockFreq+0x9c>
 8005b96:	f7ff fd7f 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <RCC_GetSystemClockFreq+0x8e>
 8005ba0:	f7ff fd8c 	bl	80056bc <LL_RCC_MSI_GetRange>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	e003      	b.n	8005bb2 <RCC_GetSystemClockFreq+0x96>
 8005baa:	f7ff fd95 	bl	80056d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <RCC_GetSystemClockFreq+0x114>)
 8005bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005bba:	e033      	b.n	8005c24 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <RCC_GetSystemClockFreq+0x118>)
 8005bbe:	607b      	str	r3, [r7, #4]
      break;
 8005bc0:	e030      	b.n	8005c24 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <RCC_GetSystemClockFreq+0x11c>)
 8005bc4:	607b      	str	r3, [r7, #4]
      break;
 8005bc6:	e02d      	b.n	8005c24 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005bc8:	f000 f876 	bl	8005cb8 <RCC_PLL_GetFreqDomain_SYS>
 8005bcc:	6078      	str	r0, [r7, #4]
      break;
 8005bce:	e029      	b.n	8005c24 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005bd0:	f7ff fd62 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d111      	bne.n	8005bfe <RCC_GetSystemClockFreq+0xe2>
 8005bda:	f7ff fd5d 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <RCC_GetSystemClockFreq+0xd2>
 8005be4:	f7ff fd6a 	bl	80056bc <LL_RCC_MSI_GetRange>
 8005be8:	4603      	mov	r3, r0
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	e003      	b.n	8005bf6 <RCC_GetSystemClockFreq+0xda>
 8005bee:	f7ff fd73 	bl	80056d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	4a0e      	ldr	r2, [pc, #56]	; (8005c30 <RCC_GetSystemClockFreq+0x114>)
 8005bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfc:	e010      	b.n	8005c20 <RCC_GetSystemClockFreq+0x104>
 8005bfe:	f7ff fd4b 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <RCC_GetSystemClockFreq+0xf6>
 8005c08:	f7ff fd58 	bl	80056bc <LL_RCC_MSI_GetRange>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	e003      	b.n	8005c1a <RCC_GetSystemClockFreq+0xfe>
 8005c12:	f7ff fd61 	bl	80056d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005c16:	4603      	mov	r3, r0
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	4a05      	ldr	r2, [pc, #20]	; (8005c30 <RCC_GetSystemClockFreq+0x114>)
 8005c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c20:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005c22:	bf00      	nop
  }

  return frequency;
 8005c24:	687b      	ldr	r3, [r7, #4]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	080063d0 	.word	0x080063d0
 8005c34:	00f42400 	.word	0x00f42400
 8005c38:	007a1200 	.word	0x007a1200

08005c3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005c44:	f7ff fd64 	bl	8005710 <LL_RCC_GetAHBPrescaler>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	091b      	lsrs	r3, r3, #4
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <RCC_GetHCLKClockFreq+0x28>)
 8005c52:	5cd3      	ldrb	r3, [r2, r3]
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	40d3      	lsrs	r3, r2
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	080063b8 	.word	0x080063b8

08005c68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005c70:	f7ff fd5c 	bl	800572c <LL_RCC_GetAPB1Prescaler>
 8005c74:	4603      	mov	r3, r0
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <RCC_GetPCLK1ClockFreq+0x24>)
 8005c7a:	5cd3      	ldrb	r3, [r2, r3]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	40d3      	lsrs	r3, r2
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	080063c8 	.word	0x080063c8

08005c90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005c98:	f7ff fd56 	bl	8005748 <LL_RCC_GetAPB2Prescaler>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	0adb      	lsrs	r3, r3, #11
 8005ca0:	4a04      	ldr	r2, [pc, #16]	; (8005cb4 <RCC_GetPCLK2ClockFreq+0x24>)
 8005ca2:	5cd3      	ldrb	r3, [r2, r3]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	40d3      	lsrs	r3, r2
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	080063c8 	.word	0x080063c8

08005cb8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005cb8:	b590      	push	{r4, r7, lr}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005cbe:	f7ff fd79 	bl	80057b4 <LL_RCC_PLL_GetMainSource>
 8005cc2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d036      	beq.n	8005d38 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d836      	bhi.n	8005d3e <RCC_PLL_GetFreqDomain_SYS+0x86>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d003      	beq.n	8005cde <RCC_PLL_GetFreqDomain_SYS+0x26>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d02a      	beq.n	8005d32 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8005cdc:	e02f      	b.n	8005d3e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005cde:	f7ff fcdb 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d111      	bne.n	8005d0c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8005ce8:	f7ff fcd6 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <RCC_PLL_GetFreqDomain_SYS+0x44>
 8005cf2:	f7ff fce3 	bl	80056bc <LL_RCC_MSI_GetRange>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	0a1b      	lsrs	r3, r3, #8
 8005cfa:	e003      	b.n	8005d04 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8005cfc:	f7ff fcec 	bl	80056d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005d00:	4603      	mov	r3, r0
 8005d02:	0a1b      	lsrs	r3, r3, #8
 8005d04:	4a2f      	ldr	r2, [pc, #188]	; (8005dc4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0a:	e010      	b.n	8005d2e <RCC_PLL_GetFreqDomain_SYS+0x76>
 8005d0c:	f7ff fcc4 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d004      	beq.n	8005d20 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8005d16:	f7ff fcd1 	bl	80056bc <LL_RCC_MSI_GetRange>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	e003      	b.n	8005d28 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005d20:	f7ff fcda 	bl	80056d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005d24:	4603      	mov	r3, r0
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005d30:	e02f      	b.n	8005d92 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005d32:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005d34:	607b      	str	r3, [r7, #4]
      break;
 8005d36:	e02c      	b.n	8005d92 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8005d3a:	607b      	str	r3, [r7, #4]
      break;
 8005d3c:	e029      	b.n	8005d92 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005d3e:	f7ff fcab 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d111      	bne.n	8005d6c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005d48:	f7ff fca6 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005d52:	f7ff fcb3 	bl	80056bc <LL_RCC_MSI_GetRange>
 8005d56:	4603      	mov	r3, r0
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	e003      	b.n	8005d64 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8005d5c:	f7ff fcbc 	bl	80056d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005d60:	4603      	mov	r3, r0
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6a:	e010      	b.n	8005d8e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8005d6c:	f7ff fc94 	bl	8005698 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005d76:	f7ff fca1 	bl	80056bc <LL_RCC_MSI_GetRange>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	e003      	b.n	8005d88 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005d80:	f7ff fcaa 	bl	80056d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005d84:	4603      	mov	r3, r0
 8005d86:	091b      	lsrs	r3, r3, #4
 8005d88:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d8e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005d90:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d92:	f7ff fd39 	bl	8005808 <LL_RCC_PLL_GetDivider>
 8005d96:	4603      	mov	r3, r0
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	fbb2 f4f3 	udiv	r4, r2, r3
 8005da2:	f7ff fd15 	bl	80057d0 <LL_RCC_PLL_GetN>
 8005da6:	4603      	mov	r3, r0
 8005da8:	fb03 f404 	mul.w	r4, r3, r4
 8005dac:	f7ff fd1e 	bl	80057ec <LL_RCC_PLL_GetR>
 8005db0:	4603      	mov	r3, r0
 8005db2:	0e5b      	lsrs	r3, r3, #25
 8005db4:	3301      	adds	r3, #1
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd90      	pop	{r4, r7, pc}
 8005dc4:	080063d0 	.word	0x080063d0
 8005dc8:	00f42400 	.word	0x00f42400
 8005dcc:	007a1200 	.word	0x007a1200

08005dd0 <LL_SPI_IsEnabled>:
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d101      	bne.n	8005de8 <LL_SPI_IsEnabled+0x18>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <LL_SPI_IsEnabled+0x1a>
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <LL_SPI_SetRxFIFOThreshold>:
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	605a      	str	r2, [r3, #4]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <LL_SPI_SetCRCPolynomial>:
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	611a      	str	r2, [r3, #16]
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff ffc0 	bl	8005dd0 <LL_SPI_IsEnabled>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d145      	bne.n	8005ee2 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	6811      	ldr	r1, [r2, #0]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	6852      	ldr	r2, [r2, #4]
 8005e6a:	4311      	orrs	r1, r2
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	68d2      	ldr	r2, [r2, #12]
 8005e70:	4311      	orrs	r1, r2
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	6912      	ldr	r2, [r2, #16]
 8005e76:	4311      	orrs	r1, r2
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	6952      	ldr	r2, [r2, #20]
 8005e7c:	4311      	orrs	r1, r2
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	6992      	ldr	r2, [r2, #24]
 8005e82:	4311      	orrs	r1, r2
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	69d2      	ldr	r2, [r2, #28]
 8005e88:	4311      	orrs	r1, r2
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	6a12      	ldr	r2, [r2, #32]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e9e:	f023 0304 	bic.w	r3, r3, #4
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	6891      	ldr	r1, [r2, #8]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	6952      	ldr	r2, [r2, #20]
 8005eaa:	0c12      	lsrs	r2, r2, #16
 8005eac:	430a      	orrs	r2, r1
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ebc:	d204      	bcs.n	8005ec8 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8005ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff ff97 	bl	8005df6 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed0:	d105      	bne.n	8005ede <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff9f 	bl	8005e1c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <LL_TIM_SetPrescaler>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <LL_TIM_SetAutoReload>:
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <LL_TIM_SetRepetitionCounter>:
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f043 0201 	orr.w	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	615a      	str	r2, [r3, #20]
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3d      	ldr	r2, [pc, #244]	; (8006068 <LL_TIM_Init+0x108>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <LL_TIM_Init+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7e:	d00f      	beq.n	8005fa0 <LL_TIM_Init+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3a      	ldr	r2, [pc, #232]	; (800606c <LL_TIM_Init+0x10c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <LL_TIM_Init+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a39      	ldr	r2, [pc, #228]	; (8006070 <LL_TIM_Init+0x110>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <LL_TIM_Init+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a38      	ldr	r2, [pc, #224]	; (8006074 <LL_TIM_Init+0x114>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <LL_TIM_Init+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a37      	ldr	r2, [pc, #220]	; (8006078 <LL_TIM_Init+0x118>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d106      	bne.n	8005fae <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a2d      	ldr	r2, [pc, #180]	; (8006068 <LL_TIM_Init+0x108>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01f      	beq.n	8005ff6 <LL_TIM_Init+0x96>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbc:	d01b      	beq.n	8005ff6 <LL_TIM_Init+0x96>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2a      	ldr	r2, [pc, #168]	; (800606c <LL_TIM_Init+0x10c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d017      	beq.n	8005ff6 <LL_TIM_Init+0x96>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a29      	ldr	r2, [pc, #164]	; (8006070 <LL_TIM_Init+0x110>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <LL_TIM_Init+0x96>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a28      	ldr	r2, [pc, #160]	; (8006074 <LL_TIM_Init+0x114>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00f      	beq.n	8005ff6 <LL_TIM_Init+0x96>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a27      	ldr	r2, [pc, #156]	; (8006078 <LL_TIM_Init+0x118>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00b      	beq.n	8005ff6 <LL_TIM_Init+0x96>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a26      	ldr	r2, [pc, #152]	; (800607c <LL_TIM_Init+0x11c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d007      	beq.n	8005ff6 <LL_TIM_Init+0x96>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a25      	ldr	r2, [pc, #148]	; (8006080 <LL_TIM_Init+0x120>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <LL_TIM_Init+0x96>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a24      	ldr	r2, [pc, #144]	; (8006084 <LL_TIM_Init+0x124>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d106      	bne.n	8006004 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ff79 	bl	8005f08 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff ff65 	bl	8005eec <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a10      	ldr	r2, [pc, #64]	; (8006068 <LL_TIM_Init+0x108>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00f      	beq.n	800604a <LL_TIM_Init+0xea>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a12      	ldr	r2, [pc, #72]	; (8006078 <LL_TIM_Init+0x118>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00b      	beq.n	800604a <LL_TIM_Init+0xea>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a11      	ldr	r2, [pc, #68]	; (800607c <LL_TIM_Init+0x11c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d007      	beq.n	800604a <LL_TIM_Init+0xea>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a10      	ldr	r2, [pc, #64]	; (8006080 <LL_TIM_Init+0x120>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <LL_TIM_Init+0xea>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <LL_TIM_Init+0x124>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d105      	bne.n	8006056 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff ff67 	bl	8005f24 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff72 	bl	8005f40 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <LL_USART_IsEnabled>:
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <LL_USART_IsEnabled+0x18>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <LL_USART_IsEnabled+0x1a>
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <LL_USART_SetStopBitsLength>:
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	605a      	str	r2, [r3, #4]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_USART_SetHWFlowCtrl>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	609a      	str	r2, [r3, #8]
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <LL_USART_SetBaudRate>:
{
 80060fa:	b480      	push	{r7}
 80060fc:	b087      	sub	sp, #28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800610e:	d11a      	bne.n	8006146 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	005a      	lsls	r2, r3, #1
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	441a      	add	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	b29b      	uxth	r3, r3
 8006122:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800612a:	4013      	ands	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	b29b      	uxth	r3, r3
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	60da      	str	r2, [r3, #12]
}
 8006144:	e00a      	b.n	800615c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	085a      	lsrs	r2, r3, #1
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	441a      	add	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	b29b      	uxth	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	60da      	str	r2, [r3, #12]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff ff84 	bl	8006088 <LL_USART_IsEnabled>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d15b      	bne.n	800623e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <LL_USART_Init+0xe0>)
 800618c:	4013      	ands	r3, r2
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	6851      	ldr	r1, [r2, #4]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	68d2      	ldr	r2, [r2, #12]
 8006196:	4311      	orrs	r1, r2
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	6912      	ldr	r2, [r2, #16]
 800619c:	4311      	orrs	r1, r2
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	6992      	ldr	r2, [r2, #24]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff ff7c 	bl	80060ae <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ff89 	bl	80060d4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a21      	ldr	r2, [pc, #132]	; (800624c <LL_USART_Init+0xe4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d104      	bne.n	80061d4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80061ca:	2003      	movs	r0, #3
 80061cc:	f7ff fb2a 	bl	8005824 <LL_RCC_GetUSARTClockFreq>
 80061d0:	60b8      	str	r0, [r7, #8]
 80061d2:	e023      	b.n	800621c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <LL_USART_Init+0xe8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d104      	bne.n	80061e6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80061dc:	200c      	movs	r0, #12
 80061de:	f7ff fb21 	bl	8005824 <LL_RCC_GetUSARTClockFreq>
 80061e2:	60b8      	str	r0, [r7, #8]
 80061e4:	e01a      	b.n	800621c <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1a      	ldr	r2, [pc, #104]	; (8006254 <LL_USART_Init+0xec>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d104      	bne.n	80061f8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80061ee:	2030      	movs	r0, #48	; 0x30
 80061f0:	f7ff fb18 	bl	8005824 <LL_RCC_GetUSARTClockFreq>
 80061f4:	60b8      	str	r0, [r7, #8]
 80061f6:	e011      	b.n	800621c <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a17      	ldr	r2, [pc, #92]	; (8006258 <LL_USART_Init+0xf0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d104      	bne.n	800620a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006200:	20c0      	movs	r0, #192	; 0xc0
 8006202:	f7ff fbf3 	bl	80059ec <LL_RCC_GetUARTClockFreq>
 8006206:	60b8      	str	r0, [r7, #8]
 8006208:	e008      	b.n	800621c <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a13      	ldr	r2, [pc, #76]	; (800625c <LL_USART_Init+0xf4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d104      	bne.n	800621c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8006212:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006216:	f7ff fbe9 	bl	80059ec <LL_RCC_GetUARTClockFreq>
 800621a:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ff5e 	bl	80060fa <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	efff69f3 	.word	0xefff69f3
 800624c:	40013800 	.word	0x40013800
 8006250:	40004400 	.word	0x40004400
 8006254:	40004800 	.word	0x40004800
 8006258:	40004c00 	.word	0x40004c00
 800625c:	40005000 	.word	0x40005000

08006260 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006272:	4a07      	ldr	r2, [pc, #28]	; (8006290 <LL_InitTick+0x30>)
 8006274:	3b01      	subs	r3, #1
 8006276:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <LL_InitTick+0x30>)
 800627a:	2200      	movs	r2, #0
 800627c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <LL_InitTick+0x30>)
 8006280:	2205      	movs	r2, #5
 8006282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	e000e010 	.word	0xe000e010

08006294 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800629c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ffdd 	bl	8006260 <LL_InitTick>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80062b8:	4b10      	ldr	r3, [pc, #64]	; (80062fc <LL_mDelay+0x4c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80062c2:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d00c      	beq.n	80062e6 <LL_mDelay+0x36>
  {
    tmpDelay++;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80062d2:	e008      	b.n	80062e6 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80062d4:	4b09      	ldr	r3, [pc, #36]	; (80062fc <LL_mDelay+0x4c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f3      	bne.n	80062d4 <LL_mDelay+0x24>
    }
  }
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000e010 	.word	0xe000e010

08006300 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006308:	4a04      	ldr	r2, [pc, #16]	; (800631c <LL_SetSystemCoreClock+0x1c>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6013      	str	r3, [r2, #0]
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	2000000c 	.word	0x2000000c

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4d0d      	ldr	r5, [pc, #52]	; (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	; (800635c <__libc_init_array+0x3c>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2600      	movs	r6, #0
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4d0b      	ldr	r5, [pc, #44]	; (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	; (8006364 <__libc_init_array+0x44>)
 8006334:	f000 f82e 	bl	8006394 <_init>
 8006338:	1b64      	subs	r4, r4, r5
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2600      	movs	r6, #0
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	08006400 	.word	0x08006400
 800635c:	08006400 	.word	0x08006400
 8006360:	08006400 	.word	0x08006400
 8006364:	08006404 	.word	0x08006404

08006368 <memcpy>:
 8006368:	440a      	add	r2, r1
 800636a:	4291      	cmp	r1, r2
 800636c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006370:	d100      	bne.n	8006374 <memcpy+0xc>
 8006372:	4770      	bx	lr
 8006374:	b510      	push	{r4, lr}
 8006376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800637a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637e:	4291      	cmp	r1, r2
 8006380:	d1f9      	bne.n	8006376 <memcpy+0xe>
 8006382:	bd10      	pop	{r4, pc}

08006384 <memset>:
 8006384:	4402      	add	r2, r0
 8006386:	4603      	mov	r3, r0
 8006388:	4293      	cmp	r3, r2
 800638a:	d100      	bne.n	800638e <memset+0xa>
 800638c:	4770      	bx	lr
 800638e:	f803 1b01 	strb.w	r1, [r3], #1
 8006392:	e7f9      	b.n	8006388 <memset+0x4>

08006394 <_init>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr

080063a0 <_fini>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr
